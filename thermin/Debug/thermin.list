
thermin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08006bf4  08006bf4  00016bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cd4  08006cd4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006cd4  08006cd4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006cd4  08006cd4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cd4  08006cd4  00016cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cd8  08006cd8  00016cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006cdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a20  20000010  08006cec  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a30  08006cec  00021a30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ecd  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b16  00000000  00000000  00037f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001290  00000000  00000000  0003aa28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001158  00000000  00000000  0003bcb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002b48  00000000  00000000  0003ce10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f0f2  00000000  00000000  0003f958  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cebe9  00000000  00000000  0004ea4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011d633  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e7c  00000000  00000000  0011d6b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006bdc 	.word	0x08006bdc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08006bdc 	.word	0x08006bdc

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2uiz>:
 800096c:	004a      	lsls	r2, r1, #1
 800096e:	d211      	bcs.n	8000994 <__aeabi_d2uiz+0x28>
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d211      	bcs.n	800099a <__aeabi_d2uiz+0x2e>
 8000976:	d50d      	bpl.n	8000994 <__aeabi_d2uiz+0x28>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d40e      	bmi.n	80009a0 <__aeabi_d2uiz+0x34>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d102      	bne.n	80009a6 <__aeabi_d2uiz+0x3a>
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	4770      	bx	lr
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	4770      	bx	lr

080009ac <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay(uint16_t time){
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <delay+0x2c>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	2200      	movs	r2, #0
 80009bc:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER (&htim1)< time);
 80009be:	bf00      	nop
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <delay+0x2c>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009c6:	88fb      	ldrh	r3, [r7, #6]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d3f9      	bcc.n	80009c0 <delay+0x14>
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	200018fc 	.word	0x200018fc
 80009dc:	00000000 	.word	0x00000000

080009e0 <HAL_TIM_IC_CaptureCallback>:

///*
  void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	7f1b      	ldrb	r3, [r3, #28]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	f040 8083 	bne.w	8000af8 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 80009f2:	4b45      	ldr	r3, [pc, #276]	; (8000b08 <HAL_TIM_IC_CaptureCallback+0x128>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d11a      	bne.n	8000a30 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80009fa:	2100      	movs	r1, #0
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f002 fc4b 	bl	8003298 <HAL_TIM_ReadCapturedValue>
 8000a02:	4602      	mov	r2, r0
 8000a04:	4b41      	ldr	r3, [pc, #260]	; (8000b0c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000a06:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000a08:	4b3f      	ldr	r3, [pc, #252]	; (8000b08 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	6a1a      	ldr	r2, [r3, #32]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f022 020a 	bic.w	r2, r2, #10
 8000a1c:	621a      	str	r2, [r3, #32]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	6a1a      	ldr	r2, [r3, #32]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f042 0202 	orr.w	r2, r2, #2
 8000a2c:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}// */
 8000a2e:	e063      	b.n	8000af8 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000a30:	4b35      	ldr	r3, [pc, #212]	; (8000b08 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d15f      	bne.n	8000af8 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000a38:	2100      	movs	r1, #0
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f002 fc2c 	bl	8003298 <HAL_TIM_ReadCapturedValue>
 8000a40:	4602      	mov	r2, r0
 8000a42:	4b33      	ldr	r3, [pc, #204]	; (8000b10 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000a44:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8000a4e:	4b30      	ldr	r3, [pc, #192]	; (8000b10 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	4b2e      	ldr	r3, [pc, #184]	; (8000b0c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d907      	bls.n	8000a6a <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8000a5a:	4b2d      	ldr	r3, [pc, #180]	; (8000b10 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	4b2b      	ldr	r3, [pc, #172]	; (8000b0c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	1ad3      	subs	r3, r2, r3
 8000a64:	4a2b      	ldr	r2, [pc, #172]	; (8000b14 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000a66:	6013      	str	r3, [r2, #0]
 8000a68:	e00f      	b.n	8000a8a <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8000a6a:	4b28      	ldr	r3, [pc, #160]	; (8000b0c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	4b28      	ldr	r3, [pc, #160]	; (8000b10 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d909      	bls.n	8000a8a <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000a76:	4b26      	ldr	r3, [pc, #152]	; (8000b10 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	4b24      	ldr	r3, [pc, #144]	; (8000b0c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	1ad3      	subs	r3, r2, r3
 8000a80:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000a84:	33ff      	adds	r3, #255	; 0xff
 8000a86:	4a23      	ldr	r2, [pc, #140]	; (8000b14 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000a88:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8000a8a:	4b22      	ldr	r3, [pc, #136]	; (8000b14 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff fce0 	bl	8000454 <__aeabi_ui2d>
 8000a94:	a31a      	add	r3, pc, #104	; (adr r3, 8000b00 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a9a:	f7ff fd55 	bl	8000548 <__aeabi_dmul>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	460c      	mov	r4, r1
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	4621      	mov	r1, r4
 8000aa6:	f04f 0200 	mov.w	r2, #0
 8000aaa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aae:	f7ff fe75 	bl	800079c <__aeabi_ddiv>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	460c      	mov	r4, r1
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	4621      	mov	r1, r4
 8000aba:	f7ff ff57 	bl	800096c <__aeabi_d2uiz>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000ac4:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	6a1a      	ldr	r2, [r3, #32]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f022 020a 	bic.w	r2, r2, #10
 8000ada:	621a      	str	r2, [r3, #32]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	6a12      	ldr	r2, [r2, #32]
 8000ae6:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	68da      	ldr	r2, [r3, #12]
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f022 0202 	bic.w	r2, r2, #2
 8000af6:	60da      	str	r2, [r3, #12]
}// */
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd90      	pop	{r4, r7, pc}
 8000b00:	b020c49c 	.word	0xb020c49c
 8000b04:	3fa16872 	.word	0x3fa16872
 8000b08:	20000038 	.word	0x20000038
 8000b0c:	2000002c 	.word	0x2000002c
 8000b10:	20000030 	.word	0x20000030
 8000b14:	20000034 	.word	0x20000034
 8000b18:	20000039 	.word	0x20000039
 8000b1c:	200018fc 	.word	0x200018fc

08000b20 <HCSR04_Read>:
void HCSR04_Read (void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000b24:	2201      	movs	r2, #1
 8000b26:	2102      	movs	r1, #2
 8000b28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b2c:	f000 fe10 	bl	8001750 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8000b30:	200a      	movs	r0, #10
 8000b32:	f7ff ff3b 	bl	80009ac <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000b36:	2200      	movs	r2, #0
 8000b38:	2102      	movs	r1, #2
 8000b3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3e:	f000 fe07 	bl	8001750 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8000b42:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <HCSR04_Read+0x38>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	68da      	ldr	r2, [r3, #12]
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <HCSR04_Read+0x38>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f042 0202 	orr.w	r2, r2, #2
 8000b50:	60da      	str	r2, [r3, #12]
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200018fc 	.word	0x200018fc

08000b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b60:	f000 fb71 	bl	8001246 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b64:	f000 f840 	bl	8000be8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b68:	f000 f956 	bl	8000e18 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000b6c:	f000 f882 	bl	8000c74 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b70:	f000 f8da 	bl	8000d28 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8000b74:	2100      	movs	r1, #0
 8000b76:	4812      	ldr	r0, [pc, #72]	; (8000bc0 <main+0x64>)
 8000b78:	f001 fdb4 	bl	80026e4 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim1,TIM_CHANNEL_1);
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4811      	ldr	r0, [pc, #68]	; (8000bc4 <main+0x68>)
 8000b80:	f001 fee6 	bl	8002950 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b84:	f003 f924 	bl	8003dd0 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 8000b88:	4a0f      	ldr	r2, [pc, #60]	; (8000bc8 <main+0x6c>)
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	f003 fa5d 	bl	800404c <osSemaphoreNew>
 8000b92:	4602      	mov	r2, r0
 8000b94:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <main+0x70>)
 8000b96:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of setFreq01 */
  setFreq01Handle = osThreadNew(StartSetFreq01, NULL, &setFreq01_attributes);
 8000b98:	4a0d      	ldr	r2, [pc, #52]	; (8000bd0 <main+0x74>)
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	480d      	ldr	r0, [pc, #52]	; (8000bd4 <main+0x78>)
 8000b9e:	f003 f981 	bl	8003ea4 <osThreadNew>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <main+0x7c>)
 8000ba6:	601a      	str	r2, [r3, #0]

  /* creation of readFreq01 */
  readFreq01Handle = osThreadNew(StartreadFreq01, NULL, &readFreq01_attributes);
 8000ba8:	4a0c      	ldr	r2, [pc, #48]	; (8000bdc <main+0x80>)
 8000baa:	2100      	movs	r1, #0
 8000bac:	480c      	ldr	r0, [pc, #48]	; (8000be0 <main+0x84>)
 8000bae:	f003 f979 	bl	8003ea4 <osThreadNew>
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <main+0x88>)
 8000bb6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000bb8:	f003 f93e 	bl	8003e38 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <main+0x60>
 8000bbe:	bf00      	nop
 8000bc0:	2000194c 	.word	0x2000194c
 8000bc4:	200018fc 	.word	0x200018fc
 8000bc8:	08006c7c 	.word	0x08006c7c
 8000bcc:	20001948 	.word	0x20001948
 8000bd0:	08006c34 	.word	0x08006c34
 8000bd4:	08000e7d 	.word	0x08000e7d
 8000bd8:	20001998 	.word	0x20001998
 8000bdc:	08006c58 	.word	0x08006c58
 8000be0:	08000eb5 	.word	0x08000eb5
 8000be4:	2000199c 	.word	0x2000199c

08000be8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b096      	sub	sp, #88	; 0x58
 8000bec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	2244      	movs	r2, #68	; 0x44
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f005 ffe7 	bl	8006bca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
 8000c08:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000c0a:	2310      	movs	r3, #16
 8000c0c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c16:	2360      	movs	r3, #96	; 0x60
 8000c18:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 fe10 	bl	8001848 <HAL_RCC_OscConfig>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <SystemClock_Config+0x4a>
  {
    Error_Handler();
 8000c2e:	f000 f95d 	bl	8000eec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c32:	230f      	movs	r3, #15
 8000c34:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000c36:	2300      	movs	r3, #0
 8000c38:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c46:	463b      	mov	r3, r7
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f001 fa1c 	bl	8002088 <HAL_RCC_ClockConfig>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000c56:	f000 f949 	bl	8000eec <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c5a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c5e:	f000 fd9d 	bl	800179c <HAL_PWREx_ControlVoltageScaling>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000c68:	f000 f940 	bl	8000eec <Error_Handler>
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	3758      	adds	r7, #88	; 0x58
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b088      	sub	sp, #32
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c92:	4b23      	ldr	r3, [pc, #140]	; (8000d20 <MX_TIM1_Init+0xac>)
 8000c94:	4a23      	ldr	r2, [pc, #140]	; (8000d24 <MX_TIM1_Init+0xb0>)
 8000c96:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 128-1;
 8000c98:	4b21      	ldr	r3, [pc, #132]	; (8000d20 <MX_TIM1_Init+0xac>)
 8000c9a:	227f      	movs	r2, #127	; 0x7f
 8000c9c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c9e:	4b20      	ldr	r3, [pc, #128]	; (8000d20 <MX_TIM1_Init+0xac>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff - 1;
 8000ca4:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <MX_TIM1_Init+0xac>)
 8000ca6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000caa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cac:	4b1c      	ldr	r3, [pc, #112]	; (8000d20 <MX_TIM1_Init+0xac>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cb2:	4b1b      	ldr	r3, [pc, #108]	; (8000d20 <MX_TIM1_Init+0xac>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb8:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <MX_TIM1_Init+0xac>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000cbe:	4818      	ldr	r0, [pc, #96]	; (8000d20 <MX_TIM1_Init+0xac>)
 8000cc0:	f001 fdee 	bl	80028a0 <HAL_TIM_IC_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000cca:	f000 f90f 	bl	8000eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cda:	f107 0314 	add.w	r3, r7, #20
 8000cde:	4619      	mov	r1, r3
 8000ce0:	480f      	ldr	r0, [pc, #60]	; (8000d20 <MX_TIM1_Init+0xac>)
 8000ce2:	f002 ffe9 	bl	8003cb8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000cec:	f000 f8fe 	bl	8000eec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	2200      	movs	r2, #0
 8000d04:	4619      	mov	r1, r3
 8000d06:	4806      	ldr	r0, [pc, #24]	; (8000d20 <MX_TIM1_Init+0xac>)
 8000d08:	f002 f867 	bl	8002dda <HAL_TIM_IC_ConfigChannel>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000d12:	f000 f8eb 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	3720      	adds	r7, #32
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	200018fc 	.word	0x200018fc
 8000d24:	40012c00 	.word	0x40012c00

08000d28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08e      	sub	sp, #56	; 0x38
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d48:	463b      	mov	r3, r7
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
 8000d54:	611a      	str	r2, [r3, #16]
 8000d56:	615a      	str	r2, [r3, #20]
 8000d58:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d5a:	4b2e      	ldr	r3, [pc, #184]	; (8000e14 <MX_TIM2_Init+0xec>)
 8000d5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d60:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000d62:	4b2c      	ldr	r3, [pc, #176]	; (8000e14 <MX_TIM2_Init+0xec>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d68:	4b2a      	ldr	r3, [pc, #168]	; (8000e14 <MX_TIM2_Init+0xec>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 15000;
 8000d6e:	4b29      	ldr	r3, [pc, #164]	; (8000e14 <MX_TIM2_Init+0xec>)
 8000d70:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000d74:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d76:	4b27      	ldr	r3, [pc, #156]	; (8000e14 <MX_TIM2_Init+0xec>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d7c:	4b25      	ldr	r3, [pc, #148]	; (8000e14 <MX_TIM2_Init+0xec>)
 8000d7e:	2280      	movs	r2, #128	; 0x80
 8000d80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d82:	4824      	ldr	r0, [pc, #144]	; (8000e14 <MX_TIM2_Init+0xec>)
 8000d84:	f001 fba0 	bl	80024c8 <HAL_TIM_Base_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000d8e:	f000 f8ad 	bl	8000eec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d96:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	481d      	ldr	r0, [pc, #116]	; (8000e14 <MX_TIM2_Init+0xec>)
 8000da0:	f002 f9c0 	bl	8003124 <HAL_TIM_ConfigClockSource>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000daa:	f000 f89f 	bl	8000eec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000dae:	4819      	ldr	r0, [pc, #100]	; (8000e14 <MX_TIM2_Init+0xec>)
 8000db0:	f001 fc36 	bl	8002620 <HAL_TIM_PWM_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000dba:	f000 f897 	bl	8000eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dc6:	f107 031c 	add.w	r3, r7, #28
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4811      	ldr	r0, [pc, #68]	; (8000e14 <MX_TIM2_Init+0xec>)
 8000dce:	f002 ff73 	bl	8003cb8 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000dd8:	f000 f888 	bl	8000eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ddc:	2360      	movs	r3, #96	; 0x60
 8000dde:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 7500;
 8000de0:	f641 534c 	movw	r3, #7500	; 0x1d4c
 8000de4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dee:	463b      	mov	r3, r7
 8000df0:	2200      	movs	r2, #0
 8000df2:	4619      	mov	r1, r3
 8000df4:	4807      	ldr	r0, [pc, #28]	; (8000e14 <MX_TIM2_Init+0xec>)
 8000df6:	f002 f885 	bl	8002f04 <HAL_TIM_PWM_ConfigChannel>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000e00:	f000 f874 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e04:	4803      	ldr	r0, [pc, #12]	; (8000e14 <MX_TIM2_Init+0xec>)
 8000e06:	f000 f907 	bl	8001018 <HAL_TIM_MspPostInit>

}
 8000e0a:	bf00      	nop
 8000e0c:	3738      	adds	r7, #56	; 0x38
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	2000194c 	.word	0x2000194c

08000e18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <MX_GPIO_Init+0x60>)
 8000e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e30:	4a11      	ldr	r2, [pc, #68]	; (8000e78 <MX_GPIO_Init+0x60>)
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <MX_GPIO_Init+0x60>)
 8000e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	603b      	str	r3, [r7, #0]
 8000e42:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_9, GPIO_PIN_RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	f240 2102 	movw	r1, #514	; 0x202
 8000e4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e4e:	f000 fc7f 	bl	8001750 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_9;
 8000e52:	f240 2302 	movw	r3, #514	; 0x202
 8000e56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	4619      	mov	r1, r3
 8000e68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6c:	f000 fb06 	bl	800147c <HAL_GPIO_Init>

}
 8000e70:	bf00      	nop
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40021000 	.word	0x40021000

08000e7c <StartSetFreq01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSetFreq01 */
void StartSetFreq01(void *argument)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	TIM2->ARR = Difference*200;
 8000e84:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <StartSetFreq01+0x34>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e8c:	21c8      	movs	r1, #200	; 0xc8
 8000e8e:	fb01 f303 	mul.w	r3, r1, r3
 8000e92:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->CCR1 = (Difference*200)/2;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <StartSetFreq01+0x34>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	22c8      	movs	r2, #200	; 0xc8
 8000e9a:	fb02 f303 	mul.w	r3, r2, r3
 8000e9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ea2:	085b      	lsrs	r3, r3, #1
 8000ea4:	6353      	str	r3, [r2, #52]	; 0x34
	osDelay(5);
 8000ea6:	2005      	movs	r0, #5
 8000ea8:	f003 f8a2 	bl	8003ff0 <osDelay>
	TIM2->ARR = Difference*200;
 8000eac:	e7ea      	b.n	8000e84 <StartSetFreq01+0x8>
 8000eae:	bf00      	nop
 8000eb0:	20000034 	.word	0x20000034

08000eb4 <StartreadFreq01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartreadFreq01 */
void StartreadFreq01(void *argument)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartreadFreq01 */
  /* Infinite loop */
  for(;;)
  {
	HCSR04_Read();
 8000ebc:	f7ff fe30 	bl	8000b20 <HCSR04_Read>
    osDelay(100);
 8000ec0:	2064      	movs	r0, #100	; 0x64
 8000ec2:	f003 f895 	bl	8003ff0 <osDelay>
	HCSR04_Read();
 8000ec6:	e7f9      	b.n	8000ebc <StartreadFreq01+0x8>

08000ec8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d101      	bne.n	8000ede <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000eda:	f000 f9cd 	bl	8001278 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40001000 	.word	0x40001000

08000eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <HAL_MspInit+0x44>)
 8000f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f06:	4a0e      	ldr	r2, [pc, #56]	; (8000f40 <HAL_MspInit+0x44>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <HAL_MspInit+0x44>)
 8000f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f1a:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <HAL_MspInit+0x44>)
 8000f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1e:	4a08      	ldr	r2, [pc, #32]	; (8000f40 <HAL_MspInit+0x44>)
 8000f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f24:	6593      	str	r3, [r2, #88]	; 0x58
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_MspInit+0x44>)
 8000f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40021000 	.word	0x40021000

08000f44 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	; 0x28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a1c      	ldr	r2, [pc, #112]	; (8000fd4 <HAL_TIM_IC_MspInit+0x90>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d131      	bne.n	8000fca <HAL_TIM_IC_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f66:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <HAL_TIM_IC_MspInit+0x94>)
 8000f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f6a:	4a1b      	ldr	r2, [pc, #108]	; (8000fd8 <HAL_TIM_IC_MspInit+0x94>)
 8000f6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f70:	6613      	str	r3, [r2, #96]	; 0x60
 8000f72:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <HAL_TIM_IC_MspInit+0x94>)
 8000f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <HAL_TIM_IC_MspInit+0x94>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	4a15      	ldr	r2, [pc, #84]	; (8000fd8 <HAL_TIM_IC_MspInit+0x94>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8a:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <HAL_TIM_IC_MspInit+0x94>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb6:	f000 fa61 	bl	800147c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	201b      	movs	r0, #27
 8000fc0:	f000 fa32 	bl	8001428 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000fc4:	201b      	movs	r0, #27
 8000fc6:	f000 fa4b 	bl	8001460 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000fca:	bf00      	nop
 8000fcc:	3728      	adds	r7, #40	; 0x28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40012c00 	.word	0x40012c00
 8000fd8:	40021000 	.word	0x40021000

08000fdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fec:	d10b      	bne.n	8001006 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <HAL_TIM_Base_MspInit+0x38>)
 8000ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff2:	4a08      	ldr	r2, [pc, #32]	; (8001014 <HAL_TIM_Base_MspInit+0x38>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	6593      	str	r3, [r2, #88]	; 0x58
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_TIM_Base_MspInit+0x38>)
 8000ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001006:	bf00      	nop
 8001008:	3714      	adds	r7, #20
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	40021000 	.word	0x40021000

08001018 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001038:	d11c      	bne.n	8001074 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <HAL_TIM_MspPostInit+0x64>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103e:	4a0f      	ldr	r2, [pc, #60]	; (800107c <HAL_TIM_MspPostInit+0x64>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001046:	4b0d      	ldr	r3, [pc, #52]	; (800107c <HAL_TIM_MspPostInit+0x64>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001052:	2301      	movs	r3, #1
 8001054:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001062:	2301      	movs	r3, #1
 8001064:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	f107 030c 	add.w	r3, r7, #12
 800106a:	4619      	mov	r1, r3
 800106c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001070:	f000 fa04 	bl	800147c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001074:	bf00      	nop
 8001076:	3720      	adds	r7, #32
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40021000 	.word	0x40021000

08001080 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08c      	sub	sp, #48	; 0x30
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001090:	2200      	movs	r2, #0
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	2036      	movs	r0, #54	; 0x36
 8001096:	f000 f9c7 	bl	8001428 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800109a:	2036      	movs	r0, #54	; 0x36
 800109c:	f000 f9e0 	bl	8001460 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80010a0:	4b1e      	ldr	r3, [pc, #120]	; (800111c <HAL_InitTick+0x9c>)
 80010a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a4:	4a1d      	ldr	r2, [pc, #116]	; (800111c <HAL_InitTick+0x9c>)
 80010a6:	f043 0310 	orr.w	r3, r3, #16
 80010aa:	6593      	str	r3, [r2, #88]	; 0x58
 80010ac:	4b1b      	ldr	r3, [pc, #108]	; (800111c <HAL_InitTick+0x9c>)
 80010ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b0:	f003 0310 	and.w	r3, r3, #16
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010b8:	f107 0210 	add.w	r2, r7, #16
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	4611      	mov	r1, r2
 80010c2:	4618      	mov	r0, r3
 80010c4:	f001 f96e 	bl	80023a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010c8:	f001 f956 	bl	8002378 <HAL_RCC_GetPCLK1Freq>
 80010cc:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80010ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d0:	4a13      	ldr	r2, [pc, #76]	; (8001120 <HAL_InitTick+0xa0>)
 80010d2:	fba2 2303 	umull	r2, r3, r2, r3
 80010d6:	0c9b      	lsrs	r3, r3, #18
 80010d8:	3b01      	subs	r3, #1
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <HAL_InitTick+0xa4>)
 80010de:	4a12      	ldr	r2, [pc, #72]	; (8001128 <HAL_InitTick+0xa8>)
 80010e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80010e2:	4b10      	ldr	r3, [pc, #64]	; (8001124 <HAL_InitTick+0xa4>)
 80010e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010e8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80010ea:	4a0e      	ldr	r2, [pc, #56]	; (8001124 <HAL_InitTick+0xa4>)
 80010ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ee:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <HAL_InitTick+0xa4>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <HAL_InitTick+0xa4>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80010fc:	4809      	ldr	r0, [pc, #36]	; (8001124 <HAL_InitTick+0xa4>)
 80010fe:	f001 f9e3 	bl	80024c8 <HAL_TIM_Base_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d104      	bne.n	8001112 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001108:	4806      	ldr	r0, [pc, #24]	; (8001124 <HAL_InitTick+0xa4>)
 800110a:	f001 fa35 	bl	8002578 <HAL_TIM_Base_Start_IT>
 800110e:	4603      	mov	r3, r0
 8001110:	e000      	b.n	8001114 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
}
 8001114:	4618      	mov	r0, r3
 8001116:	3730      	adds	r7, #48	; 0x30
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40021000 	.word	0x40021000
 8001120:	431bde83 	.word	0x431bde83
 8001124:	200019a0 	.word	0x200019a0
 8001128:	40001000 	.word	0x40001000

0800112c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113e:	e7fe      	b.n	800113e <HardFault_Handler+0x4>

08001140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001144:	e7fe      	b.n	8001144 <MemManage_Handler+0x4>

08001146 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114a:	e7fe      	b.n	800114a <BusFault_Handler+0x4>

0800114c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001150:	e7fe      	b.n	8001150 <UsageFault_Handler+0x4>

08001152 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001164:	4802      	ldr	r0, [pc, #8]	; (8001170 <TIM1_CC_IRQHandler+0x10>)
 8001166:	f001 fd19 	bl	8002b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200018fc 	.word	0x200018fc

08001174 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001178:	4802      	ldr	r0, [pc, #8]	; (8001184 <TIM6_DAC_IRQHandler+0x10>)
 800117a:	f001 fd0f 	bl	8002b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	200019a0 	.word	0x200019a0

08001188 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800118c:	4b17      	ldr	r3, [pc, #92]	; (80011ec <SystemInit+0x64>)
 800118e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001192:	4a16      	ldr	r2, [pc, #88]	; (80011ec <SystemInit+0x64>)
 8001194:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001198:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800119c:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <SystemInit+0x68>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a13      	ldr	r2, [pc, #76]	; (80011f0 <SystemInit+0x68>)
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80011a8:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <SystemInit+0x68>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80011ae:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <SystemInit+0x68>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a0f      	ldr	r2, [pc, #60]	; (80011f0 <SystemInit+0x68>)
 80011b4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80011b8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80011bc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <SystemInit+0x68>)
 80011c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011c4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011c6:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <SystemInit+0x68>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a09      	ldr	r2, [pc, #36]	; (80011f0 <SystemInit+0x68>)
 80011cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011d0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80011d2:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <SystemInit+0x68>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011d8:	4b04      	ldr	r3, [pc, #16]	; (80011ec <SystemInit+0x64>)
 80011da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011de:	609a      	str	r2, [r3, #8]
#endif
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	e000ed00 	.word	0xe000ed00
 80011f0:	40021000 	.word	0x40021000

080011f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800122c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011f8:	f7ff ffc6 	bl	8001188 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80011fc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80011fe:	e003      	b.n	8001208 <LoopCopyDataInit>

08001200 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001202:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001204:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001206:	3104      	adds	r1, #4

08001208 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001208:	480a      	ldr	r0, [pc, #40]	; (8001234 <LoopForever+0xa>)
	ldr	r3, =_edata
 800120a:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <LoopForever+0xe>)
	adds	r2, r0, r1
 800120c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800120e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001210:	d3f6      	bcc.n	8001200 <CopyDataInit>
	ldr	r2, =_sbss
 8001212:	4a0a      	ldr	r2, [pc, #40]	; (800123c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001214:	e002      	b.n	800121c <LoopFillZerobss>

08001216 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001216:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001218:	f842 3b04 	str.w	r3, [r2], #4

0800121c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <LoopForever+0x16>)
	cmp	r2, r3
 800121e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001220:	d3f9      	bcc.n	8001216 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001222:	f005 fca3 	bl	8006b6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001226:	f7ff fc99 	bl	8000b5c <main>

0800122a <LoopForever>:

LoopForever:
    b LoopForever
 800122a:	e7fe      	b.n	800122a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800122c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001230:	08006cdc 	.word	0x08006cdc
	ldr	r0, =_sdata
 8001234:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001238:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 800123c:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001240:	20001a30 	.word	0x20001a30

08001244 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001244:	e7fe      	b.n	8001244 <ADC1_IRQHandler>

08001246 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800124c:	2300      	movs	r3, #0
 800124e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001250:	2003      	movs	r0, #3
 8001252:	f000 f8de 	bl	8001412 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001256:	2000      	movs	r0, #0
 8001258:	f7ff ff12 	bl	8001080 <HAL_InitTick>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d002      	beq.n	8001268 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	71fb      	strb	r3, [r7, #7]
 8001266:	e001      	b.n	800126c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001268:	f7ff fe48 	bl	8000efc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800126c:	79fb      	ldrb	r3, [r7, #7]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_IncTick+0x20>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	461a      	mov	r2, r3
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_IncTick+0x24>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4413      	add	r3, r2
 8001288:	4a04      	ldr	r2, [pc, #16]	; (800129c <HAL_IncTick+0x24>)
 800128a:	6013      	str	r3, [r2, #0]
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	20000008 	.word	0x20000008
 800129c:	200019ec 	.word	0x200019ec

080012a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return uwTick;
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <HAL_GetTick+0x14>)
 80012a6:	681b      	ldr	r3, [r3, #0]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	200019ec 	.word	0x200019ec

080012b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <__NVIC_SetPriorityGrouping+0x44>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ce:	68ba      	ldr	r2, [r7, #8]
 80012d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012d4:	4013      	ands	r3, r2
 80012d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ea:	4a04      	ldr	r2, [pc, #16]	; (80012fc <__NVIC_SetPriorityGrouping+0x44>)
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	60d3      	str	r3, [r2, #12]
}
 80012f0:	bf00      	nop
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001304:	4b04      	ldr	r3, [pc, #16]	; (8001318 <__NVIC_GetPriorityGrouping+0x18>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	0a1b      	lsrs	r3, r3, #8
 800130a:	f003 0307 	and.w	r3, r3, #7
}
 800130e:	4618      	mov	r0, r3
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132a:	2b00      	cmp	r3, #0
 800132c:	db0b      	blt.n	8001346 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	f003 021f 	and.w	r2, r3, #31
 8001334:	4907      	ldr	r1, [pc, #28]	; (8001354 <__NVIC_EnableIRQ+0x38>)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	095b      	lsrs	r3, r3, #5
 800133c:	2001      	movs	r0, #1
 800133e:	fa00 f202 	lsl.w	r2, r0, r2
 8001342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	e000e100 	.word	0xe000e100

08001358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	6039      	str	r1, [r7, #0]
 8001362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001368:	2b00      	cmp	r3, #0
 800136a:	db0a      	blt.n	8001382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	b2da      	uxtb	r2, r3
 8001370:	490c      	ldr	r1, [pc, #48]	; (80013a4 <__NVIC_SetPriority+0x4c>)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	0112      	lsls	r2, r2, #4
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	440b      	add	r3, r1
 800137c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001380:	e00a      	b.n	8001398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	b2da      	uxtb	r2, r3
 8001386:	4908      	ldr	r1, [pc, #32]	; (80013a8 <__NVIC_SetPriority+0x50>)
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	f003 030f 	and.w	r3, r3, #15
 800138e:	3b04      	subs	r3, #4
 8001390:	0112      	lsls	r2, r2, #4
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	440b      	add	r3, r1
 8001396:	761a      	strb	r2, [r3, #24]
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000e100 	.word	0xe000e100
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b089      	sub	sp, #36	; 0x24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	f1c3 0307 	rsb	r3, r3, #7
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	bf28      	it	cs
 80013ca:	2304      	movcs	r3, #4
 80013cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3304      	adds	r3, #4
 80013d2:	2b06      	cmp	r3, #6
 80013d4:	d902      	bls.n	80013dc <NVIC_EncodePriority+0x30>
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3b03      	subs	r3, #3
 80013da:	e000      	b.n	80013de <NVIC_EncodePriority+0x32>
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e0:	f04f 32ff 	mov.w	r2, #4294967295
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43da      	mvns	r2, r3
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	401a      	ands	r2, r3
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f4:	f04f 31ff 	mov.w	r1, #4294967295
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	fa01 f303 	lsl.w	r3, r1, r3
 80013fe:	43d9      	mvns	r1, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001404:	4313      	orrs	r3, r2
         );
}
 8001406:	4618      	mov	r0, r3
 8001408:	3724      	adds	r7, #36	; 0x24
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff ff4c 	bl	80012b8 <__NVIC_SetPriorityGrouping>
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
 8001434:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800143a:	f7ff ff61 	bl	8001300 <__NVIC_GetPriorityGrouping>
 800143e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	68b9      	ldr	r1, [r7, #8]
 8001444:	6978      	ldr	r0, [r7, #20]
 8001446:	f7ff ffb1 	bl	80013ac <NVIC_EncodePriority>
 800144a:	4602      	mov	r2, r0
 800144c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001450:	4611      	mov	r1, r2
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff ff80 	bl	8001358 <__NVIC_SetPriority>
}
 8001458:	bf00      	nop
 800145a:	3718      	adds	r7, #24
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff ff54 	bl	800131c <__NVIC_EnableIRQ>
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800147c:	b480      	push	{r7}
 800147e:	b087      	sub	sp, #28
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800148a:	e148      	b.n	800171e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	2101      	movs	r1, #1
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	fa01 f303 	lsl.w	r3, r1, r3
 8001498:	4013      	ands	r3, r2
 800149a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f000 813a 	beq.w	8001718 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d00b      	beq.n	80014c4 <HAL_GPIO_Init+0x48>
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d007      	beq.n	80014c4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014b8:	2b11      	cmp	r3, #17
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2b12      	cmp	r3, #18
 80014c2:	d130      	bne.n	8001526 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	2203      	movs	r2, #3
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	4013      	ands	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	68da      	ldr	r2, [r3, #12]
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014fa:	2201      	movs	r2, #1
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43db      	mvns	r3, r3
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	4013      	ands	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	091b      	lsrs	r3, r3, #4
 8001510:	f003 0201 	and.w	r2, r3, #1
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	4313      	orrs	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	2203      	movs	r2, #3
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b02      	cmp	r3, #2
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_Init+0xea>
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b12      	cmp	r3, #18
 8001564:	d123      	bne.n	80015ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	08da      	lsrs	r2, r3, #3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3208      	adds	r2, #8
 800156e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001572:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	220f      	movs	r2, #15
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43db      	mvns	r3, r3
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	4013      	ands	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	691a      	ldr	r2, [r3, #16]
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	f003 0307 	and.w	r3, r3, #7
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	4313      	orrs	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	08da      	lsrs	r2, r3, #3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3208      	adds	r2, #8
 80015a8:	6939      	ldr	r1, [r7, #16]
 80015aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	2203      	movs	r2, #3
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43db      	mvns	r3, r3
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	4013      	ands	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f003 0203 	and.w	r2, r3, #3
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4313      	orrs	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 8094 	beq.w	8001718 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f0:	4b52      	ldr	r3, [pc, #328]	; (800173c <HAL_GPIO_Init+0x2c0>)
 80015f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015f4:	4a51      	ldr	r2, [pc, #324]	; (800173c <HAL_GPIO_Init+0x2c0>)
 80015f6:	f043 0301 	orr.w	r3, r3, #1
 80015fa:	6613      	str	r3, [r2, #96]	; 0x60
 80015fc:	4b4f      	ldr	r3, [pc, #316]	; (800173c <HAL_GPIO_Init+0x2c0>)
 80015fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001608:	4a4d      	ldr	r2, [pc, #308]	; (8001740 <HAL_GPIO_Init+0x2c4>)
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	089b      	lsrs	r3, r3, #2
 800160e:	3302      	adds	r3, #2
 8001610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001614:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	220f      	movs	r2, #15
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4013      	ands	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001632:	d00d      	beq.n	8001650 <HAL_GPIO_Init+0x1d4>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a43      	ldr	r2, [pc, #268]	; (8001744 <HAL_GPIO_Init+0x2c8>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d007      	beq.n	800164c <HAL_GPIO_Init+0x1d0>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a42      	ldr	r2, [pc, #264]	; (8001748 <HAL_GPIO_Init+0x2cc>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d101      	bne.n	8001648 <HAL_GPIO_Init+0x1cc>
 8001644:	2302      	movs	r3, #2
 8001646:	e004      	b.n	8001652 <HAL_GPIO_Init+0x1d6>
 8001648:	2307      	movs	r3, #7
 800164a:	e002      	b.n	8001652 <HAL_GPIO_Init+0x1d6>
 800164c:	2301      	movs	r3, #1
 800164e:	e000      	b.n	8001652 <HAL_GPIO_Init+0x1d6>
 8001650:	2300      	movs	r3, #0
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	f002 0203 	and.w	r2, r2, #3
 8001658:	0092      	lsls	r2, r2, #2
 800165a:	4093      	lsls	r3, r2
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	4313      	orrs	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001662:	4937      	ldr	r1, [pc, #220]	; (8001740 <HAL_GPIO_Init+0x2c4>)
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	089b      	lsrs	r3, r3, #2
 8001668:	3302      	adds	r3, #2
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001670:	4b36      	ldr	r3, [pc, #216]	; (800174c <HAL_GPIO_Init+0x2d0>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	43db      	mvns	r3, r3
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	4013      	ands	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	4313      	orrs	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001694:	4a2d      	ldr	r2, [pc, #180]	; (800174c <HAL_GPIO_Init+0x2d0>)
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800169a:	4b2c      	ldr	r3, [pc, #176]	; (800174c <HAL_GPIO_Init+0x2d0>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	43db      	mvns	r3, r3
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	4013      	ands	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016be:	4a23      	ldr	r2, [pc, #140]	; (800174c <HAL_GPIO_Init+0x2d0>)
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016c4:	4b21      	ldr	r3, [pc, #132]	; (800174c <HAL_GPIO_Init+0x2d0>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	43db      	mvns	r3, r3
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4013      	ands	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016e8:	4a18      	ldr	r2, [pc, #96]	; (800174c <HAL_GPIO_Init+0x2d0>)
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016ee:	4b17      	ldr	r3, [pc, #92]	; (800174c <HAL_GPIO_Init+0x2d0>)
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	43db      	mvns	r3, r3
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4013      	ands	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4313      	orrs	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001712:	4a0e      	ldr	r2, [pc, #56]	; (800174c <HAL_GPIO_Init+0x2d0>)
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	3301      	adds	r3, #1
 800171c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	fa22 f303 	lsr.w	r3, r2, r3
 8001728:	2b00      	cmp	r3, #0
 800172a:	f47f aeaf 	bne.w	800148c <HAL_GPIO_Init+0x10>
  }
}
 800172e:	bf00      	nop
 8001730:	371c      	adds	r7, #28
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40021000 	.word	0x40021000
 8001740:	40010000 	.word	0x40010000
 8001744:	48000400 	.word	0x48000400
 8001748:	48000800 	.word	0x48000800
 800174c:	40010400 	.word	0x40010400

08001750 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	807b      	strh	r3, [r7, #2]
 800175c:	4613      	mov	r3, r2
 800175e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001760:	787b      	ldrb	r3, [r7, #1]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001766:	887a      	ldrh	r2, [r7, #2]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800176c:	e002      	b.n	8001774 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800176e:	887a      	ldrh	r2, [r7, #2]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001784:	4b04      	ldr	r3, [pc, #16]	; (8001798 <HAL_PWREx_GetVoltageRange+0x18>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800178c:	4618      	mov	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	40007000 	.word	0x40007000

0800179c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017aa:	d130      	bne.n	800180e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80017ac:	4b23      	ldr	r3, [pc, #140]	; (800183c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017b8:	d038      	beq.n	800182c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017ba:	4b20      	ldr	r3, [pc, #128]	; (800183c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017c2:	4a1e      	ldr	r2, [pc, #120]	; (800183c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017ca:	4b1d      	ldr	r3, [pc, #116]	; (8001840 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2232      	movs	r2, #50	; 0x32
 80017d0:	fb02 f303 	mul.w	r3, r2, r3
 80017d4:	4a1b      	ldr	r2, [pc, #108]	; (8001844 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80017d6:	fba2 2303 	umull	r2, r3, r2, r3
 80017da:	0c9b      	lsrs	r3, r3, #18
 80017dc:	3301      	adds	r3, #1
 80017de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017e0:	e002      	b.n	80017e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	3b01      	subs	r3, #1
 80017e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017e8:	4b14      	ldr	r3, [pc, #80]	; (800183c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017f4:	d102      	bne.n	80017fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1f2      	bne.n	80017e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017fc:	4b0f      	ldr	r3, [pc, #60]	; (800183c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017fe:	695b      	ldr	r3, [r3, #20]
 8001800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001808:	d110      	bne.n	800182c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e00f      	b.n	800182e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800180e:	4b0b      	ldr	r3, [pc, #44]	; (800183c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800181a:	d007      	beq.n	800182c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800181c:	4b07      	ldr	r3, [pc, #28]	; (800183c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001824:	4a05      	ldr	r2, [pc, #20]	; (800183c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001826:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800182a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	40007000 	.word	0x40007000
 8001840:	20000000 	.word	0x20000000
 8001844:	431bde83 	.word	0x431bde83

08001848 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d102      	bne.n	800185c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	f000 bc11 	b.w	800207e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800185c:	4ba0      	ldr	r3, [pc, #640]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f003 030c 	and.w	r3, r3, #12
 8001864:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001866:	4b9e      	ldr	r3, [pc, #632]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	f003 0303 	and.w	r3, r3, #3
 800186e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0310 	and.w	r3, r3, #16
 8001878:	2b00      	cmp	r3, #0
 800187a:	f000 80e4 	beq.w	8001a46 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d007      	beq.n	8001894 <HAL_RCC_OscConfig+0x4c>
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	2b0c      	cmp	r3, #12
 8001888:	f040 808b 	bne.w	80019a2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	2b01      	cmp	r3, #1
 8001890:	f040 8087 	bne.w	80019a2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001894:	4b92      	ldr	r3, [pc, #584]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d005      	beq.n	80018ac <HAL_RCC_OscConfig+0x64>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d101      	bne.n	80018ac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e3e8      	b.n	800207e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a1a      	ldr	r2, [r3, #32]
 80018b0:	4b8b      	ldr	r3, [pc, #556]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0308 	and.w	r3, r3, #8
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d004      	beq.n	80018c6 <HAL_RCC_OscConfig+0x7e>
 80018bc:	4b88      	ldr	r3, [pc, #544]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018c4:	e005      	b.n	80018d2 <HAL_RCC_OscConfig+0x8a>
 80018c6:	4b86      	ldr	r3, [pc, #536]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 80018c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018cc:	091b      	lsrs	r3, r3, #4
 80018ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d223      	bcs.n	800191e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 fd94 	bl	8002408 <RCC_SetFlashLatencyFromMSIRange>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e3c9      	b.n	800207e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018ea:	4b7d      	ldr	r3, [pc, #500]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a7c      	ldr	r2, [pc, #496]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 80018f0:	f043 0308 	orr.w	r3, r3, #8
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	4b7a      	ldr	r3, [pc, #488]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	4977      	ldr	r1, [pc, #476]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 8001904:	4313      	orrs	r3, r2
 8001906:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001908:	4b75      	ldr	r3, [pc, #468]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69db      	ldr	r3, [r3, #28]
 8001914:	021b      	lsls	r3, r3, #8
 8001916:	4972      	ldr	r1, [pc, #456]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 8001918:	4313      	orrs	r3, r2
 800191a:	604b      	str	r3, [r1, #4]
 800191c:	e025      	b.n	800196a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800191e:	4b70      	ldr	r3, [pc, #448]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a6f      	ldr	r2, [pc, #444]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 8001924:	f043 0308 	orr.w	r3, r3, #8
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	4b6d      	ldr	r3, [pc, #436]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	496a      	ldr	r1, [pc, #424]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 8001938:	4313      	orrs	r3, r2
 800193a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800193c:	4b68      	ldr	r3, [pc, #416]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	69db      	ldr	r3, [r3, #28]
 8001948:	021b      	lsls	r3, r3, #8
 800194a:	4965      	ldr	r1, [pc, #404]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 800194c:	4313      	orrs	r3, r2
 800194e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d109      	bne.n	800196a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	4618      	mov	r0, r3
 800195c:	f000 fd54 	bl	8002408 <RCC_SetFlashLatencyFromMSIRange>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e389      	b.n	800207e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800196a:	f000 fc6f 	bl	800224c <HAL_RCC_GetSysClockFreq>
 800196e:	4601      	mov	r1, r0
 8001970:	4b5b      	ldr	r3, [pc, #364]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	091b      	lsrs	r3, r3, #4
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	4a5a      	ldr	r2, [pc, #360]	; (8001ae4 <HAL_RCC_OscConfig+0x29c>)
 800197c:	5cd3      	ldrb	r3, [r2, r3]
 800197e:	f003 031f 	and.w	r3, r3, #31
 8001982:	fa21 f303 	lsr.w	r3, r1, r3
 8001986:	4a58      	ldr	r2, [pc, #352]	; (8001ae8 <HAL_RCC_OscConfig+0x2a0>)
 8001988:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800198a:	4b58      	ldr	r3, [pc, #352]	; (8001aec <HAL_RCC_OscConfig+0x2a4>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fb76 	bl	8001080 <HAL_InitTick>
 8001994:	4603      	mov	r3, r0
 8001996:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001998:	7bfb      	ldrb	r3, [r7, #15]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d052      	beq.n	8001a44 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	e36d      	b.n	800207e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d032      	beq.n	8001a10 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019aa:	4b4d      	ldr	r3, [pc, #308]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a4c      	ldr	r2, [pc, #304]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019b6:	f7ff fc73 	bl	80012a0 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019be:	f7ff fc6f 	bl	80012a0 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e356      	b.n	800207e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019d0:	4b43      	ldr	r3, [pc, #268]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0f0      	beq.n	80019be <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019dc:	4b40      	ldr	r3, [pc, #256]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a3f      	ldr	r2, [pc, #252]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 80019e2:	f043 0308 	orr.w	r3, r3, #8
 80019e6:	6013      	str	r3, [r2, #0]
 80019e8:	4b3d      	ldr	r3, [pc, #244]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	493a      	ldr	r1, [pc, #232]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019fa:	4b39      	ldr	r3, [pc, #228]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	021b      	lsls	r3, r3, #8
 8001a08:	4935      	ldr	r1, [pc, #212]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	604b      	str	r3, [r1, #4]
 8001a0e:	e01a      	b.n	8001a46 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a10:	4b33      	ldr	r3, [pc, #204]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a32      	ldr	r2, [pc, #200]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 8001a16:	f023 0301 	bic.w	r3, r3, #1
 8001a1a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a1c:	f7ff fc40 	bl	80012a0 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a24:	f7ff fc3c 	bl	80012a0 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e323      	b.n	800207e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a36:	4b2a      	ldr	r3, [pc, #168]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x1dc>
 8001a42:	e000      	b.n	8001a46 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a44:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d073      	beq.n	8001b3a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	d005      	beq.n	8001a64 <HAL_RCC_OscConfig+0x21c>
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	2b0c      	cmp	r3, #12
 8001a5c:	d10e      	bne.n	8001a7c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	2b03      	cmp	r3, #3
 8001a62:	d10b      	bne.n	8001a7c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a64:	4b1e      	ldr	r3, [pc, #120]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d063      	beq.n	8001b38 <HAL_RCC_OscConfig+0x2f0>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d15f      	bne.n	8001b38 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e300      	b.n	800207e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a84:	d106      	bne.n	8001a94 <HAL_RCC_OscConfig+0x24c>
 8001a86:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a15      	ldr	r2, [pc, #84]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 8001a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	e01d      	b.n	8001ad0 <HAL_RCC_OscConfig+0x288>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a9c:	d10c      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x270>
 8001a9e:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a0f      	ldr	r2, [pc, #60]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 8001aa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a0c      	ldr	r2, [pc, #48]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 8001ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	e00b      	b.n	8001ad0 <HAL_RCC_OscConfig+0x288>
 8001ab8:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a08      	ldr	r2, [pc, #32]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 8001abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a05      	ldr	r2, [pc, #20]	; (8001ae0 <HAL_RCC_OscConfig+0x298>)
 8001aca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ace:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d01b      	beq.n	8001b10 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad8:	f7ff fbe2 	bl	80012a0 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ade:	e010      	b.n	8001b02 <HAL_RCC_OscConfig+0x2ba>
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	08006c8c 	.word	0x08006c8c
 8001ae8:	20000000 	.word	0x20000000
 8001aec:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af0:	f7ff fbd6 	bl	80012a0 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b64      	cmp	r3, #100	; 0x64
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e2bd      	b.n	800207e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b02:	4baf      	ldr	r3, [pc, #700]	; (8001dc0 <HAL_RCC_OscConfig+0x578>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0f0      	beq.n	8001af0 <HAL_RCC_OscConfig+0x2a8>
 8001b0e:	e014      	b.n	8001b3a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b10:	f7ff fbc6 	bl	80012a0 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b18:	f7ff fbc2 	bl	80012a0 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b64      	cmp	r3, #100	; 0x64
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e2a9      	b.n	800207e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b2a:	4ba5      	ldr	r3, [pc, #660]	; (8001dc0 <HAL_RCC_OscConfig+0x578>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f0      	bne.n	8001b18 <HAL_RCC_OscConfig+0x2d0>
 8001b36:	e000      	b.n	8001b3a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d060      	beq.n	8001c08 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d005      	beq.n	8001b58 <HAL_RCC_OscConfig+0x310>
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	2b0c      	cmp	r3, #12
 8001b50:	d119      	bne.n	8001b86 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d116      	bne.n	8001b86 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b58:	4b99      	ldr	r3, [pc, #612]	; (8001dc0 <HAL_RCC_OscConfig+0x578>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d005      	beq.n	8001b70 <HAL_RCC_OscConfig+0x328>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e286      	b.n	800207e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b70:	4b93      	ldr	r3, [pc, #588]	; (8001dc0 <HAL_RCC_OscConfig+0x578>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	061b      	lsls	r3, r3, #24
 8001b7e:	4990      	ldr	r1, [pc, #576]	; (8001dc0 <HAL_RCC_OscConfig+0x578>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b84:	e040      	b.n	8001c08 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d023      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b8e:	4b8c      	ldr	r3, [pc, #560]	; (8001dc0 <HAL_RCC_OscConfig+0x578>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a8b      	ldr	r2, [pc, #556]	; (8001dc0 <HAL_RCC_OscConfig+0x578>)
 8001b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9a:	f7ff fb81 	bl	80012a0 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ba2:	f7ff fb7d 	bl	80012a0 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e264      	b.n	800207e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bb4:	4b82      	ldr	r3, [pc, #520]	; (8001dc0 <HAL_RCC_OscConfig+0x578>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0f0      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc0:	4b7f      	ldr	r3, [pc, #508]	; (8001dc0 <HAL_RCC_OscConfig+0x578>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	061b      	lsls	r3, r3, #24
 8001bce:	497c      	ldr	r1, [pc, #496]	; (8001dc0 <HAL_RCC_OscConfig+0x578>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	604b      	str	r3, [r1, #4]
 8001bd4:	e018      	b.n	8001c08 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bd6:	4b7a      	ldr	r3, [pc, #488]	; (8001dc0 <HAL_RCC_OscConfig+0x578>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a79      	ldr	r2, [pc, #484]	; (8001dc0 <HAL_RCC_OscConfig+0x578>)
 8001bdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001be0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be2:	f7ff fb5d 	bl	80012a0 <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bea:	f7ff fb59 	bl	80012a0 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e240      	b.n	800207e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bfc:	4b70      	ldr	r3, [pc, #448]	; (8001dc0 <HAL_RCC_OscConfig+0x578>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1f0      	bne.n	8001bea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0308 	and.w	r3, r3, #8
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d03c      	beq.n	8001c8e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d01c      	beq.n	8001c56 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c1c:	4b68      	ldr	r3, [pc, #416]	; (8001dc0 <HAL_RCC_OscConfig+0x578>)
 8001c1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c22:	4a67      	ldr	r2, [pc, #412]	; (8001dc0 <HAL_RCC_OscConfig+0x578>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c2c:	f7ff fb38 	bl	80012a0 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c34:	f7ff fb34 	bl	80012a0 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e21b      	b.n	800207e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c46:	4b5e      	ldr	r3, [pc, #376]	; (8001dc0 <HAL_RCC_OscConfig+0x578>)
 8001c48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0ef      	beq.n	8001c34 <HAL_RCC_OscConfig+0x3ec>
 8001c54:	e01b      	b.n	8001c8e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c56:	4b5a      	ldr	r3, [pc, #360]	; (8001dc0 <HAL_RCC_OscConfig+0x578>)
 8001c58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c5c:	4a58      	ldr	r2, [pc, #352]	; (8001dc0 <HAL_RCC_OscConfig+0x578>)
 8001c5e:	f023 0301 	bic.w	r3, r3, #1
 8001c62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c66:	f7ff fb1b 	bl	80012a0 <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c6e:	f7ff fb17 	bl	80012a0 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e1fe      	b.n	800207e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c80:	4b4f      	ldr	r3, [pc, #316]	; (8001dc0 <HAL_RCC_OscConfig+0x578>)
 8001c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1ef      	bne.n	8001c6e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 80a6 	beq.w	8001de8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ca0:	4b47      	ldr	r3, [pc, #284]	; (8001dc0 <HAL_RCC_OscConfig+0x578>)
 8001ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d10d      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cac:	4b44      	ldr	r3, [pc, #272]	; (8001dc0 <HAL_RCC_OscConfig+0x578>)
 8001cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb0:	4a43      	ldr	r2, [pc, #268]	; (8001dc0 <HAL_RCC_OscConfig+0x578>)
 8001cb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb6:	6593      	str	r3, [r2, #88]	; 0x58
 8001cb8:	4b41      	ldr	r3, [pc, #260]	; (8001dc0 <HAL_RCC_OscConfig+0x578>)
 8001cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cc8:	4b3e      	ldr	r3, [pc, #248]	; (8001dc4 <HAL_RCC_OscConfig+0x57c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d118      	bne.n	8001d06 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cd4:	4b3b      	ldr	r3, [pc, #236]	; (8001dc4 <HAL_RCC_OscConfig+0x57c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a3a      	ldr	r2, [pc, #232]	; (8001dc4 <HAL_RCC_OscConfig+0x57c>)
 8001cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cde:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ce0:	f7ff fade 	bl	80012a0 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ce8:	f7ff fada 	bl	80012a0 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e1c1      	b.n	800207e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cfa:	4b32      	ldr	r3, [pc, #200]	; (8001dc4 <HAL_RCC_OscConfig+0x57c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d108      	bne.n	8001d20 <HAL_RCC_OscConfig+0x4d8>
 8001d0e:	4b2c      	ldr	r3, [pc, #176]	; (8001dc0 <HAL_RCC_OscConfig+0x578>)
 8001d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d14:	4a2a      	ldr	r2, [pc, #168]	; (8001dc0 <HAL_RCC_OscConfig+0x578>)
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d1e:	e024      	b.n	8001d6a <HAL_RCC_OscConfig+0x522>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	2b05      	cmp	r3, #5
 8001d26:	d110      	bne.n	8001d4a <HAL_RCC_OscConfig+0x502>
 8001d28:	4b25      	ldr	r3, [pc, #148]	; (8001dc0 <HAL_RCC_OscConfig+0x578>)
 8001d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d2e:	4a24      	ldr	r2, [pc, #144]	; (8001dc0 <HAL_RCC_OscConfig+0x578>)
 8001d30:	f043 0304 	orr.w	r3, r3, #4
 8001d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d38:	4b21      	ldr	r3, [pc, #132]	; (8001dc0 <HAL_RCC_OscConfig+0x578>)
 8001d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d3e:	4a20      	ldr	r2, [pc, #128]	; (8001dc0 <HAL_RCC_OscConfig+0x578>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d48:	e00f      	b.n	8001d6a <HAL_RCC_OscConfig+0x522>
 8001d4a:	4b1d      	ldr	r3, [pc, #116]	; (8001dc0 <HAL_RCC_OscConfig+0x578>)
 8001d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d50:	4a1b      	ldr	r2, [pc, #108]	; (8001dc0 <HAL_RCC_OscConfig+0x578>)
 8001d52:	f023 0301 	bic.w	r3, r3, #1
 8001d56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d5a:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <HAL_RCC_OscConfig+0x578>)
 8001d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d60:	4a17      	ldr	r2, [pc, #92]	; (8001dc0 <HAL_RCC_OscConfig+0x578>)
 8001d62:	f023 0304 	bic.w	r3, r3, #4
 8001d66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d016      	beq.n	8001da0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d72:	f7ff fa95 	bl	80012a0 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d78:	e00a      	b.n	8001d90 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d7a:	f7ff fa91 	bl	80012a0 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e176      	b.n	800207e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d90:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <HAL_RCC_OscConfig+0x578>)
 8001d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0ed      	beq.n	8001d7a <HAL_RCC_OscConfig+0x532>
 8001d9e:	e01a      	b.n	8001dd6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da0:	f7ff fa7e 	bl	80012a0 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001da6:	e00f      	b.n	8001dc8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da8:	f7ff fa7a 	bl	80012a0 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d906      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e15f      	b.n	800207e <HAL_RCC_OscConfig+0x836>
 8001dbe:	bf00      	nop
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dc8:	4baa      	ldr	r3, [pc, #680]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 8001dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1e8      	bne.n	8001da8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dd6:	7ffb      	ldrb	r3, [r7, #31]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d105      	bne.n	8001de8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ddc:	4ba5      	ldr	r3, [pc, #660]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 8001dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de0:	4aa4      	ldr	r2, [pc, #656]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 8001de2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001de6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0320 	and.w	r3, r3, #32
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d03c      	beq.n	8001e6e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d01c      	beq.n	8001e36 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001dfc:	4b9d      	ldr	r3, [pc, #628]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 8001dfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e02:	4a9c      	ldr	r2, [pc, #624]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e0c:	f7ff fa48 	bl	80012a0 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e14:	f7ff fa44 	bl	80012a0 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e12b      	b.n	800207e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e26:	4b93      	ldr	r3, [pc, #588]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 8001e28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0ef      	beq.n	8001e14 <HAL_RCC_OscConfig+0x5cc>
 8001e34:	e01b      	b.n	8001e6e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e36:	4b8f      	ldr	r3, [pc, #572]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 8001e38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e3c:	4a8d      	ldr	r2, [pc, #564]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 8001e3e:	f023 0301 	bic.w	r3, r3, #1
 8001e42:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e46:	f7ff fa2b 	bl	80012a0 <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e4e:	f7ff fa27 	bl	80012a0 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e10e      	b.n	800207e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e60:	4b84      	ldr	r3, [pc, #528]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 8001e62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1ef      	bne.n	8001e4e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 8102 	beq.w	800207c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	f040 80c5 	bne.w	800200c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e82:	4b7c      	ldr	r3, [pc, #496]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	f003 0203 	and.w	r2, r3, #3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d12c      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d123      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d11b      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d113      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed2:	085b      	lsrs	r3, r3, #1
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d109      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	085b      	lsrs	r3, r3, #1
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d067      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	2b0c      	cmp	r3, #12
 8001ef4:	d062      	beq.n	8001fbc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ef6:	4b5f      	ldr	r3, [pc, #380]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e0bb      	b.n	800207e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f06:	4b5b      	ldr	r3, [pc, #364]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a5a      	ldr	r2, [pc, #360]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 8001f0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f10:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f12:	f7ff f9c5 	bl	80012a0 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1a:	f7ff f9c1 	bl	80012a0 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e0a8      	b.n	800207e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f2c:	4b51      	ldr	r3, [pc, #324]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1f0      	bne.n	8001f1a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f38:	4b4e      	ldr	r3, [pc, #312]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	4b4e      	ldr	r3, [pc, #312]	; (8002078 <HAL_RCC_OscConfig+0x830>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f48:	3a01      	subs	r2, #1
 8001f4a:	0112      	lsls	r2, r2, #4
 8001f4c:	4311      	orrs	r1, r2
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f52:	0212      	lsls	r2, r2, #8
 8001f54:	4311      	orrs	r1, r2
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f5a:	0852      	lsrs	r2, r2, #1
 8001f5c:	3a01      	subs	r2, #1
 8001f5e:	0552      	lsls	r2, r2, #21
 8001f60:	4311      	orrs	r1, r2
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f66:	0852      	lsrs	r2, r2, #1
 8001f68:	3a01      	subs	r2, #1
 8001f6a:	0652      	lsls	r2, r2, #25
 8001f6c:	4311      	orrs	r1, r2
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f72:	06d2      	lsls	r2, r2, #27
 8001f74:	430a      	orrs	r2, r1
 8001f76:	493f      	ldr	r1, [pc, #252]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f7c:	4b3d      	ldr	r3, [pc, #244]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a3c      	ldr	r2, [pc, #240]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 8001f82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f88:	4b3a      	ldr	r3, [pc, #232]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	4a39      	ldr	r2, [pc, #228]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 8001f8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f94:	f7ff f984 	bl	80012a0 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f9c:	f7ff f980 	bl	80012a0 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e067      	b.n	800207e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fae:	4b31      	ldr	r3, [pc, #196]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fba:	e05f      	b.n	800207c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e05e      	b.n	800207e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fc0:	4b2c      	ldr	r3, [pc, #176]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d157      	bne.n	800207c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001fcc:	4b29      	ldr	r3, [pc, #164]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a28      	ldr	r2, [pc, #160]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 8001fd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fd6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fd8:	4b26      	ldr	r3, [pc, #152]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	4a25      	ldr	r2, [pc, #148]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 8001fde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fe2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fe4:	f7ff f95c 	bl	80012a0 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fec:	f7ff f958 	bl	80012a0 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e03f      	b.n	800207e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ffe:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0f0      	beq.n	8001fec <HAL_RCC_OscConfig+0x7a4>
 800200a:	e037      	b.n	800207c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	2b0c      	cmp	r3, #12
 8002010:	d02d      	beq.n	800206e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002012:	4b18      	ldr	r3, [pc, #96]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a17      	ldr	r2, [pc, #92]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 8002018:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800201c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800201e:	4b15      	ldr	r3, [pc, #84]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d105      	bne.n	8002036 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800202a:	4b12      	ldr	r3, [pc, #72]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	4a11      	ldr	r2, [pc, #68]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 8002030:	f023 0303 	bic.w	r3, r3, #3
 8002034:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002036:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	4a0e      	ldr	r2, [pc, #56]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 800203c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002040:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002044:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002046:	f7ff f92b 	bl	80012a0 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204e:	f7ff f927 	bl	80012a0 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e00e      	b.n	800207e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002060:	4b04      	ldr	r3, [pc, #16]	; (8002074 <HAL_RCC_OscConfig+0x82c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1f0      	bne.n	800204e <HAL_RCC_OscConfig+0x806>
 800206c:	e006      	b.n	800207c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e005      	b.n	800207e <HAL_RCC_OscConfig+0x836>
 8002072:	bf00      	nop
 8002074:	40021000 	.word	0x40021000
 8002078:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3720      	adds	r7, #32
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop

08002088 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e0c8      	b.n	800222e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800209c:	4b66      	ldr	r3, [pc, #408]	; (8002238 <HAL_RCC_ClockConfig+0x1b0>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d910      	bls.n	80020cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020aa:	4b63      	ldr	r3, [pc, #396]	; (8002238 <HAL_RCC_ClockConfig+0x1b0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f023 0207 	bic.w	r2, r3, #7
 80020b2:	4961      	ldr	r1, [pc, #388]	; (8002238 <HAL_RCC_ClockConfig+0x1b0>)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ba:	4b5f      	ldr	r3, [pc, #380]	; (8002238 <HAL_RCC_ClockConfig+0x1b0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d001      	beq.n	80020cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e0b0      	b.n	800222e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d04c      	beq.n	8002172 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b03      	cmp	r3, #3
 80020de:	d107      	bne.n	80020f0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020e0:	4b56      	ldr	r3, [pc, #344]	; (800223c <HAL_RCC_ClockConfig+0x1b4>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d121      	bne.n	8002130 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e09e      	b.n	800222e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d107      	bne.n	8002108 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020f8:	4b50      	ldr	r3, [pc, #320]	; (800223c <HAL_RCC_ClockConfig+0x1b4>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d115      	bne.n	8002130 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e092      	b.n	800222e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d107      	bne.n	8002120 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002110:	4b4a      	ldr	r3, [pc, #296]	; (800223c <HAL_RCC_ClockConfig+0x1b4>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d109      	bne.n	8002130 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e086      	b.n	800222e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002120:	4b46      	ldr	r3, [pc, #280]	; (800223c <HAL_RCC_ClockConfig+0x1b4>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e07e      	b.n	800222e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002130:	4b42      	ldr	r3, [pc, #264]	; (800223c <HAL_RCC_ClockConfig+0x1b4>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f023 0203 	bic.w	r2, r3, #3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	493f      	ldr	r1, [pc, #252]	; (800223c <HAL_RCC_ClockConfig+0x1b4>)
 800213e:	4313      	orrs	r3, r2
 8002140:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002142:	f7ff f8ad 	bl	80012a0 <HAL_GetTick>
 8002146:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002148:	e00a      	b.n	8002160 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800214a:	f7ff f8a9 	bl	80012a0 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	f241 3288 	movw	r2, #5000	; 0x1388
 8002158:	4293      	cmp	r3, r2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e066      	b.n	800222e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002160:	4b36      	ldr	r3, [pc, #216]	; (800223c <HAL_RCC_ClockConfig+0x1b4>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 020c 	and.w	r2, r3, #12
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	429a      	cmp	r2, r3
 8002170:	d1eb      	bne.n	800214a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d008      	beq.n	8002190 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800217e:	4b2f      	ldr	r3, [pc, #188]	; (800223c <HAL_RCC_ClockConfig+0x1b4>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	492c      	ldr	r1, [pc, #176]	; (800223c <HAL_RCC_ClockConfig+0x1b4>)
 800218c:	4313      	orrs	r3, r2
 800218e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002190:	4b29      	ldr	r3, [pc, #164]	; (8002238 <HAL_RCC_ClockConfig+0x1b0>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	429a      	cmp	r2, r3
 800219c:	d210      	bcs.n	80021c0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219e:	4b26      	ldr	r3, [pc, #152]	; (8002238 <HAL_RCC_ClockConfig+0x1b0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f023 0207 	bic.w	r2, r3, #7
 80021a6:	4924      	ldr	r1, [pc, #144]	; (8002238 <HAL_RCC_ClockConfig+0x1b0>)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ae:	4b22      	ldr	r3, [pc, #136]	; (8002238 <HAL_RCC_ClockConfig+0x1b0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d001      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e036      	b.n	800222e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d008      	beq.n	80021de <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021cc:	4b1b      	ldr	r3, [pc, #108]	; (800223c <HAL_RCC_ClockConfig+0x1b4>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	4918      	ldr	r1, [pc, #96]	; (800223c <HAL_RCC_ClockConfig+0x1b4>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d009      	beq.n	80021fe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ea:	4b14      	ldr	r3, [pc, #80]	; (800223c <HAL_RCC_ClockConfig+0x1b4>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	4910      	ldr	r1, [pc, #64]	; (800223c <HAL_RCC_ClockConfig+0x1b4>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021fe:	f000 f825 	bl	800224c <HAL_RCC_GetSysClockFreq>
 8002202:	4601      	mov	r1, r0
 8002204:	4b0d      	ldr	r3, [pc, #52]	; (800223c <HAL_RCC_ClockConfig+0x1b4>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	091b      	lsrs	r3, r3, #4
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	4a0c      	ldr	r2, [pc, #48]	; (8002240 <HAL_RCC_ClockConfig+0x1b8>)
 8002210:	5cd3      	ldrb	r3, [r2, r3]
 8002212:	f003 031f 	and.w	r3, r3, #31
 8002216:	fa21 f303 	lsr.w	r3, r1, r3
 800221a:	4a0a      	ldr	r2, [pc, #40]	; (8002244 <HAL_RCC_ClockConfig+0x1bc>)
 800221c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800221e:	4b0a      	ldr	r3, [pc, #40]	; (8002248 <HAL_RCC_ClockConfig+0x1c0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f7fe ff2c 	bl	8001080 <HAL_InitTick>
 8002228:	4603      	mov	r3, r0
 800222a:	72fb      	strb	r3, [r7, #11]

  return status;
 800222c:	7afb      	ldrb	r3, [r7, #11]
}
 800222e:	4618      	mov	r0, r3
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40022000 	.word	0x40022000
 800223c:	40021000 	.word	0x40021000
 8002240:	08006c8c 	.word	0x08006c8c
 8002244:	20000000 	.word	0x20000000
 8002248:	20000004 	.word	0x20000004

0800224c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800224c:	b480      	push	{r7}
 800224e:	b089      	sub	sp, #36	; 0x24
 8002250:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002252:	2300      	movs	r3, #0
 8002254:	61fb      	str	r3, [r7, #28]
 8002256:	2300      	movs	r3, #0
 8002258:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800225a:	4b3d      	ldr	r3, [pc, #244]	; (8002350 <HAL_RCC_GetSysClockFreq+0x104>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 030c 	and.w	r3, r3, #12
 8002262:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002264:	4b3a      	ldr	r3, [pc, #232]	; (8002350 <HAL_RCC_GetSysClockFreq+0x104>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	f003 0303 	and.w	r3, r3, #3
 800226c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d005      	beq.n	8002280 <HAL_RCC_GetSysClockFreq+0x34>
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	2b0c      	cmp	r3, #12
 8002278:	d121      	bne.n	80022be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d11e      	bne.n	80022be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002280:	4b33      	ldr	r3, [pc, #204]	; (8002350 <HAL_RCC_GetSysClockFreq+0x104>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0308 	and.w	r3, r3, #8
 8002288:	2b00      	cmp	r3, #0
 800228a:	d107      	bne.n	800229c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800228c:	4b30      	ldr	r3, [pc, #192]	; (8002350 <HAL_RCC_GetSysClockFreq+0x104>)
 800228e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002292:	0a1b      	lsrs	r3, r3, #8
 8002294:	f003 030f 	and.w	r3, r3, #15
 8002298:	61fb      	str	r3, [r7, #28]
 800229a:	e005      	b.n	80022a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800229c:	4b2c      	ldr	r3, [pc, #176]	; (8002350 <HAL_RCC_GetSysClockFreq+0x104>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022a8:	4a2a      	ldr	r2, [pc, #168]	; (8002354 <HAL_RCC_GetSysClockFreq+0x108>)
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d10d      	bne.n	80022d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022bc:	e00a      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	2b04      	cmp	r3, #4
 80022c2:	d102      	bne.n	80022ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022c4:	4b24      	ldr	r3, [pc, #144]	; (8002358 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022c6:	61bb      	str	r3, [r7, #24]
 80022c8:	e004      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	2b08      	cmp	r3, #8
 80022ce:	d101      	bne.n	80022d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022d0:	4b22      	ldr	r3, [pc, #136]	; (800235c <HAL_RCC_GetSysClockFreq+0x110>)
 80022d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	2b0c      	cmp	r3, #12
 80022d8:	d133      	bne.n	8002342 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022da:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <HAL_RCC_GetSysClockFreq+0x104>)
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	f003 0303 	and.w	r3, r3, #3
 80022e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d002      	beq.n	80022f0 <HAL_RCC_GetSysClockFreq+0xa4>
 80022ea:	2b03      	cmp	r3, #3
 80022ec:	d003      	beq.n	80022f6 <HAL_RCC_GetSysClockFreq+0xaa>
 80022ee:	e005      	b.n	80022fc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80022f0:	4b19      	ldr	r3, [pc, #100]	; (8002358 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022f2:	617b      	str	r3, [r7, #20]
      break;
 80022f4:	e005      	b.n	8002302 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022f6:	4b19      	ldr	r3, [pc, #100]	; (800235c <HAL_RCC_GetSysClockFreq+0x110>)
 80022f8:	617b      	str	r3, [r7, #20]
      break;
 80022fa:	e002      	b.n	8002302 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	617b      	str	r3, [r7, #20]
      break;
 8002300:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002302:	4b13      	ldr	r3, [pc, #76]	; (8002350 <HAL_RCC_GetSysClockFreq+0x104>)
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	091b      	lsrs	r3, r3, #4
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	3301      	adds	r3, #1
 800230e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002310:	4b0f      	ldr	r3, [pc, #60]	; (8002350 <HAL_RCC_GetSysClockFreq+0x104>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	0a1b      	lsrs	r3, r3, #8
 8002316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	fb02 f203 	mul.w	r2, r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	fbb2 f3f3 	udiv	r3, r2, r3
 8002326:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002328:	4b09      	ldr	r3, [pc, #36]	; (8002350 <HAL_RCC_GetSysClockFreq+0x104>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	0e5b      	lsrs	r3, r3, #25
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	3301      	adds	r3, #1
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002340:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002342:	69bb      	ldr	r3, [r7, #24]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3724      	adds	r7, #36	; 0x24
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	40021000 	.word	0x40021000
 8002354:	08006ca4 	.word	0x08006ca4
 8002358:	00f42400 	.word	0x00f42400
 800235c:	007a1200 	.word	0x007a1200

08002360 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002364:	4b03      	ldr	r3, [pc, #12]	; (8002374 <HAL_RCC_GetHCLKFreq+0x14>)
 8002366:	681b      	ldr	r3, [r3, #0]
}
 8002368:	4618      	mov	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	20000000 	.word	0x20000000

08002378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800237c:	f7ff fff0 	bl	8002360 <HAL_RCC_GetHCLKFreq>
 8002380:	4601      	mov	r1, r0
 8002382:	4b06      	ldr	r3, [pc, #24]	; (800239c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	0a1b      	lsrs	r3, r3, #8
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	4a04      	ldr	r2, [pc, #16]	; (80023a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800238e:	5cd3      	ldrb	r3, [r2, r3]
 8002390:	f003 031f 	and.w	r3, r3, #31
 8002394:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002398:	4618      	mov	r0, r3
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40021000 	.word	0x40021000
 80023a0:	08006c9c 	.word	0x08006c9c

080023a4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	220f      	movs	r2, #15
 80023b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80023b4:	4b12      	ldr	r3, [pc, #72]	; (8002400 <HAL_RCC_GetClockConfig+0x5c>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 0203 	and.w	r2, r3, #3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80023c0:	4b0f      	ldr	r3, [pc, #60]	; (8002400 <HAL_RCC_GetClockConfig+0x5c>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80023cc:	4b0c      	ldr	r3, [pc, #48]	; (8002400 <HAL_RCC_GetClockConfig+0x5c>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80023d8:	4b09      	ldr	r3, [pc, #36]	; (8002400 <HAL_RCC_GetClockConfig+0x5c>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	08db      	lsrs	r3, r3, #3
 80023de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80023e6:	4b07      	ldr	r3, [pc, #28]	; (8002404 <HAL_RCC_GetClockConfig+0x60>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0207 	and.w	r2, r3, #7
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	601a      	str	r2, [r3, #0]
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	40021000 	.word	0x40021000
 8002404:	40022000 	.word	0x40022000

08002408 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002410:	2300      	movs	r3, #0
 8002412:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002414:	4b2a      	ldr	r3, [pc, #168]	; (80024c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002420:	f7ff f9ae 	bl	8001780 <HAL_PWREx_GetVoltageRange>
 8002424:	6178      	str	r0, [r7, #20]
 8002426:	e014      	b.n	8002452 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002428:	4b25      	ldr	r3, [pc, #148]	; (80024c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800242a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242c:	4a24      	ldr	r2, [pc, #144]	; (80024c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800242e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002432:	6593      	str	r3, [r2, #88]	; 0x58
 8002434:	4b22      	ldr	r3, [pc, #136]	; (80024c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002440:	f7ff f99e 	bl	8001780 <HAL_PWREx_GetVoltageRange>
 8002444:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002446:	4b1e      	ldr	r3, [pc, #120]	; (80024c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244a:	4a1d      	ldr	r2, [pc, #116]	; (80024c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800244c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002450:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002458:	d10b      	bne.n	8002472 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b80      	cmp	r3, #128	; 0x80
 800245e:	d919      	bls.n	8002494 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2ba0      	cmp	r3, #160	; 0xa0
 8002464:	d902      	bls.n	800246c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002466:	2302      	movs	r3, #2
 8002468:	613b      	str	r3, [r7, #16]
 800246a:	e013      	b.n	8002494 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800246c:	2301      	movs	r3, #1
 800246e:	613b      	str	r3, [r7, #16]
 8002470:	e010      	b.n	8002494 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b80      	cmp	r3, #128	; 0x80
 8002476:	d902      	bls.n	800247e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002478:	2303      	movs	r3, #3
 800247a:	613b      	str	r3, [r7, #16]
 800247c:	e00a      	b.n	8002494 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b80      	cmp	r3, #128	; 0x80
 8002482:	d102      	bne.n	800248a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002484:	2302      	movs	r3, #2
 8002486:	613b      	str	r3, [r7, #16]
 8002488:	e004      	b.n	8002494 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b70      	cmp	r3, #112	; 0x70
 800248e:	d101      	bne.n	8002494 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002490:	2301      	movs	r3, #1
 8002492:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002494:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f023 0207 	bic.w	r2, r3, #7
 800249c:	4909      	ldr	r1, [pc, #36]	; (80024c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024a4:	4b07      	ldr	r3, [pc, #28]	; (80024c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d001      	beq.n	80024b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3718      	adds	r7, #24
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40021000 	.word	0x40021000
 80024c4:	40022000 	.word	0x40022000

080024c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e049      	b.n	800256e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d106      	bne.n	80024f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7fe fd74 	bl	8000fdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2202      	movs	r2, #2
 80024f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3304      	adds	r3, #4
 8002504:	4619      	mov	r1, r3
 8002506:	4610      	mov	r0, r2
 8002508:	f000 ff28 	bl	800335c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
	...

08002578 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b01      	cmp	r3, #1
 800258a:	d001      	beq.n	8002590 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e03b      	b.n	8002608 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2202      	movs	r2, #2
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0201 	orr.w	r2, r2, #1
 80025a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a19      	ldr	r2, [pc, #100]	; (8002614 <HAL_TIM_Base_Start_IT+0x9c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d009      	beq.n	80025c6 <HAL_TIM_Base_Start_IT+0x4e>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ba:	d004      	beq.n	80025c6 <HAL_TIM_Base_Start_IT+0x4e>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a15      	ldr	r2, [pc, #84]	; (8002618 <HAL_TIM_Base_Start_IT+0xa0>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d115      	bne.n	80025f2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	4b13      	ldr	r3, [pc, #76]	; (800261c <HAL_TIM_Base_Start_IT+0xa4>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2b06      	cmp	r3, #6
 80025d6:	d015      	beq.n	8002604 <HAL_TIM_Base_Start_IT+0x8c>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025de:	d011      	beq.n	8002604 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0201 	orr.w	r2, r2, #1
 80025ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025f0:	e008      	b.n	8002604 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f042 0201 	orr.w	r2, r2, #1
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	e000      	b.n	8002606 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002604:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	40012c00 	.word	0x40012c00
 8002618:	40014000 	.word	0x40014000
 800261c:	00010007 	.word	0x00010007

08002620 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e049      	b.n	80026c6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d106      	bne.n	800264c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f841 	bl	80026ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2202      	movs	r2, #2
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3304      	adds	r3, #4
 800265c:	4619      	mov	r1, r3
 800265e:	4610      	mov	r0, r2
 8002660:	f000 fe7c 	bl	800335c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
	...

080026e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d109      	bne.n	8002708 <HAL_TIM_PWM_Start+0x24>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	bf14      	ite	ne
 8002700:	2301      	movne	r3, #1
 8002702:	2300      	moveq	r3, #0
 8002704:	b2db      	uxtb	r3, r3
 8002706:	e03c      	b.n	8002782 <HAL_TIM_PWM_Start+0x9e>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	2b04      	cmp	r3, #4
 800270c:	d109      	bne.n	8002722 <HAL_TIM_PWM_Start+0x3e>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b01      	cmp	r3, #1
 8002718:	bf14      	ite	ne
 800271a:	2301      	movne	r3, #1
 800271c:	2300      	moveq	r3, #0
 800271e:	b2db      	uxtb	r3, r3
 8002720:	e02f      	b.n	8002782 <HAL_TIM_PWM_Start+0x9e>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	2b08      	cmp	r3, #8
 8002726:	d109      	bne.n	800273c <HAL_TIM_PWM_Start+0x58>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b01      	cmp	r3, #1
 8002732:	bf14      	ite	ne
 8002734:	2301      	movne	r3, #1
 8002736:	2300      	moveq	r3, #0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	e022      	b.n	8002782 <HAL_TIM_PWM_Start+0x9e>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	2b0c      	cmp	r3, #12
 8002740:	d109      	bne.n	8002756 <HAL_TIM_PWM_Start+0x72>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b01      	cmp	r3, #1
 800274c:	bf14      	ite	ne
 800274e:	2301      	movne	r3, #1
 8002750:	2300      	moveq	r3, #0
 8002752:	b2db      	uxtb	r3, r3
 8002754:	e015      	b.n	8002782 <HAL_TIM_PWM_Start+0x9e>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	2b10      	cmp	r3, #16
 800275a:	d109      	bne.n	8002770 <HAL_TIM_PWM_Start+0x8c>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b01      	cmp	r3, #1
 8002766:	bf14      	ite	ne
 8002768:	2301      	movne	r3, #1
 800276a:	2300      	moveq	r3, #0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	e008      	b.n	8002782 <HAL_TIM_PWM_Start+0x9e>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b01      	cmp	r3, #1
 800277a:	bf14      	ite	ne
 800277c:	2301      	movne	r3, #1
 800277e:	2300      	moveq	r3, #0
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e07e      	b.n	8002888 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d104      	bne.n	800279a <HAL_TIM_PWM_Start+0xb6>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2202      	movs	r2, #2
 8002794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002798:	e023      	b.n	80027e2 <HAL_TIM_PWM_Start+0xfe>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2b04      	cmp	r3, #4
 800279e:	d104      	bne.n	80027aa <HAL_TIM_PWM_Start+0xc6>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2202      	movs	r2, #2
 80027a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027a8:	e01b      	b.n	80027e2 <HAL_TIM_PWM_Start+0xfe>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	d104      	bne.n	80027ba <HAL_TIM_PWM_Start+0xd6>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2202      	movs	r2, #2
 80027b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027b8:	e013      	b.n	80027e2 <HAL_TIM_PWM_Start+0xfe>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	2b0c      	cmp	r3, #12
 80027be:	d104      	bne.n	80027ca <HAL_TIM_PWM_Start+0xe6>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2202      	movs	r2, #2
 80027c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027c8:	e00b      	b.n	80027e2 <HAL_TIM_PWM_Start+0xfe>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	2b10      	cmp	r3, #16
 80027ce:	d104      	bne.n	80027da <HAL_TIM_PWM_Start+0xf6>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2202      	movs	r2, #2
 80027d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027d8:	e003      	b.n	80027e2 <HAL_TIM_PWM_Start+0xfe>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2202      	movs	r2, #2
 80027de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2201      	movs	r2, #1
 80027e8:	6839      	ldr	r1, [r7, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f001 fa3e 	bl	8003c6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a26      	ldr	r2, [pc, #152]	; (8002890 <HAL_TIM_PWM_Start+0x1ac>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d009      	beq.n	800280e <HAL_TIM_PWM_Start+0x12a>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a25      	ldr	r2, [pc, #148]	; (8002894 <HAL_TIM_PWM_Start+0x1b0>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d004      	beq.n	800280e <HAL_TIM_PWM_Start+0x12a>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a23      	ldr	r2, [pc, #140]	; (8002898 <HAL_TIM_PWM_Start+0x1b4>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d101      	bne.n	8002812 <HAL_TIM_PWM_Start+0x12e>
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <HAL_TIM_PWM_Start+0x130>
 8002812:	2300      	movs	r3, #0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d007      	beq.n	8002828 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002826:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a18      	ldr	r2, [pc, #96]	; (8002890 <HAL_TIM_PWM_Start+0x1ac>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d009      	beq.n	8002846 <HAL_TIM_PWM_Start+0x162>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800283a:	d004      	beq.n	8002846 <HAL_TIM_PWM_Start+0x162>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a14      	ldr	r2, [pc, #80]	; (8002894 <HAL_TIM_PWM_Start+0x1b0>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d115      	bne.n	8002872 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	4b13      	ldr	r3, [pc, #76]	; (800289c <HAL_TIM_PWM_Start+0x1b8>)
 800284e:	4013      	ands	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2b06      	cmp	r3, #6
 8002856:	d015      	beq.n	8002884 <HAL_TIM_PWM_Start+0x1a0>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800285e:	d011      	beq.n	8002884 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 0201 	orr.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002870:	e008      	b.n	8002884 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f042 0201 	orr.w	r2, r2, #1
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	e000      	b.n	8002886 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002884:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40012c00 	.word	0x40012c00
 8002894:	40014000 	.word	0x40014000
 8002898:	40014400 	.word	0x40014400
 800289c:	00010007 	.word	0x00010007

080028a0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e049      	b.n	8002946 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d106      	bne.n	80028cc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7fe fb3c 	bl	8000f44 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2202      	movs	r2, #2
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3304      	adds	r3, #4
 80028dc:	4619      	mov	r1, r3
 80028de:	4610      	mov	r0, r2
 80028e0:	f000 fd3c 	bl	800335c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
	...

08002950 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d104      	bne.n	800296a <HAL_TIM_IC_Start_IT+0x1a>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002966:	b2db      	uxtb	r3, r3
 8002968:	e023      	b.n	80029b2 <HAL_TIM_IC_Start_IT+0x62>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	2b04      	cmp	r3, #4
 800296e:	d104      	bne.n	800297a <HAL_TIM_IC_Start_IT+0x2a>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002976:	b2db      	uxtb	r3, r3
 8002978:	e01b      	b.n	80029b2 <HAL_TIM_IC_Start_IT+0x62>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	2b08      	cmp	r3, #8
 800297e:	d104      	bne.n	800298a <HAL_TIM_IC_Start_IT+0x3a>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002986:	b2db      	uxtb	r3, r3
 8002988:	e013      	b.n	80029b2 <HAL_TIM_IC_Start_IT+0x62>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	2b0c      	cmp	r3, #12
 800298e:	d104      	bne.n	800299a <HAL_TIM_IC_Start_IT+0x4a>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002996:	b2db      	uxtb	r3, r3
 8002998:	e00b      	b.n	80029b2 <HAL_TIM_IC_Start_IT+0x62>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	2b10      	cmp	r3, #16
 800299e:	d104      	bne.n	80029aa <HAL_TIM_IC_Start_IT+0x5a>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	e003      	b.n	80029b2 <HAL_TIM_IC_Start_IT+0x62>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d104      	bne.n	80029c4 <HAL_TIM_IC_Start_IT+0x74>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	e013      	b.n	80029ec <HAL_TIM_IC_Start_IT+0x9c>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	d104      	bne.n	80029d4 <HAL_TIM_IC_Start_IT+0x84>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	e00b      	b.n	80029ec <HAL_TIM_IC_Start_IT+0x9c>
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d104      	bne.n	80029e4 <HAL_TIM_IC_Start_IT+0x94>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	e003      	b.n	80029ec <HAL_TIM_IC_Start_IT+0x9c>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80029ee:	7bfb      	ldrb	r3, [r7, #15]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d102      	bne.n	80029fa <HAL_TIM_IC_Start_IT+0xaa>
   || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80029f4:	7bbb      	ldrb	r3, [r7, #14]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d001      	beq.n	80029fe <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e0c4      	b.n	8002b88 <HAL_TIM_IC_Start_IT+0x238>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <HAL_TIM_IC_Start_IT+0xbe>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2202      	movs	r2, #2
 8002a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a0c:	e023      	b.n	8002a56 <HAL_TIM_IC_Start_IT+0x106>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d104      	bne.n	8002a1e <HAL_TIM_IC_Start_IT+0xce>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a1c:	e01b      	b.n	8002a56 <HAL_TIM_IC_Start_IT+0x106>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b08      	cmp	r3, #8
 8002a22:	d104      	bne.n	8002a2e <HAL_TIM_IC_Start_IT+0xde>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a2c:	e013      	b.n	8002a56 <HAL_TIM_IC_Start_IT+0x106>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b0c      	cmp	r3, #12
 8002a32:	d104      	bne.n	8002a3e <HAL_TIM_IC_Start_IT+0xee>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a3c:	e00b      	b.n	8002a56 <HAL_TIM_IC_Start_IT+0x106>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2b10      	cmp	r3, #16
 8002a42:	d104      	bne.n	8002a4e <HAL_TIM_IC_Start_IT+0xfe>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2202      	movs	r2, #2
 8002a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a4c:	e003      	b.n	8002a56 <HAL_TIM_IC_Start_IT+0x106>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2202      	movs	r2, #2
 8002a52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d104      	bne.n	8002a66 <HAL_TIM_IC_Start_IT+0x116>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a64:	e013      	b.n	8002a8e <HAL_TIM_IC_Start_IT+0x13e>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2b04      	cmp	r3, #4
 8002a6a:	d104      	bne.n	8002a76 <HAL_TIM_IC_Start_IT+0x126>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2202      	movs	r2, #2
 8002a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a74:	e00b      	b.n	8002a8e <HAL_TIM_IC_Start_IT+0x13e>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d104      	bne.n	8002a86 <HAL_TIM_IC_Start_IT+0x136>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2202      	movs	r2, #2
 8002a80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a84:	e003      	b.n	8002a8e <HAL_TIM_IC_Start_IT+0x13e>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2202      	movs	r2, #2
 8002a8a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	2b0c      	cmp	r3, #12
 8002a92:	d841      	bhi.n	8002b18 <HAL_TIM_IC_Start_IT+0x1c8>
 8002a94:	a201      	add	r2, pc, #4	; (adr r2, 8002a9c <HAL_TIM_IC_Start_IT+0x14c>)
 8002a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a9a:	bf00      	nop
 8002a9c:	08002ad1 	.word	0x08002ad1
 8002aa0:	08002b19 	.word	0x08002b19
 8002aa4:	08002b19 	.word	0x08002b19
 8002aa8:	08002b19 	.word	0x08002b19
 8002aac:	08002ae3 	.word	0x08002ae3
 8002ab0:	08002b19 	.word	0x08002b19
 8002ab4:	08002b19 	.word	0x08002b19
 8002ab8:	08002b19 	.word	0x08002b19
 8002abc:	08002af5 	.word	0x08002af5
 8002ac0:	08002b19 	.word	0x08002b19
 8002ac4:	08002b19 	.word	0x08002b19
 8002ac8:	08002b19 	.word	0x08002b19
 8002acc:	08002b07 	.word	0x08002b07
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68da      	ldr	r2, [r3, #12]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0202 	orr.w	r2, r2, #2
 8002ade:	60da      	str	r2, [r3, #12]
      break;
 8002ae0:	e01b      	b.n	8002b1a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68da      	ldr	r2, [r3, #12]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f042 0204 	orr.w	r2, r2, #4
 8002af0:	60da      	str	r2, [r3, #12]
      break;
 8002af2:	e012      	b.n	8002b1a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68da      	ldr	r2, [r3, #12]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0208 	orr.w	r2, r2, #8
 8002b02:	60da      	str	r2, [r3, #12]
      break;
 8002b04:	e009      	b.n	8002b1a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f042 0210 	orr.w	r2, r2, #16
 8002b14:	60da      	str	r2, [r3, #12]
      break;
 8002b16:	e000      	b.n	8002b1a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 8002b18:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	6839      	ldr	r1, [r7, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f001 f8a2 	bl	8003c6c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a18      	ldr	r2, [pc, #96]	; (8002b90 <HAL_TIM_IC_Start_IT+0x240>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d009      	beq.n	8002b46 <HAL_TIM_IC_Start_IT+0x1f6>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b3a:	d004      	beq.n	8002b46 <HAL_TIM_IC_Start_IT+0x1f6>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a14      	ldr	r2, [pc, #80]	; (8002b94 <HAL_TIM_IC_Start_IT+0x244>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d115      	bne.n	8002b72 <HAL_TIM_IC_Start_IT+0x222>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	4b12      	ldr	r3, [pc, #72]	; (8002b98 <HAL_TIM_IC_Start_IT+0x248>)
 8002b4e:	4013      	ands	r3, r2
 8002b50:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	2b06      	cmp	r3, #6
 8002b56:	d015      	beq.n	8002b84 <HAL_TIM_IC_Start_IT+0x234>
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b5e:	d011      	beq.n	8002b84 <HAL_TIM_IC_Start_IT+0x234>
    {
      __HAL_TIM_ENABLE(htim);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0201 	orr.w	r2, r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b70:	e008      	b.n	8002b84 <HAL_TIM_IC_Start_IT+0x234>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f042 0201 	orr.w	r2, r2, #1
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	e000      	b.n	8002b86 <HAL_TIM_IC_Start_IT+0x236>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b84:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40012c00 	.word	0x40012c00
 8002b94:	40014000 	.word	0x40014000
 8002b98:	00010007 	.word	0x00010007

08002b9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d122      	bne.n	8002bf8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d11b      	bne.n	8002bf8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f06f 0202 	mvn.w	r2, #2
 8002bc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7fd fefe 	bl	80009e0 <HAL_TIM_IC_CaptureCallback>
 8002be4:	e005      	b.n	8002bf2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 fb9a 	bl	8003320 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 fba1 	bl	8003334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d122      	bne.n	8002c4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d11b      	bne.n	8002c4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f06f 0204 	mvn.w	r2, #4
 8002c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2202      	movs	r2, #2
 8002c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7fd fed4 	bl	80009e0 <HAL_TIM_IC_CaptureCallback>
 8002c38:	e005      	b.n	8002c46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 fb70 	bl	8003320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 fb77 	bl	8003334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b08      	cmp	r3, #8
 8002c58:	d122      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f003 0308 	and.w	r3, r3, #8
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d11b      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f06f 0208 	mvn.w	r2, #8
 8002c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2204      	movs	r2, #4
 8002c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7fd feaa 	bl	80009e0 <HAL_TIM_IC_CaptureCallback>
 8002c8c:	e005      	b.n	8002c9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 fb46 	bl	8003320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 fb4d 	bl	8003334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	f003 0310 	and.w	r3, r3, #16
 8002caa:	2b10      	cmp	r3, #16
 8002cac:	d122      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f003 0310 	and.w	r3, r3, #16
 8002cb8:	2b10      	cmp	r3, #16
 8002cba:	d11b      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f06f 0210 	mvn.w	r2, #16
 8002cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2208      	movs	r2, #8
 8002cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7fd fe80 	bl	80009e0 <HAL_TIM_IC_CaptureCallback>
 8002ce0:	e005      	b.n	8002cee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 fb1c 	bl	8003320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 fb23 	bl	8003334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d10e      	bne.n	8002d20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d107      	bne.n	8002d20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f06f 0201 	mvn.w	r2, #1
 8002d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7fe f8d4 	bl	8000ec8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d2a:	2b80      	cmp	r3, #128	; 0x80
 8002d2c:	d10e      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d38:	2b80      	cmp	r3, #128	; 0x80
 8002d3a:	d107      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f001 f826 	bl	8003d98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d5a:	d10e      	bne.n	8002d7a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d66:	2b80      	cmp	r3, #128	; 0x80
 8002d68:	d107      	bne.n	8002d7a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f001 f819 	bl	8003dac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d84:	2b40      	cmp	r3, #64	; 0x40
 8002d86:	d10e      	bne.n	8002da6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d92:	2b40      	cmp	r3, #64	; 0x40
 8002d94:	d107      	bne.n	8002da6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 fad1 	bl	8003348 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	f003 0320 	and.w	r3, r3, #32
 8002db0:	2b20      	cmp	r3, #32
 8002db2:	d10e      	bne.n	8002dd2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f003 0320 	and.w	r3, r3, #32
 8002dbe:	2b20      	cmp	r3, #32
 8002dc0:	d107      	bne.n	8002dd2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f06f 0220 	mvn.w	r2, #32
 8002dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 ffd9 	bl	8003d84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dd2:	bf00      	nop
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b084      	sub	sp, #16
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_TIM_IC_ConfigChannel+0x1a>
 8002df0:	2302      	movs	r3, #2
 8002df2:	e082      	b.n	8002efa <HAL_TIM_IC_ConfigChannel+0x120>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d11b      	bne.n	8002e3a <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6818      	ldr	r0, [r3, #0]
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	6819      	ldr	r1, [r3, #0]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	f000 fd85 	bl	8003920 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	699a      	ldr	r2, [r3, #24]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 020c 	bic.w	r2, r2, #12
 8002e24:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6999      	ldr	r1, [r3, #24]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	619a      	str	r2, [r3, #24]
 8002e38:	e05a      	b.n	8002ef0 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b04      	cmp	r3, #4
 8002e3e:	d11c      	bne.n	8002e7a <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6818      	ldr	r0, [r3, #0]
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	6819      	ldr	r1, [r3, #0]
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	f000 fdeb 	bl	8003a2a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	699a      	ldr	r2, [r3, #24]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002e62:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6999      	ldr	r1, [r3, #24]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	021a      	lsls	r2, r3, #8
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	619a      	str	r2, [r3, #24]
 8002e78:	e03a      	b.n	8002ef0 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d11b      	bne.n	8002eb8 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6818      	ldr	r0, [r3, #0]
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	6819      	ldr	r1, [r3, #0]
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f000 fe38 	bl	8003b04 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	69da      	ldr	r2, [r3, #28]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 020c 	bic.w	r2, r2, #12
 8002ea2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	69d9      	ldr	r1, [r3, #28]
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	689a      	ldr	r2, [r3, #8]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	61da      	str	r2, [r3, #28]
 8002eb6:	e01b      	b.n	8002ef0 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6818      	ldr	r0, [r3, #0]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	6819      	ldr	r1, [r3, #0]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f000 fe58 	bl	8003b7c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	69da      	ldr	r2, [r3, #28]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002eda:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	69d9      	ldr	r1, [r3, #28]
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	021a      	lsls	r2, r3, #8
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d101      	bne.n	8002f1e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e0fd      	b.n	800311a <HAL_TIM_PWM_ConfigChannel+0x216>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b14      	cmp	r3, #20
 8002f2a:	f200 80f0 	bhi.w	800310e <HAL_TIM_PWM_ConfigChannel+0x20a>
 8002f2e:	a201      	add	r2, pc, #4	; (adr r2, 8002f34 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f34:	08002f89 	.word	0x08002f89
 8002f38:	0800310f 	.word	0x0800310f
 8002f3c:	0800310f 	.word	0x0800310f
 8002f40:	0800310f 	.word	0x0800310f
 8002f44:	08002fc9 	.word	0x08002fc9
 8002f48:	0800310f 	.word	0x0800310f
 8002f4c:	0800310f 	.word	0x0800310f
 8002f50:	0800310f 	.word	0x0800310f
 8002f54:	0800300b 	.word	0x0800300b
 8002f58:	0800310f 	.word	0x0800310f
 8002f5c:	0800310f 	.word	0x0800310f
 8002f60:	0800310f 	.word	0x0800310f
 8002f64:	0800304b 	.word	0x0800304b
 8002f68:	0800310f 	.word	0x0800310f
 8002f6c:	0800310f 	.word	0x0800310f
 8002f70:	0800310f 	.word	0x0800310f
 8002f74:	0800308d 	.word	0x0800308d
 8002f78:	0800310f 	.word	0x0800310f
 8002f7c:	0800310f 	.word	0x0800310f
 8002f80:	0800310f 	.word	0x0800310f
 8002f84:	080030cd 	.word	0x080030cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68b9      	ldr	r1, [r7, #8]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 fa48 	bl	8003424 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699a      	ldr	r2, [r3, #24]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 0208 	orr.w	r2, r2, #8
 8002fa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699a      	ldr	r2, [r3, #24]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0204 	bic.w	r2, r2, #4
 8002fb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6999      	ldr	r1, [r3, #24]
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	691a      	ldr	r2, [r3, #16]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	619a      	str	r2, [r3, #24]
      break;
 8002fc6:	e0a3      	b.n	8003110 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68b9      	ldr	r1, [r7, #8]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 faa4 	bl	800351c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699a      	ldr	r2, [r3, #24]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699a      	ldr	r2, [r3, #24]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6999      	ldr	r1, [r3, #24]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	021a      	lsls	r2, r3, #8
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	619a      	str	r2, [r3, #24]
      break;
 8003008:	e082      	b.n	8003110 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68b9      	ldr	r1, [r7, #8]
 8003010:	4618      	mov	r0, r3
 8003012:	f000 fafd 	bl	8003610 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	69da      	ldr	r2, [r3, #28]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f042 0208 	orr.w	r2, r2, #8
 8003024:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	69da      	ldr	r2, [r3, #28]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0204 	bic.w	r2, r2, #4
 8003034:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69d9      	ldr	r1, [r3, #28]
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	691a      	ldr	r2, [r3, #16]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	61da      	str	r2, [r3, #28]
      break;
 8003048:	e062      	b.n	8003110 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68b9      	ldr	r1, [r7, #8]
 8003050:	4618      	mov	r0, r3
 8003052:	f000 fb55 	bl	8003700 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	69da      	ldr	r2, [r3, #28]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	69da      	ldr	r2, [r3, #28]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	69d9      	ldr	r1, [r3, #28]
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	021a      	lsls	r2, r3, #8
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	61da      	str	r2, [r3, #28]
      break;
 800308a:	e041      	b.n	8003110 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68b9      	ldr	r1, [r7, #8]
 8003092:	4618      	mov	r0, r3
 8003094:	f000 fb92 	bl	80037bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0208 	orr.w	r2, r2, #8
 80030a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0204 	bic.w	r2, r2, #4
 80030b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	691a      	ldr	r2, [r3, #16]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80030ca:	e021      	b.n	8003110 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68b9      	ldr	r1, [r7, #8]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 fbca 	bl	800386c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	021a      	lsls	r2, r3, #8
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800310c:	e000      	b.n	8003110 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800310e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop

08003124 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_TIM_ConfigClockSource+0x18>
 8003138:	2302      	movs	r3, #2
 800313a:	e0a8      	b.n	800328e <HAL_TIM_ConfigClockSource+0x16a>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800315a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800315e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003166:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b40      	cmp	r3, #64	; 0x40
 8003176:	d067      	beq.n	8003248 <HAL_TIM_ConfigClockSource+0x124>
 8003178:	2b40      	cmp	r3, #64	; 0x40
 800317a:	d80b      	bhi.n	8003194 <HAL_TIM_ConfigClockSource+0x70>
 800317c:	2b10      	cmp	r3, #16
 800317e:	d073      	beq.n	8003268 <HAL_TIM_ConfigClockSource+0x144>
 8003180:	2b10      	cmp	r3, #16
 8003182:	d802      	bhi.n	800318a <HAL_TIM_ConfigClockSource+0x66>
 8003184:	2b00      	cmp	r3, #0
 8003186:	d06f      	beq.n	8003268 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003188:	e078      	b.n	800327c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800318a:	2b20      	cmp	r3, #32
 800318c:	d06c      	beq.n	8003268 <HAL_TIM_ConfigClockSource+0x144>
 800318e:	2b30      	cmp	r3, #48	; 0x30
 8003190:	d06a      	beq.n	8003268 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003192:	e073      	b.n	800327c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003194:	2b70      	cmp	r3, #112	; 0x70
 8003196:	d00d      	beq.n	80031b4 <HAL_TIM_ConfigClockSource+0x90>
 8003198:	2b70      	cmp	r3, #112	; 0x70
 800319a:	d804      	bhi.n	80031a6 <HAL_TIM_ConfigClockSource+0x82>
 800319c:	2b50      	cmp	r3, #80	; 0x50
 800319e:	d033      	beq.n	8003208 <HAL_TIM_ConfigClockSource+0xe4>
 80031a0:	2b60      	cmp	r3, #96	; 0x60
 80031a2:	d041      	beq.n	8003228 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80031a4:	e06a      	b.n	800327c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80031a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031aa:	d066      	beq.n	800327a <HAL_TIM_ConfigClockSource+0x156>
 80031ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031b0:	d017      	beq.n	80031e2 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80031b2:	e063      	b.n	800327c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6818      	ldr	r0, [r3, #0]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	6899      	ldr	r1, [r3, #8]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f000 fd32 	bl	8003c2c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031d6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	609a      	str	r2, [r3, #8]
      break;
 80031e0:	e04c      	b.n	800327c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6818      	ldr	r0, [r3, #0]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	6899      	ldr	r1, [r3, #8]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	f000 fd1b 	bl	8003c2c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003204:	609a      	str	r2, [r3, #8]
      break;
 8003206:	e039      	b.n	800327c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6818      	ldr	r0, [r3, #0]
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	6859      	ldr	r1, [r3, #4]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	461a      	mov	r2, r3
 8003216:	f000 fbd9 	bl	80039cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2150      	movs	r1, #80	; 0x50
 8003220:	4618      	mov	r0, r3
 8003222:	f000 fce8 	bl	8003bf6 <TIM_ITRx_SetConfig>
      break;
 8003226:	e029      	b.n	800327c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6818      	ldr	r0, [r3, #0]
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	6859      	ldr	r1, [r3, #4]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	461a      	mov	r2, r3
 8003236:	f000 fc35 	bl	8003aa4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2160      	movs	r1, #96	; 0x60
 8003240:	4618      	mov	r0, r3
 8003242:	f000 fcd8 	bl	8003bf6 <TIM_ITRx_SetConfig>
      break;
 8003246:	e019      	b.n	800327c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6818      	ldr	r0, [r3, #0]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	6859      	ldr	r1, [r3, #4]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	461a      	mov	r2, r3
 8003256:	f000 fbb9 	bl	80039cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2140      	movs	r1, #64	; 0x40
 8003260:	4618      	mov	r0, r3
 8003262:	f000 fcc8 	bl	8003bf6 <TIM_ITRx_SetConfig>
      break;
 8003266:	e009      	b.n	800327c <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4619      	mov	r1, r3
 8003272:	4610      	mov	r0, r2
 8003274:	f000 fcbf 	bl	8003bf6 <TIM_ITRx_SetConfig>
        break;
 8003278:	e000      	b.n	800327c <HAL_TIM_ConfigClockSource+0x158>
      break;
 800327a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
	...

08003298 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b0c      	cmp	r3, #12
 80032aa:	d831      	bhi.n	8003310 <HAL_TIM_ReadCapturedValue+0x78>
 80032ac:	a201      	add	r2, pc, #4	; (adr r2, 80032b4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80032ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b2:	bf00      	nop
 80032b4:	080032e9 	.word	0x080032e9
 80032b8:	08003311 	.word	0x08003311
 80032bc:	08003311 	.word	0x08003311
 80032c0:	08003311 	.word	0x08003311
 80032c4:	080032f3 	.word	0x080032f3
 80032c8:	08003311 	.word	0x08003311
 80032cc:	08003311 	.word	0x08003311
 80032d0:	08003311 	.word	0x08003311
 80032d4:	080032fd 	.word	0x080032fd
 80032d8:	08003311 	.word	0x08003311
 80032dc:	08003311 	.word	0x08003311
 80032e0:	08003311 	.word	0x08003311
 80032e4:	08003307 	.word	0x08003307
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ee:	60fb      	str	r3, [r7, #12]

      break;
 80032f0:	e00f      	b.n	8003312 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f8:	60fb      	str	r3, [r7, #12]

      break;
 80032fa:	e00a      	b.n	8003312 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003302:	60fb      	str	r3, [r7, #12]

      break;
 8003304:	e005      	b.n	8003312 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330c:	60fb      	str	r3, [r7, #12]

      break;
 800330e:	e000      	b.n	8003312 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003310:	bf00      	nop
  }

  return tmpreg;
 8003312:	68fb      	ldr	r3, [r7, #12]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a2a      	ldr	r2, [pc, #168]	; (8003418 <TIM_Base_SetConfig+0xbc>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d003      	beq.n	800337c <TIM_Base_SetConfig+0x20>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800337a:	d108      	bne.n	800338e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003382:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	4313      	orrs	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a21      	ldr	r2, [pc, #132]	; (8003418 <TIM_Base_SetConfig+0xbc>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d00b      	beq.n	80033ae <TIM_Base_SetConfig+0x52>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800339c:	d007      	beq.n	80033ae <TIM_Base_SetConfig+0x52>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a1e      	ldr	r2, [pc, #120]	; (800341c <TIM_Base_SetConfig+0xc0>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d003      	beq.n	80033ae <TIM_Base_SetConfig+0x52>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a1d      	ldr	r2, [pc, #116]	; (8003420 <TIM_Base_SetConfig+0xc4>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d108      	bne.n	80033c0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	4313      	orrs	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a0c      	ldr	r2, [pc, #48]	; (8003418 <TIM_Base_SetConfig+0xbc>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d007      	beq.n	80033fc <TIM_Base_SetConfig+0xa0>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a0b      	ldr	r2, [pc, #44]	; (800341c <TIM_Base_SetConfig+0xc0>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d003      	beq.n	80033fc <TIM_Base_SetConfig+0xa0>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a0a      	ldr	r2, [pc, #40]	; (8003420 <TIM_Base_SetConfig+0xc4>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d103      	bne.n	8003404 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	691a      	ldr	r2, [r3, #16]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	615a      	str	r2, [r3, #20]
}
 800340a:	bf00      	nop
 800340c:	3714      	adds	r7, #20
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	40012c00 	.word	0x40012c00
 800341c:	40014000 	.word	0x40014000
 8003420:	40014400 	.word	0x40014400

08003424 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003424:	b480      	push	{r7}
 8003426:	b087      	sub	sp, #28
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	f023 0201 	bic.w	r2, r3, #1
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f023 0303 	bic.w	r3, r3, #3
 800345e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	4313      	orrs	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f023 0302 	bic.w	r3, r3, #2
 8003470:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	4313      	orrs	r3, r2
 800347a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a24      	ldr	r2, [pc, #144]	; (8003510 <TIM_OC1_SetConfig+0xec>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d007      	beq.n	8003494 <TIM_OC1_SetConfig+0x70>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a23      	ldr	r2, [pc, #140]	; (8003514 <TIM_OC1_SetConfig+0xf0>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d003      	beq.n	8003494 <TIM_OC1_SetConfig+0x70>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a22      	ldr	r2, [pc, #136]	; (8003518 <TIM_OC1_SetConfig+0xf4>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d10c      	bne.n	80034ae <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f023 0308 	bic.w	r3, r3, #8
 800349a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f023 0304 	bic.w	r3, r3, #4
 80034ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a17      	ldr	r2, [pc, #92]	; (8003510 <TIM_OC1_SetConfig+0xec>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d007      	beq.n	80034c6 <TIM_OC1_SetConfig+0xa2>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a16      	ldr	r2, [pc, #88]	; (8003514 <TIM_OC1_SetConfig+0xf0>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d003      	beq.n	80034c6 <TIM_OC1_SetConfig+0xa2>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a15      	ldr	r2, [pc, #84]	; (8003518 <TIM_OC1_SetConfig+0xf4>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d111      	bne.n	80034ea <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	697a      	ldr	r2, [r7, #20]
 8003502:	621a      	str	r2, [r3, #32]
}
 8003504:	bf00      	nop
 8003506:	371c      	adds	r7, #28
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	40012c00 	.word	0x40012c00
 8003514:	40014000 	.word	0x40014000
 8003518:	40014400 	.word	0x40014400

0800351c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800351c:	b480      	push	{r7}
 800351e:	b087      	sub	sp, #28
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	f023 0210 	bic.w	r2, r3, #16
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800354a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800354e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003556:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	021b      	lsls	r3, r3, #8
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	4313      	orrs	r3, r2
 8003562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f023 0320 	bic.w	r3, r3, #32
 800356a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	4313      	orrs	r3, r2
 8003576:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a22      	ldr	r2, [pc, #136]	; (8003604 <TIM_OC2_SetConfig+0xe8>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d10d      	bne.n	800359c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003586:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	011b      	lsls	r3, r3, #4
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4313      	orrs	r3, r2
 8003592:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800359a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a19      	ldr	r2, [pc, #100]	; (8003604 <TIM_OC2_SetConfig+0xe8>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d007      	beq.n	80035b4 <TIM_OC2_SetConfig+0x98>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a18      	ldr	r2, [pc, #96]	; (8003608 <TIM_OC2_SetConfig+0xec>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d003      	beq.n	80035b4 <TIM_OC2_SetConfig+0x98>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a17      	ldr	r2, [pc, #92]	; (800360c <TIM_OC2_SetConfig+0xf0>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d113      	bne.n	80035dc <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	4313      	orrs	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	621a      	str	r2, [r3, #32]
}
 80035f6:	bf00      	nop
 80035f8:	371c      	adds	r7, #28
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	40012c00 	.word	0x40012c00
 8003608:	40014000 	.word	0x40014000
 800360c:	40014400 	.word	0x40014400

08003610 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003610:	b480      	push	{r7}
 8003612:	b087      	sub	sp, #28
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800363e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 0303 	bic.w	r3, r3, #3
 800364a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	4313      	orrs	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800365c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	021b      	lsls	r3, r3, #8
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	4313      	orrs	r3, r2
 8003668:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a21      	ldr	r2, [pc, #132]	; (80036f4 <TIM_OC3_SetConfig+0xe4>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d10d      	bne.n	800368e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003678:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	021b      	lsls	r3, r3, #8
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	4313      	orrs	r3, r2
 8003684:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800368c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a18      	ldr	r2, [pc, #96]	; (80036f4 <TIM_OC3_SetConfig+0xe4>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d007      	beq.n	80036a6 <TIM_OC3_SetConfig+0x96>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a17      	ldr	r2, [pc, #92]	; (80036f8 <TIM_OC3_SetConfig+0xe8>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d003      	beq.n	80036a6 <TIM_OC3_SetConfig+0x96>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a16      	ldr	r2, [pc, #88]	; (80036fc <TIM_OC3_SetConfig+0xec>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d113      	bne.n	80036ce <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	011b      	lsls	r3, r3, #4
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	4313      	orrs	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	621a      	str	r2, [r3, #32]
}
 80036e8:	bf00      	nop
 80036ea:	371c      	adds	r7, #28
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	40012c00 	.word	0x40012c00
 80036f8:	40014000 	.word	0x40014000
 80036fc:	40014400 	.word	0x40014400

08003700 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003700:	b480      	push	{r7}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800372e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800373a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	021b      	lsls	r3, r3, #8
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	4313      	orrs	r3, r2
 8003746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800374e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	031b      	lsls	r3, r3, #12
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a14      	ldr	r2, [pc, #80]	; (80037b0 <TIM_OC4_SetConfig+0xb0>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d007      	beq.n	8003774 <TIM_OC4_SetConfig+0x74>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a13      	ldr	r2, [pc, #76]	; (80037b4 <TIM_OC4_SetConfig+0xb4>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d003      	beq.n	8003774 <TIM_OC4_SetConfig+0x74>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a12      	ldr	r2, [pc, #72]	; (80037b8 <TIM_OC4_SetConfig+0xb8>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d109      	bne.n	8003788 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800377a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	019b      	lsls	r3, r3, #6
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	4313      	orrs	r3, r2
 8003786:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	621a      	str	r2, [r3, #32]
}
 80037a2:	bf00      	nop
 80037a4:	371c      	adds	r7, #28
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	40012c00 	.word	0x40012c00
 80037b4:	40014000 	.word	0x40014000
 80037b8:	40014400 	.word	0x40014400

080037bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80037bc:	b480      	push	{r7}
 80037be:	b087      	sub	sp, #28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003800:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	041b      	lsls	r3, r3, #16
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	4313      	orrs	r3, r2
 800380c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a13      	ldr	r2, [pc, #76]	; (8003860 <TIM_OC5_SetConfig+0xa4>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d007      	beq.n	8003826 <TIM_OC5_SetConfig+0x6a>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a12      	ldr	r2, [pc, #72]	; (8003864 <TIM_OC5_SetConfig+0xa8>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d003      	beq.n	8003826 <TIM_OC5_SetConfig+0x6a>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a11      	ldr	r2, [pc, #68]	; (8003868 <TIM_OC5_SetConfig+0xac>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d109      	bne.n	800383a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800382c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	021b      	lsls	r3, r3, #8
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	4313      	orrs	r3, r2
 8003838:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	621a      	str	r2, [r3, #32]
}
 8003854:	bf00      	nop
 8003856:	371c      	adds	r7, #28
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr
 8003860:	40012c00 	.word	0x40012c00
 8003864:	40014000 	.word	0x40014000
 8003868:	40014400 	.word	0x40014400

0800386c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800389a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800389e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	021b      	lsls	r3, r3, #8
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	051b      	lsls	r3, r3, #20
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	4313      	orrs	r3, r2
 80038be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a14      	ldr	r2, [pc, #80]	; (8003914 <TIM_OC6_SetConfig+0xa8>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d007      	beq.n	80038d8 <TIM_OC6_SetConfig+0x6c>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a13      	ldr	r2, [pc, #76]	; (8003918 <TIM_OC6_SetConfig+0xac>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d003      	beq.n	80038d8 <TIM_OC6_SetConfig+0x6c>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a12      	ldr	r2, [pc, #72]	; (800391c <TIM_OC6_SetConfig+0xb0>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d109      	bne.n	80038ec <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	029b      	lsls	r3, r3, #10
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	621a      	str	r2, [r3, #32]
}
 8003906:	bf00      	nop
 8003908:	371c      	adds	r7, #28
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	40012c00 	.word	0x40012c00
 8003918:	40014000 	.word	0x40014000
 800391c:	40014400 	.word	0x40014400

08003920 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
 800392c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	f023 0201 	bic.w	r2, r3, #1
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	4a1e      	ldr	r2, [pc, #120]	; (80039c4 <TIM_TI1_SetConfig+0xa4>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d007      	beq.n	800395e <TIM_TI1_SetConfig+0x3e>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003954:	d003      	beq.n	800395e <TIM_TI1_SetConfig+0x3e>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	4a1b      	ldr	r2, [pc, #108]	; (80039c8 <TIM_TI1_SetConfig+0xa8>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d101      	bne.n	8003962 <TIM_TI1_SetConfig+0x42>
 800395e:	2301      	movs	r3, #1
 8003960:	e000      	b.n	8003964 <TIM_TI1_SetConfig+0x44>
 8003962:	2300      	movs	r3, #0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d008      	beq.n	800397a <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f023 0303 	bic.w	r3, r3, #3
 800396e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4313      	orrs	r3, r2
 8003976:	617b      	str	r3, [r7, #20]
 8003978:	e003      	b.n	8003982 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f043 0301 	orr.w	r3, r3, #1
 8003980:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003988:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	011b      	lsls	r3, r3, #4
 800398e:	b2db      	uxtb	r3, r3
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	4313      	orrs	r3, r2
 8003994:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	f023 030a 	bic.w	r3, r3, #10
 800399c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	f003 030a 	and.w	r3, r3, #10
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	621a      	str	r2, [r3, #32]
}
 80039b6:	bf00      	nop
 80039b8:	371c      	adds	r7, #28
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	40012c00 	.word	0x40012c00
 80039c8:	40014000 	.word	0x40014000

080039cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	f023 0201 	bic.w	r2, r3, #1
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f023 030a 	bic.w	r3, r3, #10
 8003a08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	621a      	str	r2, [r3, #32]
}
 8003a1e:	bf00      	nop
 8003a20:	371c      	adds	r7, #28
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b087      	sub	sp, #28
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	60b9      	str	r1, [r7, #8]
 8003a34:	607a      	str	r2, [r7, #4]
 8003a36:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	f023 0210 	bic.w	r2, r3, #16
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a56:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	021b      	lsls	r3, r3, #8
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	031b      	lsls	r3, r3, #12
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a7c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	011b      	lsls	r3, r3, #4
 8003a82:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	621a      	str	r2, [r3, #32]
}
 8003a98:	bf00      	nop
 8003a9a:	371c      	adds	r7, #28
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	f023 0210 	bic.w	r2, r3, #16
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ace:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	031b      	lsls	r3, r3, #12
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ae0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	621a      	str	r2, [r3, #32]
}
 8003af8:	bf00      	nop
 8003afa:	371c      	adds	r7, #28
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b087      	sub	sp, #28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
 8003b10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f023 0303 	bic.w	r3, r3, #3
 8003b30:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b40:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	011b      	lsls	r3, r3, #4
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003b54:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	021b      	lsls	r3, r3, #8
 8003b5a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	621a      	str	r2, [r3, #32]
}
 8003b70:	bf00      	nop
 8003b72:	371c      	adds	r7, #28
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
 8003b88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ba8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	021b      	lsls	r3, r3, #8
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bba:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	031b      	lsls	r3, r3, #12
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003bce:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	031b      	lsls	r3, r3, #12
 8003bd4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	621a      	str	r2, [r3, #32]
}
 8003bea:	bf00      	nop
 8003bec:	371c      	adds	r7, #28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b085      	sub	sp, #20
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
 8003bfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	f043 0307 	orr.w	r3, r3, #7
 8003c18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	609a      	str	r2, [r3, #8]
}
 8003c20:	bf00      	nop
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
 8003c38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	021a      	lsls	r2, r3, #8
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	609a      	str	r2, [r3, #8]
}
 8003c60:	bf00      	nop
 8003c62:	371c      	adds	r7, #28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b087      	sub	sp, #28
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f003 031f 	and.w	r3, r3, #31
 8003c7e:	2201      	movs	r2, #1
 8003c80:	fa02 f303 	lsl.w	r3, r2, r3
 8003c84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6a1a      	ldr	r2, [r3, #32]
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	401a      	ands	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a1a      	ldr	r2, [r3, #32]
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	f003 031f 	and.w	r3, r3, #31
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	621a      	str	r2, [r3, #32]
}
 8003caa:	bf00      	nop
 8003cac:	371c      	adds	r7, #28
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
	...

08003cb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d101      	bne.n	8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e04f      	b.n	8003d70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a21      	ldr	r2, [pc, #132]	; (8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d108      	bne.n	8003d0c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003d00:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a14      	ldr	r2, [pc, #80]	; (8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d009      	beq.n	8003d44 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d38:	d004      	beq.n	8003d44 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a10      	ldr	r2, [pc, #64]	; (8003d80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d10c      	bne.n	8003d5e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68ba      	ldr	r2, [r7, #8]
 8003d5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	40012c00 	.word	0x40012c00
 8003d80:	40014000 	.word	0x40014000

08003d84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003dc4:	bf00      	nop
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
	...

08003dd0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003dd6:	f3ef 8305 	mrs	r3, IPSR
 8003dda:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ddc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10f      	bne.n	8003e02 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003de2:	f3ef 8310 	mrs	r3, PRIMASK
 8003de6:	607b      	str	r3, [r7, #4]
  return(result);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d105      	bne.n	8003dfa <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003dee:	f3ef 8311 	mrs	r3, BASEPRI
 8003df2:	603b      	str	r3, [r7, #0]
  return(result);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d007      	beq.n	8003e0a <osKernelInitialize+0x3a>
 8003dfa:	4b0e      	ldr	r3, [pc, #56]	; (8003e34 <osKernelInitialize+0x64>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d103      	bne.n	8003e0a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003e02:	f06f 0305 	mvn.w	r3, #5
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	e00c      	b.n	8003e24 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003e0a:	4b0a      	ldr	r3, [pc, #40]	; (8003e34 <osKernelInitialize+0x64>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d105      	bne.n	8003e1e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003e12:	4b08      	ldr	r3, [pc, #32]	; (8003e34 <osKernelInitialize+0x64>)
 8003e14:	2201      	movs	r2, #1
 8003e16:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	60fb      	str	r3, [r7, #12]
 8003e1c:	e002      	b.n	8003e24 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e22:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003e24:	68fb      	ldr	r3, [r7, #12]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	2000003c 	.word	0x2000003c

08003e38 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e3e:	f3ef 8305 	mrs	r3, IPSR
 8003e42:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e44:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10f      	bne.n	8003e6a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e4a:	f3ef 8310 	mrs	r3, PRIMASK
 8003e4e:	607b      	str	r3, [r7, #4]
  return(result);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d105      	bne.n	8003e62 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e56:	f3ef 8311 	mrs	r3, BASEPRI
 8003e5a:	603b      	str	r3, [r7, #0]
  return(result);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d007      	beq.n	8003e72 <osKernelStart+0x3a>
 8003e62:	4b0f      	ldr	r3, [pc, #60]	; (8003ea0 <osKernelStart+0x68>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d103      	bne.n	8003e72 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003e6a:	f06f 0305 	mvn.w	r3, #5
 8003e6e:	60fb      	str	r3, [r7, #12]
 8003e70:	e010      	b.n	8003e94 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003e72:	4b0b      	ldr	r3, [pc, #44]	; (8003ea0 <osKernelStart+0x68>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d109      	bne.n	8003e8e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003e7a:	f7ff ffa1 	bl	8003dc0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003e7e:	4b08      	ldr	r3, [pc, #32]	; (8003ea0 <osKernelStart+0x68>)
 8003e80:	2202      	movs	r2, #2
 8003e82:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003e84:	f001 fa00 	bl	8005288 <vTaskStartScheduler>
      stat = osOK;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	60fb      	str	r3, [r7, #12]
 8003e8c:	e002      	b.n	8003e94 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e92:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003e94:	68fb      	ldr	r3, [r7, #12]
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	2000003c 	.word	0x2000003c

08003ea4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b090      	sub	sp, #64	; 0x40
 8003ea8:	af04      	add	r7, sp, #16
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003eb4:	f3ef 8305 	mrs	r3, IPSR
 8003eb8:	61fb      	str	r3, [r7, #28]
  return(result);
 8003eba:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f040 808f 	bne.w	8003fe0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ec2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ec6:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d105      	bne.n	8003eda <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ece:	f3ef 8311 	mrs	r3, BASEPRI
 8003ed2:	617b      	str	r3, [r7, #20]
  return(result);
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <osThreadNew+0x3e>
 8003eda:	4b44      	ldr	r3, [pc, #272]	; (8003fec <osThreadNew+0x148>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d07e      	beq.n	8003fe0 <osThreadNew+0x13c>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d07b      	beq.n	8003fe0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003ee8:	2380      	movs	r3, #128	; 0x80
 8003eea:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003eec:	2318      	movs	r3, #24
 8003eee:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d045      	beq.n	8003f8c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d002      	beq.n	8003f0e <osThreadNew+0x6a>
        name = attr->name;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d002      	beq.n	8003f1c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d008      	beq.n	8003f34 <osThreadNew+0x90>
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	2b38      	cmp	r3, #56	; 0x38
 8003f26:	d805      	bhi.n	8003f34 <osThreadNew+0x90>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d001      	beq.n	8003f38 <osThreadNew+0x94>
        return (NULL);
 8003f34:	2300      	movs	r3, #0
 8003f36:	e054      	b.n	8003fe2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d003      	beq.n	8003f48 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	089b      	lsrs	r3, r3, #2
 8003f46:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00e      	beq.n	8003f6e <osThreadNew+0xca>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	2b5b      	cmp	r3, #91	; 0x5b
 8003f56:	d90a      	bls.n	8003f6e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d006      	beq.n	8003f6e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d002      	beq.n	8003f6e <osThreadNew+0xca>
        mem = 1;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	623b      	str	r3, [r7, #32]
 8003f6c:	e010      	b.n	8003f90 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10c      	bne.n	8003f90 <osThreadNew+0xec>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d108      	bne.n	8003f90 <osThreadNew+0xec>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d104      	bne.n	8003f90 <osThreadNew+0xec>
          mem = 0;
 8003f86:	2300      	movs	r3, #0
 8003f88:	623b      	str	r3, [r7, #32]
 8003f8a:	e001      	b.n	8003f90 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003f90:	6a3b      	ldr	r3, [r7, #32]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d110      	bne.n	8003fb8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003f9e:	9202      	str	r2, [sp, #8]
 8003fa0:	9301      	str	r3, [sp, #4]
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003faa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 ff99 	bl	8004ee4 <xTaskCreateStatic>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	613b      	str	r3, [r7, #16]
 8003fb6:	e013      	b.n	8003fe0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d110      	bne.n	8003fe0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	f107 0310 	add.w	r3, r7, #16
 8003fc6:	9301      	str	r3, [sp, #4]
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 ffe1 	bl	8004f98 <xTaskCreate>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d001      	beq.n	8003fe0 <osThreadNew+0x13c>
          hTask = NULL;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003fe0:	693b      	ldr	r3, [r7, #16]
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3730      	adds	r7, #48	; 0x30
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	2000003c 	.word	0x2000003c

08003ff0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ff8:	f3ef 8305 	mrs	r3, IPSR
 8003ffc:	613b      	str	r3, [r7, #16]
  return(result);
 8003ffe:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004000:	2b00      	cmp	r3, #0
 8004002:	d10f      	bne.n	8004024 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004004:	f3ef 8310 	mrs	r3, PRIMASK
 8004008:	60fb      	str	r3, [r7, #12]
  return(result);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d105      	bne.n	800401c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004010:	f3ef 8311 	mrs	r3, BASEPRI
 8004014:	60bb      	str	r3, [r7, #8]
  return(result);
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d007      	beq.n	800402c <osDelay+0x3c>
 800401c:	4b0a      	ldr	r3, [pc, #40]	; (8004048 <osDelay+0x58>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2b02      	cmp	r3, #2
 8004022:	d103      	bne.n	800402c <osDelay+0x3c>
    stat = osErrorISR;
 8004024:	f06f 0305 	mvn.w	r3, #5
 8004028:	617b      	str	r3, [r7, #20]
 800402a:	e007      	b.n	800403c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800402c:	2300      	movs	r3, #0
 800402e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d002      	beq.n	800403c <osDelay+0x4c>
      vTaskDelay(ticks);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f001 f8f2 	bl	8005220 <vTaskDelay>
    }
  }

  return (stat);
 800403c:	697b      	ldr	r3, [r7, #20]
}
 800403e:	4618      	mov	r0, r3
 8004040:	3718      	adds	r7, #24
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	2000003c 	.word	0x2000003c

0800404c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800404c:	b580      	push	{r7, lr}
 800404e:	b08c      	sub	sp, #48	; 0x30
 8004050:	af02      	add	r7, sp, #8
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004058:	2300      	movs	r3, #0
 800405a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800405c:	f3ef 8305 	mrs	r3, IPSR
 8004060:	61bb      	str	r3, [r7, #24]
  return(result);
 8004062:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004064:	2b00      	cmp	r3, #0
 8004066:	f040 8087 	bne.w	8004178 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800406a:	f3ef 8310 	mrs	r3, PRIMASK
 800406e:	617b      	str	r3, [r7, #20]
  return(result);
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d105      	bne.n	8004082 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004076:	f3ef 8311 	mrs	r3, BASEPRI
 800407a:	613b      	str	r3, [r7, #16]
  return(result);
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <osSemaphoreNew+0x3e>
 8004082:	4b40      	ldr	r3, [pc, #256]	; (8004184 <osSemaphoreNew+0x138>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b02      	cmp	r3, #2
 8004088:	d076      	beq.n	8004178 <osSemaphoreNew+0x12c>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d073      	beq.n	8004178 <osSemaphoreNew+0x12c>
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	429a      	cmp	r2, r3
 8004096:	d86f      	bhi.n	8004178 <osSemaphoreNew+0x12c>
    mem = -1;
 8004098:	f04f 33ff 	mov.w	r3, #4294967295
 800409c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d015      	beq.n	80040d0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d006      	beq.n	80040ba <osSemaphoreNew+0x6e>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	2b4f      	cmp	r3, #79	; 0x4f
 80040b2:	d902      	bls.n	80040ba <osSemaphoreNew+0x6e>
        mem = 1;
 80040b4:	2301      	movs	r3, #1
 80040b6:	623b      	str	r3, [r7, #32]
 80040b8:	e00c      	b.n	80040d4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d108      	bne.n	80040d4 <osSemaphoreNew+0x88>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d104      	bne.n	80040d4 <osSemaphoreNew+0x88>
          mem = 0;
 80040ca:	2300      	movs	r3, #0
 80040cc:	623b      	str	r3, [r7, #32]
 80040ce:	e001      	b.n	80040d4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80040d0:	2300      	movs	r3, #0
 80040d2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040da:	d04d      	beq.n	8004178 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d129      	bne.n	8004136 <osSemaphoreNew+0xea>
        if (mem == 1) {
 80040e2:	6a3b      	ldr	r3, [r7, #32]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d10b      	bne.n	8004100 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	2303      	movs	r3, #3
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	4613      	mov	r3, r2
 80040f2:	2200      	movs	r2, #0
 80040f4:	2100      	movs	r1, #0
 80040f6:	2001      	movs	r0, #1
 80040f8:	f000 f996 	bl	8004428 <xQueueGenericCreateStatic>
 80040fc:	6278      	str	r0, [r7, #36]	; 0x24
 80040fe:	e005      	b.n	800410c <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8004100:	2203      	movs	r2, #3
 8004102:	2100      	movs	r1, #0
 8004104:	2001      	movs	r0, #1
 8004106:	f000 fa02 	bl	800450e <xQueueGenericCreate>
 800410a:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	2b00      	cmp	r3, #0
 8004110:	d022      	beq.n	8004158 <osSemaphoreNew+0x10c>
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d01f      	beq.n	8004158 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004118:	2300      	movs	r3, #0
 800411a:	2200      	movs	r2, #0
 800411c:	2100      	movs	r1, #0
 800411e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004120:	f000 fabe 	bl	80046a0 <xQueueGenericSend>
 8004124:	4603      	mov	r3, r0
 8004126:	2b01      	cmp	r3, #1
 8004128:	d016      	beq.n	8004158 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800412a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800412c:	f000 fd22 	bl	8004b74 <vQueueDelete>
            hSemaphore = NULL;
 8004130:	2300      	movs	r3, #0
 8004132:	627b      	str	r3, [r7, #36]	; 0x24
 8004134:	e010      	b.n	8004158 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8004136:	6a3b      	ldr	r3, [r7, #32]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d108      	bne.n	800414e <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	461a      	mov	r2, r3
 8004142:	68b9      	ldr	r1, [r7, #8]
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 fa44 	bl	80045d2 <xQueueCreateCountingSemaphoreStatic>
 800414a:	6278      	str	r0, [r7, #36]	; 0x24
 800414c:	e004      	b.n	8004158 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800414e:	68b9      	ldr	r1, [r7, #8]
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 fa73 	bl	800463c <xQueueCreateCountingSemaphore>
 8004156:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00c      	beq.n	8004178 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d003      	beq.n	800416c <osSemaphoreNew+0x120>
          name = attr->name;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	61fb      	str	r3, [r7, #28]
 800416a:	e001      	b.n	8004170 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 800416c:	2300      	movs	r3, #0
 800416e:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004170:	69f9      	ldr	r1, [r7, #28]
 8004172:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004174:	f000 fe30 	bl	8004dd8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800417a:	4618      	mov	r0, r3
 800417c:	3728      	adds	r7, #40	; 0x28
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	2000003c 	.word	0x2000003c

08004188 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4a07      	ldr	r2, [pc, #28]	; (80041b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8004198:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	4a06      	ldr	r2, [pc, #24]	; (80041b8 <vApplicationGetIdleTaskMemory+0x30>)
 800419e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2280      	movs	r2, #128	; 0x80
 80041a4:	601a      	str	r2, [r3, #0]
}
 80041a6:	bf00      	nop
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	20000040 	.word	0x20000040
 80041b8:	2000009c 	.word	0x2000009c

080041bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	4a07      	ldr	r2, [pc, #28]	; (80041e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80041cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	4a06      	ldr	r2, [pc, #24]	; (80041ec <vApplicationGetTimerTaskMemory+0x30>)
 80041d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041da:	601a      	str	r2, [r3, #0]
}
 80041dc:	bf00      	nop
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	2000029c 	.word	0x2000029c
 80041ec:	200002f8 	.word	0x200002f8

080041f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f103 0208 	add.w	r2, r3, #8
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f04f 32ff 	mov.w	r2, #4294967295
 8004208:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f103 0208 	add.w	r2, r3, #8
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f103 0208 	add.w	r2, r3, #8
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800424a:	b480      	push	{r7}
 800424c:	b085      	sub	sp, #20
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
 8004252:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	1c5a      	adds	r2, r3, #1
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	601a      	str	r2, [r3, #0]
}
 8004286:	bf00      	nop
 8004288:	3714      	adds	r7, #20
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004292:	b480      	push	{r7}
 8004294:	b085      	sub	sp, #20
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
 800429a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a8:	d103      	bne.n	80042b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	e00c      	b.n	80042cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	3308      	adds	r3, #8
 80042b6:	60fb      	str	r3, [r7, #12]
 80042b8:	e002      	b.n	80042c0 <vListInsert+0x2e>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d2f6      	bcs.n	80042ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	683a      	ldr	r2, [r7, #0]
 80042da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	1c5a      	adds	r2, r3, #1
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	601a      	str	r2, [r3, #0]
}
 80042f8:	bf00      	nop
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6892      	ldr	r2, [r2, #8]
 800431a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	6852      	ldr	r2, [r2, #4]
 8004324:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	429a      	cmp	r2, r3
 800432e:	d103      	bne.n	8004338 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689a      	ldr	r2, [r3, #8]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	1e5a      	subs	r2, r3, #1
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
}
 800434c:	4618      	mov	r0, r3
 800434e:	3714      	adds	r7, #20
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d109      	bne.n	8004380 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800436c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004370:	f383 8811 	msr	BASEPRI, r3
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	60bb      	str	r3, [r7, #8]
 800437e:	e7fe      	b.n	800437e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004380:	f002 f904 	bl	800658c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438c:	68f9      	ldr	r1, [r7, #12]
 800438e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004390:	fb01 f303 	mul.w	r3, r1, r3
 8004394:	441a      	add	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b0:	3b01      	subs	r3, #1
 80043b2:	68f9      	ldr	r1, [r7, #12]
 80043b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80043b6:	fb01 f303 	mul.w	r3, r1, r3
 80043ba:	441a      	add	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	22ff      	movs	r2, #255	; 0xff
 80043c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	22ff      	movs	r2, #255	; 0xff
 80043cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d114      	bne.n	8004400 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d01a      	beq.n	8004414 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	3310      	adds	r3, #16
 80043e2:	4618      	mov	r0, r3
 80043e4:	f001 f9d0 	bl	8005788 <xTaskRemoveFromEventList>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d012      	beq.n	8004414 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80043ee:	4b0d      	ldr	r3, [pc, #52]	; (8004424 <xQueueGenericReset+0xcc>)
 80043f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	f3bf 8f4f 	dsb	sy
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	e009      	b.n	8004414 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	3310      	adds	r3, #16
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff fef3 	bl	80041f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	3324      	adds	r3, #36	; 0x24
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff feee 	bl	80041f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004414:	f002 f8e8 	bl	80065e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004418:	2301      	movs	r3, #1
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	e000ed04 	.word	0xe000ed04

08004428 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004428:	b580      	push	{r7, lr}
 800442a:	b08e      	sub	sp, #56	; 0x38
 800442c:	af02      	add	r7, sp, #8
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
 8004434:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d109      	bne.n	8004450 <xQueueGenericCreateStatic+0x28>
 800443c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004440:	f383 8811 	msr	BASEPRI, r3
 8004444:	f3bf 8f6f 	isb	sy
 8004448:	f3bf 8f4f 	dsb	sy
 800444c:	62bb      	str	r3, [r7, #40]	; 0x28
 800444e:	e7fe      	b.n	800444e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d109      	bne.n	800446a <xQueueGenericCreateStatic+0x42>
 8004456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445a:	f383 8811 	msr	BASEPRI, r3
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	f3bf 8f4f 	dsb	sy
 8004466:	627b      	str	r3, [r7, #36]	; 0x24
 8004468:	e7fe      	b.n	8004468 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d002      	beq.n	8004476 <xQueueGenericCreateStatic+0x4e>
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <xQueueGenericCreateStatic+0x52>
 8004476:	2301      	movs	r3, #1
 8004478:	e000      	b.n	800447c <xQueueGenericCreateStatic+0x54>
 800447a:	2300      	movs	r3, #0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d109      	bne.n	8004494 <xQueueGenericCreateStatic+0x6c>
 8004480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004484:	f383 8811 	msr	BASEPRI, r3
 8004488:	f3bf 8f6f 	isb	sy
 800448c:	f3bf 8f4f 	dsb	sy
 8004490:	623b      	str	r3, [r7, #32]
 8004492:	e7fe      	b.n	8004492 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d102      	bne.n	80044a0 <xQueueGenericCreateStatic+0x78>
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <xQueueGenericCreateStatic+0x7c>
 80044a0:	2301      	movs	r3, #1
 80044a2:	e000      	b.n	80044a6 <xQueueGenericCreateStatic+0x7e>
 80044a4:	2300      	movs	r3, #0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d109      	bne.n	80044be <xQueueGenericCreateStatic+0x96>
 80044aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ae:	f383 8811 	msr	BASEPRI, r3
 80044b2:	f3bf 8f6f 	isb	sy
 80044b6:	f3bf 8f4f 	dsb	sy
 80044ba:	61fb      	str	r3, [r7, #28]
 80044bc:	e7fe      	b.n	80044bc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80044be:	2350      	movs	r3, #80	; 0x50
 80044c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	2b50      	cmp	r3, #80	; 0x50
 80044c6:	d009      	beq.n	80044dc <xQueueGenericCreateStatic+0xb4>
 80044c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044cc:	f383 8811 	msr	BASEPRI, r3
 80044d0:	f3bf 8f6f 	isb	sy
 80044d4:	f3bf 8f4f 	dsb	sy
 80044d8:	61bb      	str	r3, [r7, #24]
 80044da:	e7fe      	b.n	80044da <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80044dc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80044e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00d      	beq.n	8004504 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80044e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80044f0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80044f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	4613      	mov	r3, r2
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	68b9      	ldr	r1, [r7, #8]
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 f844 	bl	800458c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004506:	4618      	mov	r0, r3
 8004508:	3730      	adds	r7, #48	; 0x30
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800450e:	b580      	push	{r7, lr}
 8004510:	b08a      	sub	sp, #40	; 0x28
 8004512:	af02      	add	r7, sp, #8
 8004514:	60f8      	str	r0, [r7, #12]
 8004516:	60b9      	str	r1, [r7, #8]
 8004518:	4613      	mov	r3, r2
 800451a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d109      	bne.n	8004536 <xQueueGenericCreate+0x28>
 8004522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004526:	f383 8811 	msr	BASEPRI, r3
 800452a:	f3bf 8f6f 	isb	sy
 800452e:	f3bf 8f4f 	dsb	sy
 8004532:	613b      	str	r3, [r7, #16]
 8004534:	e7fe      	b.n	8004534 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d102      	bne.n	8004542 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800453c:	2300      	movs	r3, #0
 800453e:	61fb      	str	r3, [r7, #28]
 8004540:	e004      	b.n	800454c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	fb02 f303 	mul.w	r3, r2, r3
 800454a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	3350      	adds	r3, #80	; 0x50
 8004550:	4618      	mov	r0, r3
 8004552:	f002 f935 	bl	80067c0 <pvPortMalloc>
 8004556:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d011      	beq.n	8004582 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	3350      	adds	r3, #80	; 0x50
 8004566:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004570:	79fa      	ldrb	r2, [r7, #7]
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	4613      	mov	r3, r2
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	68b9      	ldr	r1, [r7, #8]
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 f805 	bl	800458c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004582:	69bb      	ldr	r3, [r7, #24]
	}
 8004584:	4618      	mov	r0, r3
 8004586:	3720      	adds	r7, #32
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
 8004598:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d103      	bne.n	80045a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	e002      	b.n	80045ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80045ba:	2101      	movs	r1, #1
 80045bc:	69b8      	ldr	r0, [r7, #24]
 80045be:	f7ff fecb 	bl	8004358 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	78fa      	ldrb	r2, [r7, #3]
 80045c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80045ca:	bf00      	nop
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b08a      	sub	sp, #40	; 0x28
 80045d6:	af02      	add	r7, sp, #8
 80045d8:	60f8      	str	r0, [r7, #12]
 80045da:	60b9      	str	r1, [r7, #8]
 80045dc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d109      	bne.n	80045f8 <xQueueCreateCountingSemaphoreStatic+0x26>
 80045e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e8:	f383 8811 	msr	BASEPRI, r3
 80045ec:	f3bf 8f6f 	isb	sy
 80045f0:	f3bf 8f4f 	dsb	sy
 80045f4:	61bb      	str	r3, [r7, #24]
 80045f6:	e7fe      	b.n	80045f6 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80045f8:	68ba      	ldr	r2, [r7, #8]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d909      	bls.n	8004614 <xQueueCreateCountingSemaphoreStatic+0x42>
 8004600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004604:	f383 8811 	msr	BASEPRI, r3
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	617b      	str	r3, [r7, #20]
 8004612:	e7fe      	b.n	8004612 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004614:	2302      	movs	r3, #2
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	2100      	movs	r1, #0
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f7ff ff02 	bl	8004428 <xQueueGenericCreateStatic>
 8004624:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d002      	beq.n	8004632 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004632:	69fb      	ldr	r3, [r7, #28]
	}
 8004634:	4618      	mov	r0, r3
 8004636:	3720      	adds	r7, #32
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d109      	bne.n	8004660 <xQueueCreateCountingSemaphore+0x24>
 800464c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004650:	f383 8811 	msr	BASEPRI, r3
 8004654:	f3bf 8f6f 	isb	sy
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	613b      	str	r3, [r7, #16]
 800465e:	e7fe      	b.n	800465e <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	429a      	cmp	r2, r3
 8004666:	d909      	bls.n	800467c <xQueueCreateCountingSemaphore+0x40>
 8004668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466c:	f383 8811 	msr	BASEPRI, r3
 8004670:	f3bf 8f6f 	isb	sy
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	e7fe      	b.n	800467a <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800467c:	2202      	movs	r2, #2
 800467e:	2100      	movs	r1, #0
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7ff ff44 	bl	800450e <xQueueGenericCreate>
 8004686:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d002      	beq.n	8004694 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004694:	697b      	ldr	r3, [r7, #20]
	}
 8004696:	4618      	mov	r0, r3
 8004698:	3718      	adds	r7, #24
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
	...

080046a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b08e      	sub	sp, #56	; 0x38
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
 80046ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80046ae:	2300      	movs	r3, #0
 80046b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80046b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d109      	bne.n	80046d0 <xQueueGenericSend+0x30>
 80046bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c0:	f383 8811 	msr	BASEPRI, r3
 80046c4:	f3bf 8f6f 	isb	sy
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80046ce:	e7fe      	b.n	80046ce <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d103      	bne.n	80046de <xQueueGenericSend+0x3e>
 80046d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <xQueueGenericSend+0x42>
 80046de:	2301      	movs	r3, #1
 80046e0:	e000      	b.n	80046e4 <xQueueGenericSend+0x44>
 80046e2:	2300      	movs	r3, #0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d109      	bne.n	80046fc <xQueueGenericSend+0x5c>
 80046e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ec:	f383 8811 	msr	BASEPRI, r3
 80046f0:	f3bf 8f6f 	isb	sy
 80046f4:	f3bf 8f4f 	dsb	sy
 80046f8:	627b      	str	r3, [r7, #36]	; 0x24
 80046fa:	e7fe      	b.n	80046fa <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d103      	bne.n	800470a <xQueueGenericSend+0x6a>
 8004702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004706:	2b01      	cmp	r3, #1
 8004708:	d101      	bne.n	800470e <xQueueGenericSend+0x6e>
 800470a:	2301      	movs	r3, #1
 800470c:	e000      	b.n	8004710 <xQueueGenericSend+0x70>
 800470e:	2300      	movs	r3, #0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d109      	bne.n	8004728 <xQueueGenericSend+0x88>
 8004714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004718:	f383 8811 	msr	BASEPRI, r3
 800471c:	f3bf 8f6f 	isb	sy
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	623b      	str	r3, [r7, #32]
 8004726:	e7fe      	b.n	8004726 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004728:	f001 f9e4 	bl	8005af4 <xTaskGetSchedulerState>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d102      	bne.n	8004738 <xQueueGenericSend+0x98>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d101      	bne.n	800473c <xQueueGenericSend+0x9c>
 8004738:	2301      	movs	r3, #1
 800473a:	e000      	b.n	800473e <xQueueGenericSend+0x9e>
 800473c:	2300      	movs	r3, #0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d109      	bne.n	8004756 <xQueueGenericSend+0xb6>
 8004742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004746:	f383 8811 	msr	BASEPRI, r3
 800474a:	f3bf 8f6f 	isb	sy
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	61fb      	str	r3, [r7, #28]
 8004754:	e7fe      	b.n	8004754 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004756:	f001 ff19 	bl	800658c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800475a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800475e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004762:	429a      	cmp	r2, r3
 8004764:	d302      	bcc.n	800476c <xQueueGenericSend+0xcc>
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b02      	cmp	r3, #2
 800476a:	d129      	bne.n	80047c0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	68b9      	ldr	r1, [r7, #8]
 8004770:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004772:	f000 fa21 	bl	8004bb8 <prvCopyDataToQueue>
 8004776:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477c:	2b00      	cmp	r3, #0
 800477e:	d010      	beq.n	80047a2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004782:	3324      	adds	r3, #36	; 0x24
 8004784:	4618      	mov	r0, r3
 8004786:	f000 ffff 	bl	8005788 <xTaskRemoveFromEventList>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d013      	beq.n	80047b8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004790:	4b3f      	ldr	r3, [pc, #252]	; (8004890 <xQueueGenericSend+0x1f0>)
 8004792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	f3bf 8f6f 	isb	sy
 80047a0:	e00a      	b.n	80047b8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80047a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d007      	beq.n	80047b8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80047a8:	4b39      	ldr	r3, [pc, #228]	; (8004890 <xQueueGenericSend+0x1f0>)
 80047aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ae:	601a      	str	r2, [r3, #0]
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80047b8:	f001 ff16 	bl	80065e8 <vPortExitCritical>
				return pdPASS;
 80047bc:	2301      	movs	r3, #1
 80047be:	e063      	b.n	8004888 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d103      	bne.n	80047ce <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80047c6:	f001 ff0f 	bl	80065e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80047ca:	2300      	movs	r3, #0
 80047cc:	e05c      	b.n	8004888 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d106      	bne.n	80047e2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047d4:	f107 0314 	add.w	r3, r7, #20
 80047d8:	4618      	mov	r0, r3
 80047da:	f001 f837 	bl	800584c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047de:	2301      	movs	r3, #1
 80047e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047e2:	f001 ff01 	bl	80065e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047e6:	f000 fdb3 	bl	8005350 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047ea:	f001 fecf 	bl	800658c <vPortEnterCritical>
 80047ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047f4:	b25b      	sxtb	r3, r3
 80047f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fa:	d103      	bne.n	8004804 <xQueueGenericSend+0x164>
 80047fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004806:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800480a:	b25b      	sxtb	r3, r3
 800480c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004810:	d103      	bne.n	800481a <xQueueGenericSend+0x17a>
 8004812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800481a:	f001 fee5 	bl	80065e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800481e:	1d3a      	adds	r2, r7, #4
 8004820:	f107 0314 	add.w	r3, r7, #20
 8004824:	4611      	mov	r1, r2
 8004826:	4618      	mov	r0, r3
 8004828:	f001 f826 	bl	8005878 <xTaskCheckForTimeOut>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d124      	bne.n	800487c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004832:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004834:	f000 fab8 	bl	8004da8 <prvIsQueueFull>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d018      	beq.n	8004870 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800483e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004840:	3310      	adds	r3, #16
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	4611      	mov	r1, r2
 8004846:	4618      	mov	r0, r3
 8004848:	f000 ff50 	bl	80056ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800484c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800484e:	f000 fa43 	bl	8004cd8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004852:	f000 fd8b 	bl	800536c <xTaskResumeAll>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	f47f af7c 	bne.w	8004756 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800485e:	4b0c      	ldr	r3, [pc, #48]	; (8004890 <xQueueGenericSend+0x1f0>)
 8004860:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004864:	601a      	str	r2, [r3, #0]
 8004866:	f3bf 8f4f 	dsb	sy
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	e772      	b.n	8004756 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004870:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004872:	f000 fa31 	bl	8004cd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004876:	f000 fd79 	bl	800536c <xTaskResumeAll>
 800487a:	e76c      	b.n	8004756 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800487c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800487e:	f000 fa2b 	bl	8004cd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004882:	f000 fd73 	bl	800536c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004886:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004888:	4618      	mov	r0, r3
 800488a:	3738      	adds	r7, #56	; 0x38
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	e000ed04 	.word	0xe000ed04

08004894 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b08e      	sub	sp, #56	; 0x38
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
 80048a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80048a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d109      	bne.n	80048c0 <xQueueGenericSendFromISR+0x2c>
 80048ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b0:	f383 8811 	msr	BASEPRI, r3
 80048b4:	f3bf 8f6f 	isb	sy
 80048b8:	f3bf 8f4f 	dsb	sy
 80048bc:	627b      	str	r3, [r7, #36]	; 0x24
 80048be:	e7fe      	b.n	80048be <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d103      	bne.n	80048ce <xQueueGenericSendFromISR+0x3a>
 80048c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <xQueueGenericSendFromISR+0x3e>
 80048ce:	2301      	movs	r3, #1
 80048d0:	e000      	b.n	80048d4 <xQueueGenericSendFromISR+0x40>
 80048d2:	2300      	movs	r3, #0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d109      	bne.n	80048ec <xQueueGenericSendFromISR+0x58>
 80048d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048dc:	f383 8811 	msr	BASEPRI, r3
 80048e0:	f3bf 8f6f 	isb	sy
 80048e4:	f3bf 8f4f 	dsb	sy
 80048e8:	623b      	str	r3, [r7, #32]
 80048ea:	e7fe      	b.n	80048ea <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d103      	bne.n	80048fa <xQueueGenericSendFromISR+0x66>
 80048f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d101      	bne.n	80048fe <xQueueGenericSendFromISR+0x6a>
 80048fa:	2301      	movs	r3, #1
 80048fc:	e000      	b.n	8004900 <xQueueGenericSendFromISR+0x6c>
 80048fe:	2300      	movs	r3, #0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d109      	bne.n	8004918 <xQueueGenericSendFromISR+0x84>
 8004904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004908:	f383 8811 	msr	BASEPRI, r3
 800490c:	f3bf 8f6f 	isb	sy
 8004910:	f3bf 8f4f 	dsb	sy
 8004914:	61fb      	str	r3, [r7, #28]
 8004916:	e7fe      	b.n	8004916 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004918:	f001 ff14 	bl	8006744 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800491c:	f3ef 8211 	mrs	r2, BASEPRI
 8004920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004924:	f383 8811 	msr	BASEPRI, r3
 8004928:	f3bf 8f6f 	isb	sy
 800492c:	f3bf 8f4f 	dsb	sy
 8004930:	61ba      	str	r2, [r7, #24]
 8004932:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004934:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004936:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800493c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004940:	429a      	cmp	r2, r3
 8004942:	d302      	bcc.n	800494a <xQueueGenericSendFromISR+0xb6>
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	2b02      	cmp	r3, #2
 8004948:	d12c      	bne.n	80049a4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800494a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004950:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	68b9      	ldr	r1, [r7, #8]
 8004958:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800495a:	f000 f92d 	bl	8004bb8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800495e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004966:	d112      	bne.n	800498e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496c:	2b00      	cmp	r3, #0
 800496e:	d016      	beq.n	800499e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004972:	3324      	adds	r3, #36	; 0x24
 8004974:	4618      	mov	r0, r3
 8004976:	f000 ff07 	bl	8005788 <xTaskRemoveFromEventList>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00e      	beq.n	800499e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00b      	beq.n	800499e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	e007      	b.n	800499e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800498e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004992:	3301      	adds	r3, #1
 8004994:	b2db      	uxtb	r3, r3
 8004996:	b25a      	sxtb	r2, r3
 8004998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800499e:	2301      	movs	r3, #1
 80049a0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80049a2:	e001      	b.n	80049a8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80049a4:	2300      	movs	r3, #0
 80049a6:	637b      	str	r3, [r7, #52]	; 0x34
 80049a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049aa:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80049b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3738      	adds	r7, #56	; 0x38
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b08c      	sub	sp, #48	; 0x30
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80049c8:	2300      	movs	r3, #0
 80049ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80049d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d109      	bne.n	80049ea <xQueueReceive+0x2e>
	__asm volatile
 80049d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049da:	f383 8811 	msr	BASEPRI, r3
 80049de:	f3bf 8f6f 	isb	sy
 80049e2:	f3bf 8f4f 	dsb	sy
 80049e6:	623b      	str	r3, [r7, #32]
 80049e8:	e7fe      	b.n	80049e8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d103      	bne.n	80049f8 <xQueueReceive+0x3c>
 80049f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <xQueueReceive+0x40>
 80049f8:	2301      	movs	r3, #1
 80049fa:	e000      	b.n	80049fe <xQueueReceive+0x42>
 80049fc:	2300      	movs	r3, #0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d109      	bne.n	8004a16 <xQueueReceive+0x5a>
 8004a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a06:	f383 8811 	msr	BASEPRI, r3
 8004a0a:	f3bf 8f6f 	isb	sy
 8004a0e:	f3bf 8f4f 	dsb	sy
 8004a12:	61fb      	str	r3, [r7, #28]
 8004a14:	e7fe      	b.n	8004a14 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a16:	f001 f86d 	bl	8005af4 <xTaskGetSchedulerState>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d102      	bne.n	8004a26 <xQueueReceive+0x6a>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <xQueueReceive+0x6e>
 8004a26:	2301      	movs	r3, #1
 8004a28:	e000      	b.n	8004a2c <xQueueReceive+0x70>
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d109      	bne.n	8004a44 <xQueueReceive+0x88>
 8004a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	61bb      	str	r3, [r7, #24]
 8004a42:	e7fe      	b.n	8004a42 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a44:	f001 fda2 	bl	800658c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d01f      	beq.n	8004a94 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a54:	68b9      	ldr	r1, [r7, #8]
 8004a56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a58:	f000 f918 	bl	8004c8c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5e:	1e5a      	subs	r2, r3, #1
 8004a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a62:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00f      	beq.n	8004a8c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6e:	3310      	adds	r3, #16
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 fe89 	bl	8005788 <xTaskRemoveFromEventList>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d007      	beq.n	8004a8c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a7c:	4b3c      	ldr	r3, [pc, #240]	; (8004b70 <xQueueReceive+0x1b4>)
 8004a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a82:	601a      	str	r2, [r3, #0]
 8004a84:	f3bf 8f4f 	dsb	sy
 8004a88:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a8c:	f001 fdac 	bl	80065e8 <vPortExitCritical>
				return pdPASS;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e069      	b.n	8004b68 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d103      	bne.n	8004aa2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a9a:	f001 fda5 	bl	80065e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	e062      	b.n	8004b68 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d106      	bne.n	8004ab6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004aa8:	f107 0310 	add.w	r3, r7, #16
 8004aac:	4618      	mov	r0, r3
 8004aae:	f000 fecd 	bl	800584c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ab6:	f001 fd97 	bl	80065e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004aba:	f000 fc49 	bl	8005350 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004abe:	f001 fd65 	bl	800658c <vPortEnterCritical>
 8004ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ac8:	b25b      	sxtb	r3, r3
 8004aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ace:	d103      	bne.n	8004ad8 <xQueueReceive+0x11c>
 8004ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ada:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ade:	b25b      	sxtb	r3, r3
 8004ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae4:	d103      	bne.n	8004aee <xQueueReceive+0x132>
 8004ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004aee:	f001 fd7b 	bl	80065e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004af2:	1d3a      	adds	r2, r7, #4
 8004af4:	f107 0310 	add.w	r3, r7, #16
 8004af8:	4611      	mov	r1, r2
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 febc 	bl	8005878 <xTaskCheckForTimeOut>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d123      	bne.n	8004b4e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b08:	f000 f938 	bl	8004d7c <prvIsQueueEmpty>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d017      	beq.n	8004b42 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b14:	3324      	adds	r3, #36	; 0x24
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	4611      	mov	r1, r2
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 fde6 	bl	80056ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b22:	f000 f8d9 	bl	8004cd8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b26:	f000 fc21 	bl	800536c <xTaskResumeAll>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d189      	bne.n	8004a44 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004b30:	4b0f      	ldr	r3, [pc, #60]	; (8004b70 <xQueueReceive+0x1b4>)
 8004b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b36:	601a      	str	r2, [r3, #0]
 8004b38:	f3bf 8f4f 	dsb	sy
 8004b3c:	f3bf 8f6f 	isb	sy
 8004b40:	e780      	b.n	8004a44 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004b42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b44:	f000 f8c8 	bl	8004cd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b48:	f000 fc10 	bl	800536c <xTaskResumeAll>
 8004b4c:	e77a      	b.n	8004a44 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004b4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b50:	f000 f8c2 	bl	8004cd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b54:	f000 fc0a 	bl	800536c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b5a:	f000 f90f 	bl	8004d7c <prvIsQueueEmpty>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f43f af6f 	beq.w	8004a44 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b66:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3730      	adds	r7, #48	; 0x30
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	e000ed04 	.word	0xe000ed04

08004b74 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d109      	bne.n	8004b9a <vQueueDelete+0x26>
 8004b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8a:	f383 8811 	msr	BASEPRI, r3
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	f3bf 8f4f 	dsb	sy
 8004b96:	60bb      	str	r3, [r7, #8]
 8004b98:	e7fe      	b.n	8004b98 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f000 f944 	bl	8004e28 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d102      	bne.n	8004bb0 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f001 feca 	bl	8006944 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004bb0:	bf00      	nop
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bcc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10d      	bne.n	8004bf2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d14d      	bne.n	8004c7a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 ffa4 	bl	8005b30 <xTaskPriorityDisinherit>
 8004be8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	609a      	str	r2, [r3, #8]
 8004bf0:	e043      	b.n	8004c7a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d119      	bne.n	8004c2c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6858      	ldr	r0, [r3, #4]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c00:	461a      	mov	r2, r3
 8004c02:	68b9      	ldr	r1, [r7, #8]
 8004c04:	f001 ffd6 	bl	8006bb4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c10:	441a      	add	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d32b      	bcc.n	8004c7a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	605a      	str	r2, [r3, #4]
 8004c2a:	e026      	b.n	8004c7a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	68d8      	ldr	r0, [r3, #12]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c34:	461a      	mov	r2, r3
 8004c36:	68b9      	ldr	r1, [r7, #8]
 8004c38:	f001 ffbc 	bl	8006bb4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	68da      	ldr	r2, [r3, #12]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c44:	425b      	negs	r3, r3
 8004c46:	441a      	add	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	68da      	ldr	r2, [r3, #12]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d207      	bcs.n	8004c68 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	689a      	ldr	r2, [r3, #8]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c60:	425b      	negs	r3, r3
 8004c62:	441a      	add	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d105      	bne.n	8004c7a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1c5a      	adds	r2, r3, #1
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004c82:	697b      	ldr	r3, [r7, #20]
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3718      	adds	r7, #24
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d018      	beq.n	8004cd0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68da      	ldr	r2, [r3, #12]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	441a      	add	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68da      	ldr	r2, [r3, #12]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d303      	bcc.n	8004cc0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68d9      	ldr	r1, [r3, #12]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc8:	461a      	mov	r2, r3
 8004cca:	6838      	ldr	r0, [r7, #0]
 8004ccc:	f001 ff72 	bl	8006bb4 <memcpy>
	}
}
 8004cd0:	bf00      	nop
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004ce0:	f001 fc54 	bl	800658c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004cec:	e011      	b.n	8004d12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d012      	beq.n	8004d1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	3324      	adds	r3, #36	; 0x24
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 fd44 	bl	8005788 <xTaskRemoveFromEventList>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004d06:	f000 fe17 	bl	8005938 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004d0a:	7bfb      	ldrb	r3, [r7, #15]
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	dce9      	bgt.n	8004cee <prvUnlockQueue+0x16>
 8004d1a:	e000      	b.n	8004d1e <prvUnlockQueue+0x46>
					break;
 8004d1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	22ff      	movs	r2, #255	; 0xff
 8004d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004d26:	f001 fc5f 	bl	80065e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d2a:	f001 fc2f 	bl	800658c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d36:	e011      	b.n	8004d5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d012      	beq.n	8004d66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3310      	adds	r3, #16
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 fd1f 	bl	8005788 <xTaskRemoveFromEventList>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d001      	beq.n	8004d54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004d50:	f000 fdf2 	bl	8005938 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004d54:	7bbb      	ldrb	r3, [r7, #14]
 8004d56:	3b01      	subs	r3, #1
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	dce9      	bgt.n	8004d38 <prvUnlockQueue+0x60>
 8004d64:	e000      	b.n	8004d68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004d66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	22ff      	movs	r2, #255	; 0xff
 8004d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004d70:	f001 fc3a 	bl	80065e8 <vPortExitCritical>
}
 8004d74:	bf00      	nop
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d84:	f001 fc02 	bl	800658c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d102      	bne.n	8004d96 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004d90:	2301      	movs	r3, #1
 8004d92:	60fb      	str	r3, [r7, #12]
 8004d94:	e001      	b.n	8004d9a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004d96:	2300      	movs	r3, #0
 8004d98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d9a:	f001 fc25 	bl	80065e8 <vPortExitCritical>

	return xReturn;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004db0:	f001 fbec 	bl	800658c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d102      	bne.n	8004dc6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	60fb      	str	r3, [r7, #12]
 8004dc4:	e001      	b.n	8004dca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004dca:	f001 fc0d 	bl	80065e8 <vPortExitCritical>

	return xReturn;
 8004dce:	68fb      	ldr	r3, [r7, #12]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004de2:	2300      	movs	r3, #0
 8004de4:	60fb      	str	r3, [r7, #12]
 8004de6:	e014      	b.n	8004e12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004de8:	4a0e      	ldr	r2, [pc, #56]	; (8004e24 <vQueueAddToRegistry+0x4c>)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10b      	bne.n	8004e0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004df4:	490b      	ldr	r1, [pc, #44]	; (8004e24 <vQueueAddToRegistry+0x4c>)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004dfe:	4a09      	ldr	r2, [pc, #36]	; (8004e24 <vQueueAddToRegistry+0x4c>)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	4413      	add	r3, r2
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004e0a:	e005      	b.n	8004e18 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	3301      	adds	r3, #1
 8004e10:	60fb      	str	r3, [r7, #12]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2b07      	cmp	r3, #7
 8004e16:	d9e7      	bls.n	8004de8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004e18:	bf00      	nop
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	200019f0 	.word	0x200019f0

08004e28 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e30:	2300      	movs	r3, #0
 8004e32:	60fb      	str	r3, [r7, #12]
 8004e34:	e016      	b.n	8004e64 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004e36:	4a10      	ldr	r2, [pc, #64]	; (8004e78 <vQueueUnregisterQueue+0x50>)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	4413      	add	r3, r2
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d10b      	bne.n	8004e5e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004e46:	4a0c      	ldr	r2, [pc, #48]	; (8004e78 <vQueueUnregisterQueue+0x50>)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004e50:	4a09      	ldr	r2, [pc, #36]	; (8004e78 <vQueueUnregisterQueue+0x50>)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	4413      	add	r3, r2
 8004e58:	2200      	movs	r2, #0
 8004e5a:	605a      	str	r2, [r3, #4]
				break;
 8004e5c:	e005      	b.n	8004e6a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	3301      	adds	r3, #1
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2b07      	cmp	r3, #7
 8004e68:	d9e5      	bls.n	8004e36 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004e6a:	bf00      	nop
 8004e6c:	3714      	adds	r7, #20
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	200019f0 	.word	0x200019f0

08004e7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004e8c:	f001 fb7e 	bl	800658c <vPortEnterCritical>
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e96:	b25b      	sxtb	r3, r3
 8004e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9c:	d103      	bne.n	8004ea6 <vQueueWaitForMessageRestricted+0x2a>
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004eac:	b25b      	sxtb	r3, r3
 8004eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb2:	d103      	bne.n	8004ebc <vQueueWaitForMessageRestricted+0x40>
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ebc:	f001 fb94 	bl	80065e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d106      	bne.n	8004ed6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	3324      	adds	r3, #36	; 0x24
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	68b9      	ldr	r1, [r7, #8]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f000 fc2f 	bl	8005734 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004ed6:	6978      	ldr	r0, [r7, #20]
 8004ed8:	f7ff fefe 	bl	8004cd8 <prvUnlockQueue>
	}
 8004edc:	bf00      	nop
 8004ede:	3718      	adds	r7, #24
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b08e      	sub	sp, #56	; 0x38
 8004ee8:	af04      	add	r7, sp, #16
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
 8004ef0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d109      	bne.n	8004f0c <xTaskCreateStatic+0x28>
 8004ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efc:	f383 8811 	msr	BASEPRI, r3
 8004f00:	f3bf 8f6f 	isb	sy
 8004f04:	f3bf 8f4f 	dsb	sy
 8004f08:	623b      	str	r3, [r7, #32]
 8004f0a:	e7fe      	b.n	8004f0a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d109      	bne.n	8004f26 <xTaskCreateStatic+0x42>
 8004f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f16:	f383 8811 	msr	BASEPRI, r3
 8004f1a:	f3bf 8f6f 	isb	sy
 8004f1e:	f3bf 8f4f 	dsb	sy
 8004f22:	61fb      	str	r3, [r7, #28]
 8004f24:	e7fe      	b.n	8004f24 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004f26:	235c      	movs	r3, #92	; 0x5c
 8004f28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	2b5c      	cmp	r3, #92	; 0x5c
 8004f2e:	d009      	beq.n	8004f44 <xTaskCreateStatic+0x60>
 8004f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f34:	f383 8811 	msr	BASEPRI, r3
 8004f38:	f3bf 8f6f 	isb	sy
 8004f3c:	f3bf 8f4f 	dsb	sy
 8004f40:	61bb      	str	r3, [r7, #24]
 8004f42:	e7fe      	b.n	8004f42 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004f44:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d01e      	beq.n	8004f8a <xTaskCreateStatic+0xa6>
 8004f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d01b      	beq.n	8004f8a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f54:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f5a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	2202      	movs	r2, #2
 8004f60:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f64:	2300      	movs	r3, #0
 8004f66:	9303      	str	r3, [sp, #12]
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	9302      	str	r3, [sp, #8]
 8004f6c:	f107 0314 	add.w	r3, r7, #20
 8004f70:	9301      	str	r3, [sp, #4]
 8004f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	68b9      	ldr	r1, [r7, #8]
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 f850 	bl	8005022 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f84:	f000 f8dc 	bl	8005140 <prvAddNewTaskToReadyList>
 8004f88:	e001      	b.n	8004f8e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004f8e:	697b      	ldr	r3, [r7, #20]
	}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3728      	adds	r7, #40	; 0x28
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b08c      	sub	sp, #48	; 0x30
 8004f9c:	af04      	add	r7, sp, #16
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	603b      	str	r3, [r7, #0]
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004fa8:	88fb      	ldrh	r3, [r7, #6]
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4618      	mov	r0, r3
 8004fae:	f001 fc07 	bl	80067c0 <pvPortMalloc>
 8004fb2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00e      	beq.n	8004fd8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004fba:	205c      	movs	r0, #92	; 0x5c
 8004fbc:	f001 fc00 	bl	80067c0 <pvPortMalloc>
 8004fc0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d003      	beq.n	8004fd0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	631a      	str	r2, [r3, #48]	; 0x30
 8004fce:	e005      	b.n	8004fdc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004fd0:	6978      	ldr	r0, [r7, #20]
 8004fd2:	f001 fcb7 	bl	8006944 <vPortFree>
 8004fd6:	e001      	b.n	8004fdc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d017      	beq.n	8005012 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004fea:	88fa      	ldrh	r2, [r7, #6]
 8004fec:	2300      	movs	r3, #0
 8004fee:	9303      	str	r3, [sp, #12]
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	9302      	str	r3, [sp, #8]
 8004ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff6:	9301      	str	r3, [sp, #4]
 8004ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	68b9      	ldr	r1, [r7, #8]
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f000 f80e 	bl	8005022 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005006:	69f8      	ldr	r0, [r7, #28]
 8005008:	f000 f89a 	bl	8005140 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800500c:	2301      	movs	r3, #1
 800500e:	61bb      	str	r3, [r7, #24]
 8005010:	e002      	b.n	8005018 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005012:	f04f 33ff 	mov.w	r3, #4294967295
 8005016:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005018:	69bb      	ldr	r3, [r7, #24]
	}
 800501a:	4618      	mov	r0, r3
 800501c:	3720      	adds	r7, #32
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b088      	sub	sp, #32
 8005026:	af00      	add	r7, sp, #0
 8005028:	60f8      	str	r0, [r7, #12]
 800502a:	60b9      	str	r1, [r7, #8]
 800502c:	607a      	str	r2, [r7, #4]
 800502e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005032:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	461a      	mov	r2, r3
 800503a:	21a5      	movs	r1, #165	; 0xa5
 800503c:	f001 fdc5 	bl	8006bca <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005042:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800504a:	3b01      	subs	r3, #1
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4413      	add	r3, r2
 8005050:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	f023 0307 	bic.w	r3, r3, #7
 8005058:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	f003 0307 	and.w	r3, r3, #7
 8005060:	2b00      	cmp	r3, #0
 8005062:	d009      	beq.n	8005078 <prvInitialiseNewTask+0x56>
 8005064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005068:	f383 8811 	msr	BASEPRI, r3
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	617b      	str	r3, [r7, #20]
 8005076:	e7fe      	b.n	8005076 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d01f      	beq.n	80050be <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800507e:	2300      	movs	r3, #0
 8005080:	61fb      	str	r3, [r7, #28]
 8005082:	e012      	b.n	80050aa <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	4413      	add	r3, r2
 800508a:	7819      	ldrb	r1, [r3, #0]
 800508c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	4413      	add	r3, r2
 8005092:	3334      	adds	r3, #52	; 0x34
 8005094:	460a      	mov	r2, r1
 8005096:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	4413      	add	r3, r2
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d006      	beq.n	80050b2 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	3301      	adds	r3, #1
 80050a8:	61fb      	str	r3, [r7, #28]
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	2b0f      	cmp	r3, #15
 80050ae:	d9e9      	bls.n	8005084 <prvInitialiseNewTask+0x62>
 80050b0:	e000      	b.n	80050b4 <prvInitialiseNewTask+0x92>
			{
				break;
 80050b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80050b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050bc:	e003      	b.n	80050c6 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80050be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80050c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c8:	2b37      	cmp	r3, #55	; 0x37
 80050ca:	d901      	bls.n	80050d0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80050cc:	2337      	movs	r3, #55	; 0x37
 80050ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80050d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80050d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80050dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050de:	2200      	movs	r2, #0
 80050e0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80050e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e4:	3304      	adds	r3, #4
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7ff f8a2 	bl	8004230 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80050ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ee:	3318      	adds	r3, #24
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7ff f89d 	bl	8004230 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80050f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005104:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800510a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800510c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510e:	2200      	movs	r2, #0
 8005110:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	68f9      	ldr	r1, [r7, #12]
 800511e:	69b8      	ldr	r0, [r7, #24]
 8005120:	f001 f90c 	bl	800633c <pxPortInitialiseStack>
 8005124:	4602      	mov	r2, r0
 8005126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005128:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800512a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800512c:	2b00      	cmp	r3, #0
 800512e:	d002      	beq.n	8005136 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005134:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005136:	bf00      	nop
 8005138:	3720      	adds	r7, #32
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
	...

08005140 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005148:	f001 fa20 	bl	800658c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800514c:	4b2d      	ldr	r3, [pc, #180]	; (8005204 <prvAddNewTaskToReadyList+0xc4>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	3301      	adds	r3, #1
 8005152:	4a2c      	ldr	r2, [pc, #176]	; (8005204 <prvAddNewTaskToReadyList+0xc4>)
 8005154:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005156:	4b2c      	ldr	r3, [pc, #176]	; (8005208 <prvAddNewTaskToReadyList+0xc8>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d109      	bne.n	8005172 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800515e:	4a2a      	ldr	r2, [pc, #168]	; (8005208 <prvAddNewTaskToReadyList+0xc8>)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005164:	4b27      	ldr	r3, [pc, #156]	; (8005204 <prvAddNewTaskToReadyList+0xc4>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d110      	bne.n	800518e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800516c:	f000 fc08 	bl	8005980 <prvInitialiseTaskLists>
 8005170:	e00d      	b.n	800518e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005172:	4b26      	ldr	r3, [pc, #152]	; (800520c <prvAddNewTaskToReadyList+0xcc>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d109      	bne.n	800518e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800517a:	4b23      	ldr	r3, [pc, #140]	; (8005208 <prvAddNewTaskToReadyList+0xc8>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005184:	429a      	cmp	r2, r3
 8005186:	d802      	bhi.n	800518e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005188:	4a1f      	ldr	r2, [pc, #124]	; (8005208 <prvAddNewTaskToReadyList+0xc8>)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800518e:	4b20      	ldr	r3, [pc, #128]	; (8005210 <prvAddNewTaskToReadyList+0xd0>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	3301      	adds	r3, #1
 8005194:	4a1e      	ldr	r2, [pc, #120]	; (8005210 <prvAddNewTaskToReadyList+0xd0>)
 8005196:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005198:	4b1d      	ldr	r3, [pc, #116]	; (8005210 <prvAddNewTaskToReadyList+0xd0>)
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a4:	4b1b      	ldr	r3, [pc, #108]	; (8005214 <prvAddNewTaskToReadyList+0xd4>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d903      	bls.n	80051b4 <prvAddNewTaskToReadyList+0x74>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b0:	4a18      	ldr	r2, [pc, #96]	; (8005214 <prvAddNewTaskToReadyList+0xd4>)
 80051b2:	6013      	str	r3, [r2, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051b8:	4613      	mov	r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4413      	add	r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4a15      	ldr	r2, [pc, #84]	; (8005218 <prvAddNewTaskToReadyList+0xd8>)
 80051c2:	441a      	add	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	3304      	adds	r3, #4
 80051c8:	4619      	mov	r1, r3
 80051ca:	4610      	mov	r0, r2
 80051cc:	f7ff f83d 	bl	800424a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80051d0:	f001 fa0a 	bl	80065e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80051d4:	4b0d      	ldr	r3, [pc, #52]	; (800520c <prvAddNewTaskToReadyList+0xcc>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00e      	beq.n	80051fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80051dc:	4b0a      	ldr	r3, [pc, #40]	; (8005208 <prvAddNewTaskToReadyList+0xc8>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d207      	bcs.n	80051fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80051ea:	4b0c      	ldr	r3, [pc, #48]	; (800521c <prvAddNewTaskToReadyList+0xdc>)
 80051ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051f0:	601a      	str	r2, [r3, #0]
 80051f2:	f3bf 8f4f 	dsb	sy
 80051f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051fa:	bf00      	nop
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	20000bcc 	.word	0x20000bcc
 8005208:	200006f8 	.word	0x200006f8
 800520c:	20000bd8 	.word	0x20000bd8
 8005210:	20000be8 	.word	0x20000be8
 8005214:	20000bd4 	.word	0x20000bd4
 8005218:	200006fc 	.word	0x200006fc
 800521c:	e000ed04 	.word	0xe000ed04

08005220 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005228:	2300      	movs	r3, #0
 800522a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d016      	beq.n	8005260 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005232:	4b13      	ldr	r3, [pc, #76]	; (8005280 <vTaskDelay+0x60>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d009      	beq.n	800524e <vTaskDelay+0x2e>
 800523a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523e:	f383 8811 	msr	BASEPRI, r3
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	60bb      	str	r3, [r7, #8]
 800524c:	e7fe      	b.n	800524c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800524e:	f000 f87f 	bl	8005350 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005252:	2100      	movs	r1, #0
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 fcd7 	bl	8005c08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800525a:	f000 f887 	bl	800536c <xTaskResumeAll>
 800525e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d107      	bne.n	8005276 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005266:	4b07      	ldr	r3, [pc, #28]	; (8005284 <vTaskDelay+0x64>)
 8005268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800526c:	601a      	str	r2, [r3, #0]
 800526e:	f3bf 8f4f 	dsb	sy
 8005272:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005276:	bf00      	nop
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	20000bf4 	.word	0x20000bf4
 8005284:	e000ed04 	.word	0xe000ed04

08005288 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b08a      	sub	sp, #40	; 0x28
 800528c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800528e:	2300      	movs	r3, #0
 8005290:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005292:	2300      	movs	r3, #0
 8005294:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005296:	463a      	mov	r2, r7
 8005298:	1d39      	adds	r1, r7, #4
 800529a:	f107 0308 	add.w	r3, r7, #8
 800529e:	4618      	mov	r0, r3
 80052a0:	f7fe ff72 	bl	8004188 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80052a4:	6839      	ldr	r1, [r7, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	9202      	str	r2, [sp, #8]
 80052ac:	9301      	str	r3, [sp, #4]
 80052ae:	2300      	movs	r3, #0
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	2300      	movs	r3, #0
 80052b4:	460a      	mov	r2, r1
 80052b6:	4920      	ldr	r1, [pc, #128]	; (8005338 <vTaskStartScheduler+0xb0>)
 80052b8:	4820      	ldr	r0, [pc, #128]	; (800533c <vTaskStartScheduler+0xb4>)
 80052ba:	f7ff fe13 	bl	8004ee4 <xTaskCreateStatic>
 80052be:	4602      	mov	r2, r0
 80052c0:	4b1f      	ldr	r3, [pc, #124]	; (8005340 <vTaskStartScheduler+0xb8>)
 80052c2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80052c4:	4b1e      	ldr	r3, [pc, #120]	; (8005340 <vTaskStartScheduler+0xb8>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d002      	beq.n	80052d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80052cc:	2301      	movs	r3, #1
 80052ce:	617b      	str	r3, [r7, #20]
 80052d0:	e001      	b.n	80052d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80052d2:	2300      	movs	r3, #0
 80052d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d102      	bne.n	80052e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80052dc:	f000 fce8 	bl	8005cb0 <xTimerCreateTimerTask>
 80052e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d115      	bne.n	8005314 <vTaskStartScheduler+0x8c>
 80052e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ec:	f383 8811 	msr	BASEPRI, r3
 80052f0:	f3bf 8f6f 	isb	sy
 80052f4:	f3bf 8f4f 	dsb	sy
 80052f8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80052fa:	4b12      	ldr	r3, [pc, #72]	; (8005344 <vTaskStartScheduler+0xbc>)
 80052fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005300:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005302:	4b11      	ldr	r3, [pc, #68]	; (8005348 <vTaskStartScheduler+0xc0>)
 8005304:	2201      	movs	r2, #1
 8005306:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005308:	4b10      	ldr	r3, [pc, #64]	; (800534c <vTaskStartScheduler+0xc4>)
 800530a:	2200      	movs	r2, #0
 800530c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800530e:	f001 f89f 	bl	8006450 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005312:	e00d      	b.n	8005330 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800531a:	d109      	bne.n	8005330 <vTaskStartScheduler+0xa8>
 800531c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005320:	f383 8811 	msr	BASEPRI, r3
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	60fb      	str	r3, [r7, #12]
 800532e:	e7fe      	b.n	800532e <vTaskStartScheduler+0xa6>
}
 8005330:	bf00      	nop
 8005332:	3718      	adds	r7, #24
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	08006c1c 	.word	0x08006c1c
 800533c:	08005951 	.word	0x08005951
 8005340:	20000bf0 	.word	0x20000bf0
 8005344:	20000bec 	.word	0x20000bec
 8005348:	20000bd8 	.word	0x20000bd8
 800534c:	20000bd0 	.word	0x20000bd0

08005350 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005350:	b480      	push	{r7}
 8005352:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005354:	4b04      	ldr	r3, [pc, #16]	; (8005368 <vTaskSuspendAll+0x18>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	3301      	adds	r3, #1
 800535a:	4a03      	ldr	r2, [pc, #12]	; (8005368 <vTaskSuspendAll+0x18>)
 800535c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800535e:	bf00      	nop
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr
 8005368:	20000bf4 	.word	0x20000bf4

0800536c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005372:	2300      	movs	r3, #0
 8005374:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005376:	2300      	movs	r3, #0
 8005378:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800537a:	4b41      	ldr	r3, [pc, #260]	; (8005480 <xTaskResumeAll+0x114>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d109      	bne.n	8005396 <xTaskResumeAll+0x2a>
 8005382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005386:	f383 8811 	msr	BASEPRI, r3
 800538a:	f3bf 8f6f 	isb	sy
 800538e:	f3bf 8f4f 	dsb	sy
 8005392:	603b      	str	r3, [r7, #0]
 8005394:	e7fe      	b.n	8005394 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005396:	f001 f8f9 	bl	800658c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800539a:	4b39      	ldr	r3, [pc, #228]	; (8005480 <xTaskResumeAll+0x114>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	3b01      	subs	r3, #1
 80053a0:	4a37      	ldr	r2, [pc, #220]	; (8005480 <xTaskResumeAll+0x114>)
 80053a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053a4:	4b36      	ldr	r3, [pc, #216]	; (8005480 <xTaskResumeAll+0x114>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d162      	bne.n	8005472 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80053ac:	4b35      	ldr	r3, [pc, #212]	; (8005484 <xTaskResumeAll+0x118>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d05e      	beq.n	8005472 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053b4:	e02f      	b.n	8005416 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053b6:	4b34      	ldr	r3, [pc, #208]	; (8005488 <xTaskResumeAll+0x11c>)
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	3318      	adds	r3, #24
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7fe ff9e 	bl	8004304 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	3304      	adds	r3, #4
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7fe ff99 	bl	8004304 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d6:	4b2d      	ldr	r3, [pc, #180]	; (800548c <xTaskResumeAll+0x120>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d903      	bls.n	80053e6 <xTaskResumeAll+0x7a>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e2:	4a2a      	ldr	r2, [pc, #168]	; (800548c <xTaskResumeAll+0x120>)
 80053e4:	6013      	str	r3, [r2, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ea:	4613      	mov	r3, r2
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	4413      	add	r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	4a27      	ldr	r2, [pc, #156]	; (8005490 <xTaskResumeAll+0x124>)
 80053f4:	441a      	add	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	3304      	adds	r3, #4
 80053fa:	4619      	mov	r1, r3
 80053fc:	4610      	mov	r0, r2
 80053fe:	f7fe ff24 	bl	800424a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005406:	4b23      	ldr	r3, [pc, #140]	; (8005494 <xTaskResumeAll+0x128>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540c:	429a      	cmp	r2, r3
 800540e:	d302      	bcc.n	8005416 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005410:	4b21      	ldr	r3, [pc, #132]	; (8005498 <xTaskResumeAll+0x12c>)
 8005412:	2201      	movs	r2, #1
 8005414:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005416:	4b1c      	ldr	r3, [pc, #112]	; (8005488 <xTaskResumeAll+0x11c>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1cb      	bne.n	80053b6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d001      	beq.n	8005428 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005424:	f000 fb46 	bl	8005ab4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005428:	4b1c      	ldr	r3, [pc, #112]	; (800549c <xTaskResumeAll+0x130>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d010      	beq.n	8005456 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005434:	f000 f846 	bl	80054c4 <xTaskIncrementTick>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d002      	beq.n	8005444 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800543e:	4b16      	ldr	r3, [pc, #88]	; (8005498 <xTaskResumeAll+0x12c>)
 8005440:	2201      	movs	r2, #1
 8005442:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	3b01      	subs	r3, #1
 8005448:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1f1      	bne.n	8005434 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005450:	4b12      	ldr	r3, [pc, #72]	; (800549c <xTaskResumeAll+0x130>)
 8005452:	2200      	movs	r2, #0
 8005454:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005456:	4b10      	ldr	r3, [pc, #64]	; (8005498 <xTaskResumeAll+0x12c>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d009      	beq.n	8005472 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800545e:	2301      	movs	r3, #1
 8005460:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005462:	4b0f      	ldr	r3, [pc, #60]	; (80054a0 <xTaskResumeAll+0x134>)
 8005464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005468:	601a      	str	r2, [r3, #0]
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005472:	f001 f8b9 	bl	80065e8 <vPortExitCritical>

	return xAlreadyYielded;
 8005476:	68bb      	ldr	r3, [r7, #8]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	20000bf4 	.word	0x20000bf4
 8005484:	20000bcc 	.word	0x20000bcc
 8005488:	20000b8c 	.word	0x20000b8c
 800548c:	20000bd4 	.word	0x20000bd4
 8005490:	200006fc 	.word	0x200006fc
 8005494:	200006f8 	.word	0x200006f8
 8005498:	20000be0 	.word	0x20000be0
 800549c:	20000bdc 	.word	0x20000bdc
 80054a0:	e000ed04 	.word	0xe000ed04

080054a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80054aa:	4b05      	ldr	r3, [pc, #20]	; (80054c0 <xTaskGetTickCount+0x1c>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80054b0:	687b      	ldr	r3, [r7, #4]
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	20000bd0 	.word	0x20000bd0

080054c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80054ca:	2300      	movs	r3, #0
 80054cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054ce:	4b4e      	ldr	r3, [pc, #312]	; (8005608 <xTaskIncrementTick+0x144>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f040 8088 	bne.w	80055e8 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80054d8:	4b4c      	ldr	r3, [pc, #304]	; (800560c <xTaskIncrementTick+0x148>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	3301      	adds	r3, #1
 80054de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80054e0:	4a4a      	ldr	r2, [pc, #296]	; (800560c <xTaskIncrementTick+0x148>)
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d11f      	bne.n	800552c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80054ec:	4b48      	ldr	r3, [pc, #288]	; (8005610 <xTaskIncrementTick+0x14c>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d009      	beq.n	800550a <xTaskIncrementTick+0x46>
 80054f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fa:	f383 8811 	msr	BASEPRI, r3
 80054fe:	f3bf 8f6f 	isb	sy
 8005502:	f3bf 8f4f 	dsb	sy
 8005506:	603b      	str	r3, [r7, #0]
 8005508:	e7fe      	b.n	8005508 <xTaskIncrementTick+0x44>
 800550a:	4b41      	ldr	r3, [pc, #260]	; (8005610 <xTaskIncrementTick+0x14c>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	60fb      	str	r3, [r7, #12]
 8005510:	4b40      	ldr	r3, [pc, #256]	; (8005614 <xTaskIncrementTick+0x150>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a3e      	ldr	r2, [pc, #248]	; (8005610 <xTaskIncrementTick+0x14c>)
 8005516:	6013      	str	r3, [r2, #0]
 8005518:	4a3e      	ldr	r2, [pc, #248]	; (8005614 <xTaskIncrementTick+0x150>)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6013      	str	r3, [r2, #0]
 800551e:	4b3e      	ldr	r3, [pc, #248]	; (8005618 <xTaskIncrementTick+0x154>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	3301      	adds	r3, #1
 8005524:	4a3c      	ldr	r2, [pc, #240]	; (8005618 <xTaskIncrementTick+0x154>)
 8005526:	6013      	str	r3, [r2, #0]
 8005528:	f000 fac4 	bl	8005ab4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800552c:	4b3b      	ldr	r3, [pc, #236]	; (800561c <xTaskIncrementTick+0x158>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	429a      	cmp	r2, r3
 8005534:	d349      	bcc.n	80055ca <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005536:	4b36      	ldr	r3, [pc, #216]	; (8005610 <xTaskIncrementTick+0x14c>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d104      	bne.n	800554a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005540:	4b36      	ldr	r3, [pc, #216]	; (800561c <xTaskIncrementTick+0x158>)
 8005542:	f04f 32ff 	mov.w	r2, #4294967295
 8005546:	601a      	str	r2, [r3, #0]
					break;
 8005548:	e03f      	b.n	80055ca <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800554a:	4b31      	ldr	r3, [pc, #196]	; (8005610 <xTaskIncrementTick+0x14c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	429a      	cmp	r2, r3
 8005560:	d203      	bcs.n	800556a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005562:	4a2e      	ldr	r2, [pc, #184]	; (800561c <xTaskIncrementTick+0x158>)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005568:	e02f      	b.n	80055ca <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	3304      	adds	r3, #4
 800556e:	4618      	mov	r0, r3
 8005570:	f7fe fec8 	bl	8004304 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005578:	2b00      	cmp	r3, #0
 800557a:	d004      	beq.n	8005586 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	3318      	adds	r3, #24
 8005580:	4618      	mov	r0, r3
 8005582:	f7fe febf 	bl	8004304 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800558a:	4b25      	ldr	r3, [pc, #148]	; (8005620 <xTaskIncrementTick+0x15c>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	429a      	cmp	r2, r3
 8005590:	d903      	bls.n	800559a <xTaskIncrementTick+0xd6>
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005596:	4a22      	ldr	r2, [pc, #136]	; (8005620 <xTaskIncrementTick+0x15c>)
 8005598:	6013      	str	r3, [r2, #0]
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800559e:	4613      	mov	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	4a1f      	ldr	r2, [pc, #124]	; (8005624 <xTaskIncrementTick+0x160>)
 80055a8:	441a      	add	r2, r3
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	3304      	adds	r3, #4
 80055ae:	4619      	mov	r1, r3
 80055b0:	4610      	mov	r0, r2
 80055b2:	f7fe fe4a 	bl	800424a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ba:	4b1b      	ldr	r3, [pc, #108]	; (8005628 <xTaskIncrementTick+0x164>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d3b8      	bcc.n	8005536 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80055c4:	2301      	movs	r3, #1
 80055c6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055c8:	e7b5      	b.n	8005536 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80055ca:	4b17      	ldr	r3, [pc, #92]	; (8005628 <xTaskIncrementTick+0x164>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d0:	4914      	ldr	r1, [pc, #80]	; (8005624 <xTaskIncrementTick+0x160>)
 80055d2:	4613      	mov	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	4413      	add	r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	440b      	add	r3, r1
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d907      	bls.n	80055f2 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80055e2:	2301      	movs	r3, #1
 80055e4:	617b      	str	r3, [r7, #20]
 80055e6:	e004      	b.n	80055f2 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80055e8:	4b10      	ldr	r3, [pc, #64]	; (800562c <xTaskIncrementTick+0x168>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	3301      	adds	r3, #1
 80055ee:	4a0f      	ldr	r2, [pc, #60]	; (800562c <xTaskIncrementTick+0x168>)
 80055f0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80055f2:	4b0f      	ldr	r3, [pc, #60]	; (8005630 <xTaskIncrementTick+0x16c>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80055fa:	2301      	movs	r3, #1
 80055fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80055fe:	697b      	ldr	r3, [r7, #20]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3718      	adds	r7, #24
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	20000bf4 	.word	0x20000bf4
 800560c:	20000bd0 	.word	0x20000bd0
 8005610:	20000b84 	.word	0x20000b84
 8005614:	20000b88 	.word	0x20000b88
 8005618:	20000be4 	.word	0x20000be4
 800561c:	20000bec 	.word	0x20000bec
 8005620:	20000bd4 	.word	0x20000bd4
 8005624:	200006fc 	.word	0x200006fc
 8005628:	200006f8 	.word	0x200006f8
 800562c:	20000bdc 	.word	0x20000bdc
 8005630:	20000be0 	.word	0x20000be0

08005634 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800563a:	4b27      	ldr	r3, [pc, #156]	; (80056d8 <vTaskSwitchContext+0xa4>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005642:	4b26      	ldr	r3, [pc, #152]	; (80056dc <vTaskSwitchContext+0xa8>)
 8005644:	2201      	movs	r2, #1
 8005646:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005648:	e040      	b.n	80056cc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800564a:	4b24      	ldr	r3, [pc, #144]	; (80056dc <vTaskSwitchContext+0xa8>)
 800564c:	2200      	movs	r2, #0
 800564e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005650:	4b23      	ldr	r3, [pc, #140]	; (80056e0 <vTaskSwitchContext+0xac>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	60fb      	str	r3, [r7, #12]
 8005656:	e00f      	b.n	8005678 <vTaskSwitchContext+0x44>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d109      	bne.n	8005672 <vTaskSwitchContext+0x3e>
 800565e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005662:	f383 8811 	msr	BASEPRI, r3
 8005666:	f3bf 8f6f 	isb	sy
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	607b      	str	r3, [r7, #4]
 8005670:	e7fe      	b.n	8005670 <vTaskSwitchContext+0x3c>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	3b01      	subs	r3, #1
 8005676:	60fb      	str	r3, [r7, #12]
 8005678:	491a      	ldr	r1, [pc, #104]	; (80056e4 <vTaskSwitchContext+0xb0>)
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	4613      	mov	r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4413      	add	r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	440b      	add	r3, r1
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d0e5      	beq.n	8005658 <vTaskSwitchContext+0x24>
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	4613      	mov	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	4413      	add	r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4a13      	ldr	r2, [pc, #76]	; (80056e4 <vTaskSwitchContext+0xb0>)
 8005698:	4413      	add	r3, r2
 800569a:	60bb      	str	r3, [r7, #8]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	685a      	ldr	r2, [r3, #4]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	605a      	str	r2, [r3, #4]
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	685a      	ldr	r2, [r3, #4]
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	3308      	adds	r3, #8
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d104      	bne.n	80056bc <vTaskSwitchContext+0x88>
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	605a      	str	r2, [r3, #4]
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	4a09      	ldr	r2, [pc, #36]	; (80056e8 <vTaskSwitchContext+0xb4>)
 80056c4:	6013      	str	r3, [r2, #0]
 80056c6:	4a06      	ldr	r2, [pc, #24]	; (80056e0 <vTaskSwitchContext+0xac>)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6013      	str	r3, [r2, #0]
}
 80056cc:	bf00      	nop
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr
 80056d8:	20000bf4 	.word	0x20000bf4
 80056dc:	20000be0 	.word	0x20000be0
 80056e0:	20000bd4 	.word	0x20000bd4
 80056e4:	200006fc 	.word	0x200006fc
 80056e8:	200006f8 	.word	0x200006f8

080056ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d109      	bne.n	8005710 <vTaskPlaceOnEventList+0x24>
 80056fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005700:	f383 8811 	msr	BASEPRI, r3
 8005704:	f3bf 8f6f 	isb	sy
 8005708:	f3bf 8f4f 	dsb	sy
 800570c:	60fb      	str	r3, [r7, #12]
 800570e:	e7fe      	b.n	800570e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005710:	4b07      	ldr	r3, [pc, #28]	; (8005730 <vTaskPlaceOnEventList+0x44>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	3318      	adds	r3, #24
 8005716:	4619      	mov	r1, r3
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f7fe fdba 	bl	8004292 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800571e:	2101      	movs	r1, #1
 8005720:	6838      	ldr	r0, [r7, #0]
 8005722:	f000 fa71 	bl	8005c08 <prvAddCurrentTaskToDelayedList>
}
 8005726:	bf00      	nop
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	200006f8 	.word	0x200006f8

08005734 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d109      	bne.n	800575a <vTaskPlaceOnEventListRestricted+0x26>
 8005746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574a:	f383 8811 	msr	BASEPRI, r3
 800574e:	f3bf 8f6f 	isb	sy
 8005752:	f3bf 8f4f 	dsb	sy
 8005756:	617b      	str	r3, [r7, #20]
 8005758:	e7fe      	b.n	8005758 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800575a:	4b0a      	ldr	r3, [pc, #40]	; (8005784 <vTaskPlaceOnEventListRestricted+0x50>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	3318      	adds	r3, #24
 8005760:	4619      	mov	r1, r3
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f7fe fd71 	bl	800424a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d002      	beq.n	8005774 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800576e:	f04f 33ff 	mov.w	r3, #4294967295
 8005772:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005774:	6879      	ldr	r1, [r7, #4]
 8005776:	68b8      	ldr	r0, [r7, #8]
 8005778:	f000 fa46 	bl	8005c08 <prvAddCurrentTaskToDelayedList>
	}
 800577c:	bf00      	nop
 800577e:	3718      	adds	r7, #24
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	200006f8 	.word	0x200006f8

08005788 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b086      	sub	sp, #24
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d109      	bne.n	80057b2 <xTaskRemoveFromEventList+0x2a>
 800579e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a2:	f383 8811 	msr	BASEPRI, r3
 80057a6:	f3bf 8f6f 	isb	sy
 80057aa:	f3bf 8f4f 	dsb	sy
 80057ae:	60fb      	str	r3, [r7, #12]
 80057b0:	e7fe      	b.n	80057b0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	3318      	adds	r3, #24
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7fe fda4 	bl	8004304 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057bc:	4b1d      	ldr	r3, [pc, #116]	; (8005834 <xTaskRemoveFromEventList+0xac>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d11d      	bne.n	8005800 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	3304      	adds	r3, #4
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7fe fd9b 	bl	8004304 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057d2:	4b19      	ldr	r3, [pc, #100]	; (8005838 <xTaskRemoveFromEventList+0xb0>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d903      	bls.n	80057e2 <xTaskRemoveFromEventList+0x5a>
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057de:	4a16      	ldr	r2, [pc, #88]	; (8005838 <xTaskRemoveFromEventList+0xb0>)
 80057e0:	6013      	str	r3, [r2, #0]
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e6:	4613      	mov	r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4413      	add	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4a13      	ldr	r2, [pc, #76]	; (800583c <xTaskRemoveFromEventList+0xb4>)
 80057f0:	441a      	add	r2, r3
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	3304      	adds	r3, #4
 80057f6:	4619      	mov	r1, r3
 80057f8:	4610      	mov	r0, r2
 80057fa:	f7fe fd26 	bl	800424a <vListInsertEnd>
 80057fe:	e005      	b.n	800580c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	3318      	adds	r3, #24
 8005804:	4619      	mov	r1, r3
 8005806:	480e      	ldr	r0, [pc, #56]	; (8005840 <xTaskRemoveFromEventList+0xb8>)
 8005808:	f7fe fd1f 	bl	800424a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005810:	4b0c      	ldr	r3, [pc, #48]	; (8005844 <xTaskRemoveFromEventList+0xbc>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005816:	429a      	cmp	r2, r3
 8005818:	d905      	bls.n	8005826 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800581a:	2301      	movs	r3, #1
 800581c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800581e:	4b0a      	ldr	r3, [pc, #40]	; (8005848 <xTaskRemoveFromEventList+0xc0>)
 8005820:	2201      	movs	r2, #1
 8005822:	601a      	str	r2, [r3, #0]
 8005824:	e001      	b.n	800582a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005826:	2300      	movs	r3, #0
 8005828:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800582a:	697b      	ldr	r3, [r7, #20]
}
 800582c:	4618      	mov	r0, r3
 800582e:	3718      	adds	r7, #24
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	20000bf4 	.word	0x20000bf4
 8005838:	20000bd4 	.word	0x20000bd4
 800583c:	200006fc 	.word	0x200006fc
 8005840:	20000b8c 	.word	0x20000b8c
 8005844:	200006f8 	.word	0x200006f8
 8005848:	20000be0 	.word	0x20000be0

0800584c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005854:	4b06      	ldr	r3, [pc, #24]	; (8005870 <vTaskInternalSetTimeOutState+0x24>)
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800585c:	4b05      	ldr	r3, [pc, #20]	; (8005874 <vTaskInternalSetTimeOutState+0x28>)
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	605a      	str	r2, [r3, #4]
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	20000be4 	.word	0x20000be4
 8005874:	20000bd0 	.word	0x20000bd0

08005878 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b088      	sub	sp, #32
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d109      	bne.n	800589c <xTaskCheckForTimeOut+0x24>
 8005888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588c:	f383 8811 	msr	BASEPRI, r3
 8005890:	f3bf 8f6f 	isb	sy
 8005894:	f3bf 8f4f 	dsb	sy
 8005898:	613b      	str	r3, [r7, #16]
 800589a:	e7fe      	b.n	800589a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d109      	bne.n	80058b6 <xTaskCheckForTimeOut+0x3e>
 80058a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a6:	f383 8811 	msr	BASEPRI, r3
 80058aa:	f3bf 8f6f 	isb	sy
 80058ae:	f3bf 8f4f 	dsb	sy
 80058b2:	60fb      	str	r3, [r7, #12]
 80058b4:	e7fe      	b.n	80058b4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80058b6:	f000 fe69 	bl	800658c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80058ba:	4b1d      	ldr	r3, [pc, #116]	; (8005930 <xTaskCheckForTimeOut+0xb8>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d2:	d102      	bne.n	80058da <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80058d4:	2300      	movs	r3, #0
 80058d6:	61fb      	str	r3, [r7, #28]
 80058d8:	e023      	b.n	8005922 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	4b15      	ldr	r3, [pc, #84]	; (8005934 <xTaskCheckForTimeOut+0xbc>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d007      	beq.n	80058f6 <xTaskCheckForTimeOut+0x7e>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	69ba      	ldr	r2, [r7, #24]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d302      	bcc.n	80058f6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80058f0:	2301      	movs	r3, #1
 80058f2:	61fb      	str	r3, [r7, #28]
 80058f4:	e015      	b.n	8005922 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d20b      	bcs.n	8005918 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	1ad2      	subs	r2, r2, r3
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f7ff ff9d 	bl	800584c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005912:	2300      	movs	r3, #0
 8005914:	61fb      	str	r3, [r7, #28]
 8005916:	e004      	b.n	8005922 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	2200      	movs	r2, #0
 800591c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800591e:	2301      	movs	r3, #1
 8005920:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005922:	f000 fe61 	bl	80065e8 <vPortExitCritical>

	return xReturn;
 8005926:	69fb      	ldr	r3, [r7, #28]
}
 8005928:	4618      	mov	r0, r3
 800592a:	3720      	adds	r7, #32
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	20000bd0 	.word	0x20000bd0
 8005934:	20000be4 	.word	0x20000be4

08005938 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005938:	b480      	push	{r7}
 800593a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800593c:	4b03      	ldr	r3, [pc, #12]	; (800594c <vTaskMissedYield+0x14>)
 800593e:	2201      	movs	r2, #1
 8005940:	601a      	str	r2, [r3, #0]
}
 8005942:	bf00      	nop
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	20000be0 	.word	0x20000be0

08005950 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005958:	f000 f852 	bl	8005a00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800595c:	4b06      	ldr	r3, [pc, #24]	; (8005978 <prvIdleTask+0x28>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d9f9      	bls.n	8005958 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005964:	4b05      	ldr	r3, [pc, #20]	; (800597c <prvIdleTask+0x2c>)
 8005966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800596a:	601a      	str	r2, [r3, #0]
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005974:	e7f0      	b.n	8005958 <prvIdleTask+0x8>
 8005976:	bf00      	nop
 8005978:	200006fc 	.word	0x200006fc
 800597c:	e000ed04 	.word	0xe000ed04

08005980 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005986:	2300      	movs	r3, #0
 8005988:	607b      	str	r3, [r7, #4]
 800598a:	e00c      	b.n	80059a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	4613      	mov	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	4413      	add	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4a12      	ldr	r2, [pc, #72]	; (80059e0 <prvInitialiseTaskLists+0x60>)
 8005998:	4413      	add	r3, r2
 800599a:	4618      	mov	r0, r3
 800599c:	f7fe fc28 	bl	80041f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	3301      	adds	r3, #1
 80059a4:	607b      	str	r3, [r7, #4]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b37      	cmp	r3, #55	; 0x37
 80059aa:	d9ef      	bls.n	800598c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80059ac:	480d      	ldr	r0, [pc, #52]	; (80059e4 <prvInitialiseTaskLists+0x64>)
 80059ae:	f7fe fc1f 	bl	80041f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80059b2:	480d      	ldr	r0, [pc, #52]	; (80059e8 <prvInitialiseTaskLists+0x68>)
 80059b4:	f7fe fc1c 	bl	80041f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80059b8:	480c      	ldr	r0, [pc, #48]	; (80059ec <prvInitialiseTaskLists+0x6c>)
 80059ba:	f7fe fc19 	bl	80041f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80059be:	480c      	ldr	r0, [pc, #48]	; (80059f0 <prvInitialiseTaskLists+0x70>)
 80059c0:	f7fe fc16 	bl	80041f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80059c4:	480b      	ldr	r0, [pc, #44]	; (80059f4 <prvInitialiseTaskLists+0x74>)
 80059c6:	f7fe fc13 	bl	80041f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80059ca:	4b0b      	ldr	r3, [pc, #44]	; (80059f8 <prvInitialiseTaskLists+0x78>)
 80059cc:	4a05      	ldr	r2, [pc, #20]	; (80059e4 <prvInitialiseTaskLists+0x64>)
 80059ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80059d0:	4b0a      	ldr	r3, [pc, #40]	; (80059fc <prvInitialiseTaskLists+0x7c>)
 80059d2:	4a05      	ldr	r2, [pc, #20]	; (80059e8 <prvInitialiseTaskLists+0x68>)
 80059d4:	601a      	str	r2, [r3, #0]
}
 80059d6:	bf00      	nop
 80059d8:	3708      	adds	r7, #8
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	200006fc 	.word	0x200006fc
 80059e4:	20000b5c 	.word	0x20000b5c
 80059e8:	20000b70 	.word	0x20000b70
 80059ec:	20000b8c 	.word	0x20000b8c
 80059f0:	20000ba0 	.word	0x20000ba0
 80059f4:	20000bb8 	.word	0x20000bb8
 80059f8:	20000b84 	.word	0x20000b84
 80059fc:	20000b88 	.word	0x20000b88

08005a00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a06:	e019      	b.n	8005a3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a08:	f000 fdc0 	bl	800658c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a0c:	4b0f      	ldr	r3, [pc, #60]	; (8005a4c <prvCheckTasksWaitingTermination+0x4c>)
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	3304      	adds	r3, #4
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7fe fc73 	bl	8004304 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a1e:	4b0c      	ldr	r3, [pc, #48]	; (8005a50 <prvCheckTasksWaitingTermination+0x50>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	3b01      	subs	r3, #1
 8005a24:	4a0a      	ldr	r2, [pc, #40]	; (8005a50 <prvCheckTasksWaitingTermination+0x50>)
 8005a26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a28:	4b0a      	ldr	r3, [pc, #40]	; (8005a54 <prvCheckTasksWaitingTermination+0x54>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	4a09      	ldr	r2, [pc, #36]	; (8005a54 <prvCheckTasksWaitingTermination+0x54>)
 8005a30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a32:	f000 fdd9 	bl	80065e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f80e 	bl	8005a58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a3c:	4b05      	ldr	r3, [pc, #20]	; (8005a54 <prvCheckTasksWaitingTermination+0x54>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1e1      	bne.n	8005a08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a44:	bf00      	nop
 8005a46:	3708      	adds	r7, #8
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	20000ba0 	.word	0x20000ba0
 8005a50:	20000bcc 	.word	0x20000bcc
 8005a54:	20000bb4 	.word	0x20000bb4

08005a58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d108      	bne.n	8005a7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 ff68 	bl	8006944 <vPortFree>
				vPortFree( pxTCB );
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 ff65 	bl	8006944 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a7a:	e017      	b.n	8005aac <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d103      	bne.n	8005a8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 ff5c 	bl	8006944 <vPortFree>
	}
 8005a8c:	e00e      	b.n	8005aac <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d009      	beq.n	8005aac <prvDeleteTCB+0x54>
 8005a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9c:	f383 8811 	msr	BASEPRI, r3
 8005aa0:	f3bf 8f6f 	isb	sy
 8005aa4:	f3bf 8f4f 	dsb	sy
 8005aa8:	60fb      	str	r3, [r7, #12]
 8005aaa:	e7fe      	b.n	8005aaa <prvDeleteTCB+0x52>
	}
 8005aac:	bf00      	nop
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005aba:	4b0c      	ldr	r3, [pc, #48]	; (8005aec <prvResetNextTaskUnblockTime+0x38>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d104      	bne.n	8005ace <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ac4:	4b0a      	ldr	r3, [pc, #40]	; (8005af0 <prvResetNextTaskUnblockTime+0x3c>)
 8005ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8005aca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005acc:	e008      	b.n	8005ae0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ace:	4b07      	ldr	r3, [pc, #28]	; (8005aec <prvResetNextTaskUnblockTime+0x38>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	4a04      	ldr	r2, [pc, #16]	; (8005af0 <prvResetNextTaskUnblockTime+0x3c>)
 8005ade:	6013      	str	r3, [r2, #0]
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	20000b84 	.word	0x20000b84
 8005af0:	20000bec 	.word	0x20000bec

08005af4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005afa:	4b0b      	ldr	r3, [pc, #44]	; (8005b28 <xTaskGetSchedulerState+0x34>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d102      	bne.n	8005b08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b02:	2301      	movs	r3, #1
 8005b04:	607b      	str	r3, [r7, #4]
 8005b06:	e008      	b.n	8005b1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b08:	4b08      	ldr	r3, [pc, #32]	; (8005b2c <xTaskGetSchedulerState+0x38>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d102      	bne.n	8005b16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005b10:	2302      	movs	r3, #2
 8005b12:	607b      	str	r3, [r7, #4]
 8005b14:	e001      	b.n	8005b1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b16:	2300      	movs	r3, #0
 8005b18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005b1a:	687b      	ldr	r3, [r7, #4]
	}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr
 8005b28:	20000bd8 	.word	0x20000bd8
 8005b2c:	20000bf4 	.word	0x20000bf4

08005b30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d054      	beq.n	8005bf0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005b46:	4b2d      	ldr	r3, [pc, #180]	; (8005bfc <xTaskPriorityDisinherit+0xcc>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d009      	beq.n	8005b64 <xTaskPriorityDisinherit+0x34>
 8005b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	60fb      	str	r3, [r7, #12]
 8005b62:	e7fe      	b.n	8005b62 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d109      	bne.n	8005b80 <xTaskPriorityDisinherit+0x50>
 8005b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b70:	f383 8811 	msr	BASEPRI, r3
 8005b74:	f3bf 8f6f 	isb	sy
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	60bb      	str	r3, [r7, #8]
 8005b7e:	e7fe      	b.n	8005b7e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b84:	1e5a      	subs	r2, r3, #1
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d02c      	beq.n	8005bf0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d128      	bne.n	8005bf0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	3304      	adds	r3, #4
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7fe fbae 	bl	8004304 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc0:	4b0f      	ldr	r3, [pc, #60]	; (8005c00 <xTaskPriorityDisinherit+0xd0>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d903      	bls.n	8005bd0 <xTaskPriorityDisinherit+0xa0>
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bcc:	4a0c      	ldr	r2, [pc, #48]	; (8005c00 <xTaskPriorityDisinherit+0xd0>)
 8005bce:	6013      	str	r3, [r2, #0]
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	4413      	add	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	4a09      	ldr	r2, [pc, #36]	; (8005c04 <xTaskPriorityDisinherit+0xd4>)
 8005bde:	441a      	add	r2, r3
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	3304      	adds	r3, #4
 8005be4:	4619      	mov	r1, r3
 8005be6:	4610      	mov	r0, r2
 8005be8:	f7fe fb2f 	bl	800424a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005bec:	2301      	movs	r3, #1
 8005bee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005bf0:	697b      	ldr	r3, [r7, #20]
	}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3718      	adds	r7, #24
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	200006f8 	.word	0x200006f8
 8005c00:	20000bd4 	.word	0x20000bd4
 8005c04:	200006fc 	.word	0x200006fc

08005c08 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c12:	4b21      	ldr	r3, [pc, #132]	; (8005c98 <prvAddCurrentTaskToDelayedList+0x90>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c18:	4b20      	ldr	r3, [pc, #128]	; (8005c9c <prvAddCurrentTaskToDelayedList+0x94>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	3304      	adds	r3, #4
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fe fb70 	bl	8004304 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c2a:	d10a      	bne.n	8005c42 <prvAddCurrentTaskToDelayedList+0x3a>
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d007      	beq.n	8005c42 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c32:	4b1a      	ldr	r3, [pc, #104]	; (8005c9c <prvAddCurrentTaskToDelayedList+0x94>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	3304      	adds	r3, #4
 8005c38:	4619      	mov	r1, r3
 8005c3a:	4819      	ldr	r0, [pc, #100]	; (8005ca0 <prvAddCurrentTaskToDelayedList+0x98>)
 8005c3c:	f7fe fb05 	bl	800424a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c40:	e026      	b.n	8005c90 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4413      	add	r3, r2
 8005c48:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c4a:	4b14      	ldr	r3, [pc, #80]	; (8005c9c <prvAddCurrentTaskToDelayedList+0x94>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d209      	bcs.n	8005c6e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c5a:	4b12      	ldr	r3, [pc, #72]	; (8005ca4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	4b0f      	ldr	r3, [pc, #60]	; (8005c9c <prvAddCurrentTaskToDelayedList+0x94>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	3304      	adds	r3, #4
 8005c64:	4619      	mov	r1, r3
 8005c66:	4610      	mov	r0, r2
 8005c68:	f7fe fb13 	bl	8004292 <vListInsert>
}
 8005c6c:	e010      	b.n	8005c90 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c6e:	4b0e      	ldr	r3, [pc, #56]	; (8005ca8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	4b0a      	ldr	r3, [pc, #40]	; (8005c9c <prvAddCurrentTaskToDelayedList+0x94>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	3304      	adds	r3, #4
 8005c78:	4619      	mov	r1, r3
 8005c7a:	4610      	mov	r0, r2
 8005c7c:	f7fe fb09 	bl	8004292 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c80:	4b0a      	ldr	r3, [pc, #40]	; (8005cac <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d202      	bcs.n	8005c90 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005c8a:	4a08      	ldr	r2, [pc, #32]	; (8005cac <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	6013      	str	r3, [r2, #0]
}
 8005c90:	bf00      	nop
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	20000bd0 	.word	0x20000bd0
 8005c9c:	200006f8 	.word	0x200006f8
 8005ca0:	20000bb8 	.word	0x20000bb8
 8005ca4:	20000b88 	.word	0x20000b88
 8005ca8:	20000b84 	.word	0x20000b84
 8005cac:	20000bec 	.word	0x20000bec

08005cb0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b08a      	sub	sp, #40	; 0x28
 8005cb4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005cba:	f000 faff 	bl	80062bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005cbe:	4b1c      	ldr	r3, [pc, #112]	; (8005d30 <xTimerCreateTimerTask+0x80>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d021      	beq.n	8005d0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005cce:	1d3a      	adds	r2, r7, #4
 8005cd0:	f107 0108 	add.w	r1, r7, #8
 8005cd4:	f107 030c 	add.w	r3, r7, #12
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7fe fa6f 	bl	80041bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005cde:	6879      	ldr	r1, [r7, #4]
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	9202      	str	r2, [sp, #8]
 8005ce6:	9301      	str	r3, [sp, #4]
 8005ce8:	2302      	movs	r3, #2
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	2300      	movs	r3, #0
 8005cee:	460a      	mov	r2, r1
 8005cf0:	4910      	ldr	r1, [pc, #64]	; (8005d34 <xTimerCreateTimerTask+0x84>)
 8005cf2:	4811      	ldr	r0, [pc, #68]	; (8005d38 <xTimerCreateTimerTask+0x88>)
 8005cf4:	f7ff f8f6 	bl	8004ee4 <xTaskCreateStatic>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	4b10      	ldr	r3, [pc, #64]	; (8005d3c <xTimerCreateTimerTask+0x8c>)
 8005cfc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005cfe:	4b0f      	ldr	r3, [pc, #60]	; (8005d3c <xTimerCreateTimerTask+0x8c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d001      	beq.n	8005d0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005d06:	2301      	movs	r3, #1
 8005d08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d109      	bne.n	8005d24 <xTimerCreateTimerTask+0x74>
 8005d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d14:	f383 8811 	msr	BASEPRI, r3
 8005d18:	f3bf 8f6f 	isb	sy
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	613b      	str	r3, [r7, #16]
 8005d22:	e7fe      	b.n	8005d22 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005d24:	697b      	ldr	r3, [r7, #20]
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3718      	adds	r7, #24
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	20000c28 	.word	0x20000c28
 8005d34:	08006c24 	.word	0x08006c24
 8005d38:	08005e71 	.word	0x08005e71
 8005d3c:	20000c2c 	.word	0x20000c2c

08005d40 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b08a      	sub	sp, #40	; 0x28
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
 8005d4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d109      	bne.n	8005d6c <xTimerGenericCommand+0x2c>
 8005d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5c:	f383 8811 	msr	BASEPRI, r3
 8005d60:	f3bf 8f6f 	isb	sy
 8005d64:	f3bf 8f4f 	dsb	sy
 8005d68:	623b      	str	r3, [r7, #32]
 8005d6a:	e7fe      	b.n	8005d6a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005d6c:	4b19      	ldr	r3, [pc, #100]	; (8005dd4 <xTimerGenericCommand+0x94>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d02a      	beq.n	8005dca <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	2b05      	cmp	r3, #5
 8005d84:	dc18      	bgt.n	8005db8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005d86:	f7ff feb5 	bl	8005af4 <xTaskGetSchedulerState>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d109      	bne.n	8005da4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005d90:	4b10      	ldr	r3, [pc, #64]	; (8005dd4 <xTimerGenericCommand+0x94>)
 8005d92:	6818      	ldr	r0, [r3, #0]
 8005d94:	f107 0110 	add.w	r1, r7, #16
 8005d98:	2300      	movs	r3, #0
 8005d9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d9c:	f7fe fc80 	bl	80046a0 <xQueueGenericSend>
 8005da0:	6278      	str	r0, [r7, #36]	; 0x24
 8005da2:	e012      	b.n	8005dca <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005da4:	4b0b      	ldr	r3, [pc, #44]	; (8005dd4 <xTimerGenericCommand+0x94>)
 8005da6:	6818      	ldr	r0, [r3, #0]
 8005da8:	f107 0110 	add.w	r1, r7, #16
 8005dac:	2300      	movs	r3, #0
 8005dae:	2200      	movs	r2, #0
 8005db0:	f7fe fc76 	bl	80046a0 <xQueueGenericSend>
 8005db4:	6278      	str	r0, [r7, #36]	; 0x24
 8005db6:	e008      	b.n	8005dca <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005db8:	4b06      	ldr	r3, [pc, #24]	; (8005dd4 <xTimerGenericCommand+0x94>)
 8005dba:	6818      	ldr	r0, [r3, #0]
 8005dbc:	f107 0110 	add.w	r1, r7, #16
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	683a      	ldr	r2, [r7, #0]
 8005dc4:	f7fe fd66 	bl	8004894 <xQueueGenericSendFromISR>
 8005dc8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3728      	adds	r7, #40	; 0x28
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	20000c28 	.word	0x20000c28

08005dd8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b088      	sub	sp, #32
 8005ddc:	af02      	add	r7, sp, #8
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005de2:	4b22      	ldr	r3, [pc, #136]	; (8005e6c <prvProcessExpiredTimer+0x94>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	3304      	adds	r3, #4
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7fe fa87 	bl	8004304 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dfc:	f003 0304 	and.w	r3, r3, #4
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d021      	beq.n	8005e48 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	699a      	ldr	r2, [r3, #24]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	18d1      	adds	r1, r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	683a      	ldr	r2, [r7, #0]
 8005e10:	6978      	ldr	r0, [r7, #20]
 8005e12:	f000 f8d1 	bl	8005fb8 <prvInsertTimerInActiveList>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d01e      	beq.n	8005e5a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	2300      	movs	r3, #0
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	2100      	movs	r1, #0
 8005e26:	6978      	ldr	r0, [r7, #20]
 8005e28:	f7ff ff8a 	bl	8005d40 <xTimerGenericCommand>
 8005e2c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d112      	bne.n	8005e5a <prvProcessExpiredTimer+0x82>
 8005e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e38:	f383 8811 	msr	BASEPRI, r3
 8005e3c:	f3bf 8f6f 	isb	sy
 8005e40:	f3bf 8f4f 	dsb	sy
 8005e44:	60fb      	str	r3, [r7, #12]
 8005e46:	e7fe      	b.n	8005e46 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e4e:	f023 0301 	bic.w	r3, r3, #1
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	6978      	ldr	r0, [r7, #20]
 8005e60:	4798      	blx	r3
}
 8005e62:	bf00      	nop
 8005e64:	3718      	adds	r7, #24
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	20000c20 	.word	0x20000c20

08005e70 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e78:	f107 0308 	add.w	r3, r7, #8
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 f857 	bl	8005f30 <prvGetNextExpireTime>
 8005e82:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	4619      	mov	r1, r3
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 f803 	bl	8005e94 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005e8e:	f000 f8d5 	bl	800603c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e92:	e7f1      	b.n	8005e78 <prvTimerTask+0x8>

08005e94 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005e9e:	f7ff fa57 	bl	8005350 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005ea2:	f107 0308 	add.w	r3, r7, #8
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f000 f866 	bl	8005f78 <prvSampleTimeNow>
 8005eac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d130      	bne.n	8005f16 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10a      	bne.n	8005ed0 <prvProcessTimerOrBlockTask+0x3c>
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d806      	bhi.n	8005ed0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005ec2:	f7ff fa53 	bl	800536c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005ec6:	68f9      	ldr	r1, [r7, #12]
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f7ff ff85 	bl	8005dd8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005ece:	e024      	b.n	8005f1a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d008      	beq.n	8005ee8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005ed6:	4b13      	ldr	r3, [pc, #76]	; (8005f24 <prvProcessTimerOrBlockTask+0x90>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <prvProcessTimerOrBlockTask+0x50>
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e000      	b.n	8005ee6 <prvProcessTimerOrBlockTask+0x52>
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005ee8:	4b0f      	ldr	r3, [pc, #60]	; (8005f28 <prvProcessTimerOrBlockTask+0x94>)
 8005eea:	6818      	ldr	r0, [r3, #0]
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	683a      	ldr	r2, [r7, #0]
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	f7fe ffc1 	bl	8004e7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005efa:	f7ff fa37 	bl	800536c <xTaskResumeAll>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d10a      	bne.n	8005f1a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005f04:	4b09      	ldr	r3, [pc, #36]	; (8005f2c <prvProcessTimerOrBlockTask+0x98>)
 8005f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f0a:	601a      	str	r2, [r3, #0]
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	f3bf 8f6f 	isb	sy
}
 8005f14:	e001      	b.n	8005f1a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005f16:	f7ff fa29 	bl	800536c <xTaskResumeAll>
}
 8005f1a:	bf00      	nop
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	20000c24 	.word	0x20000c24
 8005f28:	20000c28 	.word	0x20000c28
 8005f2c:	e000ed04 	.word	0xe000ed04

08005f30 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f38:	4b0e      	ldr	r3, [pc, #56]	; (8005f74 <prvGetNextExpireTime+0x44>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <prvGetNextExpireTime+0x16>
 8005f42:	2201      	movs	r2, #1
 8005f44:	e000      	b.n	8005f48 <prvGetNextExpireTime+0x18>
 8005f46:	2200      	movs	r2, #0
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d105      	bne.n	8005f60 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f54:	4b07      	ldr	r3, [pc, #28]	; (8005f74 <prvGetNextExpireTime+0x44>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	60fb      	str	r3, [r7, #12]
 8005f5e:	e001      	b.n	8005f64 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005f60:	2300      	movs	r3, #0
 8005f62:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005f64:	68fb      	ldr	r3, [r7, #12]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3714      	adds	r7, #20
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	20000c20 	.word	0x20000c20

08005f78 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005f80:	f7ff fa90 	bl	80054a4 <xTaskGetTickCount>
 8005f84:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005f86:	4b0b      	ldr	r3, [pc, #44]	; (8005fb4 <prvSampleTimeNow+0x3c>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d205      	bcs.n	8005f9c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005f90:	f000 f930 	bl	80061f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	601a      	str	r2, [r3, #0]
 8005f9a:	e002      	b.n	8005fa2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005fa2:	4a04      	ldr	r2, [pc, #16]	; (8005fb4 <prvSampleTimeNow+0x3c>)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	20000c30 	.word	0x20000c30

08005fb8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b086      	sub	sp, #24
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
 8005fc4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d812      	bhi.n	8006004 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	1ad2      	subs	r2, r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	699b      	ldr	r3, [r3, #24]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d302      	bcc.n	8005ff2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005fec:	2301      	movs	r3, #1
 8005fee:	617b      	str	r3, [r7, #20]
 8005ff0:	e01b      	b.n	800602a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005ff2:	4b10      	ldr	r3, [pc, #64]	; (8006034 <prvInsertTimerInActiveList+0x7c>)
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	3304      	adds	r3, #4
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	4610      	mov	r0, r2
 8005ffe:	f7fe f948 	bl	8004292 <vListInsert>
 8006002:	e012      	b.n	800602a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	429a      	cmp	r2, r3
 800600a:	d206      	bcs.n	800601a <prvInsertTimerInActiveList+0x62>
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	429a      	cmp	r2, r3
 8006012:	d302      	bcc.n	800601a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006014:	2301      	movs	r3, #1
 8006016:	617b      	str	r3, [r7, #20]
 8006018:	e007      	b.n	800602a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800601a:	4b07      	ldr	r3, [pc, #28]	; (8006038 <prvInsertTimerInActiveList+0x80>)
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	3304      	adds	r3, #4
 8006022:	4619      	mov	r1, r3
 8006024:	4610      	mov	r0, r2
 8006026:	f7fe f934 	bl	8004292 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800602a:	697b      	ldr	r3, [r7, #20]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3718      	adds	r7, #24
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	20000c24 	.word	0x20000c24
 8006038:	20000c20 	.word	0x20000c20

0800603c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b08e      	sub	sp, #56	; 0x38
 8006040:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006042:	e0c6      	b.n	80061d2 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	da17      	bge.n	800607a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800604a:	1d3b      	adds	r3, r7, #4
 800604c:	3304      	adds	r3, #4
 800604e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006052:	2b00      	cmp	r3, #0
 8006054:	d109      	bne.n	800606a <prvProcessReceivedCommands+0x2e>
 8006056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605a:	f383 8811 	msr	BASEPRI, r3
 800605e:	f3bf 8f6f 	isb	sy
 8006062:	f3bf 8f4f 	dsb	sy
 8006066:	61fb      	str	r3, [r7, #28]
 8006068:	e7fe      	b.n	8006068 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800606a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006070:	6850      	ldr	r0, [r2, #4]
 8006072:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006074:	6892      	ldr	r2, [r2, #8]
 8006076:	4611      	mov	r1, r2
 8006078:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	f2c0 80a7 	blt.w	80061d0 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d004      	beq.n	8006098 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800608e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006090:	3304      	adds	r3, #4
 8006092:	4618      	mov	r0, r3
 8006094:	f7fe f936 	bl	8004304 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006098:	463b      	mov	r3, r7
 800609a:	4618      	mov	r0, r3
 800609c:	f7ff ff6c 	bl	8005f78 <prvSampleTimeNow>
 80060a0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2b09      	cmp	r3, #9
 80060a6:	f200 8094 	bhi.w	80061d2 <prvProcessReceivedCommands+0x196>
 80060aa:	a201      	add	r2, pc, #4	; (adr r2, 80060b0 <prvProcessReceivedCommands+0x74>)
 80060ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b0:	080060d9 	.word	0x080060d9
 80060b4:	080060d9 	.word	0x080060d9
 80060b8:	080060d9 	.word	0x080060d9
 80060bc:	0800614b 	.word	0x0800614b
 80060c0:	0800615f 	.word	0x0800615f
 80060c4:	080061a7 	.word	0x080061a7
 80060c8:	080060d9 	.word	0x080060d9
 80060cc:	080060d9 	.word	0x080060d9
 80060d0:	0800614b 	.word	0x0800614b
 80060d4:	0800615f 	.word	0x0800615f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80060d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060de:	f043 0301 	orr.w	r3, r3, #1
 80060e2:	b2da      	uxtb	r2, r3
 80060e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80060ea:	68ba      	ldr	r2, [r7, #8]
 80060ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	18d1      	adds	r1, r2, r3
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060f8:	f7ff ff5e 	bl	8005fb8 <prvInsertTimerInActiveList>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d067      	beq.n	80061d2 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006108:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800610a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006110:	f003 0304 	and.w	r3, r3, #4
 8006114:	2b00      	cmp	r3, #0
 8006116:	d05c      	beq.n	80061d2 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	441a      	add	r2, r3
 8006120:	2300      	movs	r3, #0
 8006122:	9300      	str	r3, [sp, #0]
 8006124:	2300      	movs	r3, #0
 8006126:	2100      	movs	r1, #0
 8006128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800612a:	f7ff fe09 	bl	8005d40 <xTimerGenericCommand>
 800612e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006130:	6a3b      	ldr	r3, [r7, #32]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d14d      	bne.n	80061d2 <prvProcessReceivedCommands+0x196>
 8006136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613a:	f383 8811 	msr	BASEPRI, r3
 800613e:	f3bf 8f6f 	isb	sy
 8006142:	f3bf 8f4f 	dsb	sy
 8006146:	61bb      	str	r3, [r7, #24]
 8006148:	e7fe      	b.n	8006148 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800614a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006150:	f023 0301 	bic.w	r3, r3, #1
 8006154:	b2da      	uxtb	r2, r3
 8006156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006158:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800615c:	e039      	b.n	80061d2 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800615e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006160:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006164:	f043 0301 	orr.w	r3, r3, #1
 8006168:	b2da      	uxtb	r2, r3
 800616a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006174:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d109      	bne.n	8006192 <prvProcessReceivedCommands+0x156>
 800617e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	617b      	str	r3, [r7, #20]
 8006190:	e7fe      	b.n	8006190 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006194:	699a      	ldr	r2, [r3, #24]
 8006196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006198:	18d1      	adds	r1, r2, r3
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800619e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061a0:	f7ff ff0a 	bl	8005fb8 <prvInsertTimerInActiveList>
					break;
 80061a4:	e015      	b.n	80061d2 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80061a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061ac:	f003 0302 	and.w	r3, r3, #2
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d103      	bne.n	80061bc <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80061b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061b6:	f000 fbc5 	bl	8006944 <vPortFree>
 80061ba:	e00a      	b.n	80061d2 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80061bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061c2:	f023 0301 	bic.w	r3, r3, #1
 80061c6:	b2da      	uxtb	r2, r3
 80061c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80061ce:	e000      	b.n	80061d2 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80061d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061d2:	4b07      	ldr	r3, [pc, #28]	; (80061f0 <prvProcessReceivedCommands+0x1b4>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	1d39      	adds	r1, r7, #4
 80061d8:	2200      	movs	r2, #0
 80061da:	4618      	mov	r0, r3
 80061dc:	f7fe fbee 	bl	80049bc <xQueueReceive>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	f47f af2e 	bne.w	8006044 <prvProcessReceivedCommands+0x8>
	}
}
 80061e8:	bf00      	nop
 80061ea:	3730      	adds	r7, #48	; 0x30
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	20000c28 	.word	0x20000c28

080061f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b088      	sub	sp, #32
 80061f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80061fa:	e047      	b.n	800628c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061fc:	4b2d      	ldr	r3, [pc, #180]	; (80062b4 <prvSwitchTimerLists+0xc0>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006206:	4b2b      	ldr	r3, [pc, #172]	; (80062b4 <prvSwitchTimerLists+0xc0>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	3304      	adds	r3, #4
 8006214:	4618      	mov	r0, r3
 8006216:	f7fe f875 	bl	8004304 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006228:	f003 0304 	and.w	r3, r3, #4
 800622c:	2b00      	cmp	r3, #0
 800622e:	d02d      	beq.n	800628c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	4413      	add	r3, r2
 8006238:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	429a      	cmp	r2, r3
 8006240:	d90e      	bls.n	8006260 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	68ba      	ldr	r2, [r7, #8]
 8006246:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800624e:	4b19      	ldr	r3, [pc, #100]	; (80062b4 <prvSwitchTimerLists+0xc0>)
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	3304      	adds	r3, #4
 8006256:	4619      	mov	r1, r3
 8006258:	4610      	mov	r0, r2
 800625a:	f7fe f81a 	bl	8004292 <vListInsert>
 800625e:	e015      	b.n	800628c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006260:	2300      	movs	r3, #0
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	2300      	movs	r3, #0
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	2100      	movs	r1, #0
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f7ff fd68 	bl	8005d40 <xTimerGenericCommand>
 8006270:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d109      	bne.n	800628c <prvSwitchTimerLists+0x98>
 8006278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627c:	f383 8811 	msr	BASEPRI, r3
 8006280:	f3bf 8f6f 	isb	sy
 8006284:	f3bf 8f4f 	dsb	sy
 8006288:	603b      	str	r3, [r7, #0]
 800628a:	e7fe      	b.n	800628a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800628c:	4b09      	ldr	r3, [pc, #36]	; (80062b4 <prvSwitchTimerLists+0xc0>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1b2      	bne.n	80061fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006296:	4b07      	ldr	r3, [pc, #28]	; (80062b4 <prvSwitchTimerLists+0xc0>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800629c:	4b06      	ldr	r3, [pc, #24]	; (80062b8 <prvSwitchTimerLists+0xc4>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a04      	ldr	r2, [pc, #16]	; (80062b4 <prvSwitchTimerLists+0xc0>)
 80062a2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80062a4:	4a04      	ldr	r2, [pc, #16]	; (80062b8 <prvSwitchTimerLists+0xc4>)
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	6013      	str	r3, [r2, #0]
}
 80062aa:	bf00      	nop
 80062ac:	3718      	adds	r7, #24
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	20000c20 	.word	0x20000c20
 80062b8:	20000c24 	.word	0x20000c24

080062bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80062c2:	f000 f963 	bl	800658c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80062c6:	4b15      	ldr	r3, [pc, #84]	; (800631c <prvCheckForValidListAndQueue+0x60>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d120      	bne.n	8006310 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80062ce:	4814      	ldr	r0, [pc, #80]	; (8006320 <prvCheckForValidListAndQueue+0x64>)
 80062d0:	f7fd ff8e 	bl	80041f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80062d4:	4813      	ldr	r0, [pc, #76]	; (8006324 <prvCheckForValidListAndQueue+0x68>)
 80062d6:	f7fd ff8b 	bl	80041f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80062da:	4b13      	ldr	r3, [pc, #76]	; (8006328 <prvCheckForValidListAndQueue+0x6c>)
 80062dc:	4a10      	ldr	r2, [pc, #64]	; (8006320 <prvCheckForValidListAndQueue+0x64>)
 80062de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80062e0:	4b12      	ldr	r3, [pc, #72]	; (800632c <prvCheckForValidListAndQueue+0x70>)
 80062e2:	4a10      	ldr	r2, [pc, #64]	; (8006324 <prvCheckForValidListAndQueue+0x68>)
 80062e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80062e6:	2300      	movs	r3, #0
 80062e8:	9300      	str	r3, [sp, #0]
 80062ea:	4b11      	ldr	r3, [pc, #68]	; (8006330 <prvCheckForValidListAndQueue+0x74>)
 80062ec:	4a11      	ldr	r2, [pc, #68]	; (8006334 <prvCheckForValidListAndQueue+0x78>)
 80062ee:	2110      	movs	r1, #16
 80062f0:	200a      	movs	r0, #10
 80062f2:	f7fe f899 	bl	8004428 <xQueueGenericCreateStatic>
 80062f6:	4602      	mov	r2, r0
 80062f8:	4b08      	ldr	r3, [pc, #32]	; (800631c <prvCheckForValidListAndQueue+0x60>)
 80062fa:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80062fc:	4b07      	ldr	r3, [pc, #28]	; (800631c <prvCheckForValidListAndQueue+0x60>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d005      	beq.n	8006310 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006304:	4b05      	ldr	r3, [pc, #20]	; (800631c <prvCheckForValidListAndQueue+0x60>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	490b      	ldr	r1, [pc, #44]	; (8006338 <prvCheckForValidListAndQueue+0x7c>)
 800630a:	4618      	mov	r0, r3
 800630c:	f7fe fd64 	bl	8004dd8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006310:	f000 f96a 	bl	80065e8 <vPortExitCritical>
}
 8006314:	bf00      	nop
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	20000c28 	.word	0x20000c28
 8006320:	20000bf8 	.word	0x20000bf8
 8006324:	20000c0c 	.word	0x20000c0c
 8006328:	20000c20 	.word	0x20000c20
 800632c:	20000c24 	.word	0x20000c24
 8006330:	20000cd4 	.word	0x20000cd4
 8006334:	20000c34 	.word	0x20000c34
 8006338:	08006c2c 	.word	0x08006c2c

0800633c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800633c:	b480      	push	{r7}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	3b04      	subs	r3, #4
 800634c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006354:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	3b04      	subs	r3, #4
 800635a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	f023 0201 	bic.w	r2, r3, #1
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	3b04      	subs	r3, #4
 800636a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800636c:	4a0c      	ldr	r2, [pc, #48]	; (80063a0 <pxPortInitialiseStack+0x64>)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	3b14      	subs	r3, #20
 8006376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	3b04      	subs	r3, #4
 8006382:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f06f 0202 	mvn.w	r2, #2
 800638a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	3b20      	subs	r3, #32
 8006390:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006392:	68fb      	ldr	r3, [r7, #12]
}
 8006394:	4618      	mov	r0, r3
 8006396:	3714      	adds	r7, #20
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr
 80063a0:	080063a5 	.word	0x080063a5

080063a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80063aa:	2300      	movs	r3, #0
 80063ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80063ae:	4b11      	ldr	r3, [pc, #68]	; (80063f4 <prvTaskExitError+0x50>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b6:	d009      	beq.n	80063cc <prvTaskExitError+0x28>
 80063b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063bc:	f383 8811 	msr	BASEPRI, r3
 80063c0:	f3bf 8f6f 	isb	sy
 80063c4:	f3bf 8f4f 	dsb	sy
 80063c8:	60fb      	str	r3, [r7, #12]
 80063ca:	e7fe      	b.n	80063ca <prvTaskExitError+0x26>
 80063cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d0:	f383 8811 	msr	BASEPRI, r3
 80063d4:	f3bf 8f6f 	isb	sy
 80063d8:	f3bf 8f4f 	dsb	sy
 80063dc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80063de:	bf00      	nop
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d0fc      	beq.n	80063e0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80063e6:	bf00      	nop
 80063e8:	3714      	adds	r7, #20
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	2000000c 	.word	0x2000000c
	...

08006400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006400:	4b07      	ldr	r3, [pc, #28]	; (8006420 <pxCurrentTCBConst2>)
 8006402:	6819      	ldr	r1, [r3, #0]
 8006404:	6808      	ldr	r0, [r1, #0]
 8006406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800640a:	f380 8809 	msr	PSP, r0
 800640e:	f3bf 8f6f 	isb	sy
 8006412:	f04f 0000 	mov.w	r0, #0
 8006416:	f380 8811 	msr	BASEPRI, r0
 800641a:	4770      	bx	lr
 800641c:	f3af 8000 	nop.w

08006420 <pxCurrentTCBConst2>:
 8006420:	200006f8 	.word	0x200006f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006424:	bf00      	nop
 8006426:	bf00      	nop

08006428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006428:	4808      	ldr	r0, [pc, #32]	; (800644c <prvPortStartFirstTask+0x24>)
 800642a:	6800      	ldr	r0, [r0, #0]
 800642c:	6800      	ldr	r0, [r0, #0]
 800642e:	f380 8808 	msr	MSP, r0
 8006432:	f04f 0000 	mov.w	r0, #0
 8006436:	f380 8814 	msr	CONTROL, r0
 800643a:	b662      	cpsie	i
 800643c:	b661      	cpsie	f
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	f3bf 8f6f 	isb	sy
 8006446:	df00      	svc	0
 8006448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800644a:	bf00      	nop
 800644c:	e000ed08 	.word	0xe000ed08

08006450 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b086      	sub	sp, #24
 8006454:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006456:	4b44      	ldr	r3, [pc, #272]	; (8006568 <xPortStartScheduler+0x118>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a44      	ldr	r2, [pc, #272]	; (800656c <xPortStartScheduler+0x11c>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d109      	bne.n	8006474 <xPortStartScheduler+0x24>
 8006460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006464:	f383 8811 	msr	BASEPRI, r3
 8006468:	f3bf 8f6f 	isb	sy
 800646c:	f3bf 8f4f 	dsb	sy
 8006470:	613b      	str	r3, [r7, #16]
 8006472:	e7fe      	b.n	8006472 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006474:	4b3c      	ldr	r3, [pc, #240]	; (8006568 <xPortStartScheduler+0x118>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a3d      	ldr	r2, [pc, #244]	; (8006570 <xPortStartScheduler+0x120>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d109      	bne.n	8006492 <xPortStartScheduler+0x42>
 800647e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006482:	f383 8811 	msr	BASEPRI, r3
 8006486:	f3bf 8f6f 	isb	sy
 800648a:	f3bf 8f4f 	dsb	sy
 800648e:	60fb      	str	r3, [r7, #12]
 8006490:	e7fe      	b.n	8006490 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006492:	4b38      	ldr	r3, [pc, #224]	; (8006574 <xPortStartScheduler+0x124>)
 8006494:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	b2db      	uxtb	r3, r3
 800649c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	22ff      	movs	r2, #255	; 0xff
 80064a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80064ac:	78fb      	ldrb	r3, [r7, #3]
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80064b4:	b2da      	uxtb	r2, r3
 80064b6:	4b30      	ldr	r3, [pc, #192]	; (8006578 <xPortStartScheduler+0x128>)
 80064b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80064ba:	4b30      	ldr	r3, [pc, #192]	; (800657c <xPortStartScheduler+0x12c>)
 80064bc:	2207      	movs	r2, #7
 80064be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064c0:	e009      	b.n	80064d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80064c2:	4b2e      	ldr	r3, [pc, #184]	; (800657c <xPortStartScheduler+0x12c>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	3b01      	subs	r3, #1
 80064c8:	4a2c      	ldr	r2, [pc, #176]	; (800657c <xPortStartScheduler+0x12c>)
 80064ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80064cc:	78fb      	ldrb	r3, [r7, #3]
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	005b      	lsls	r3, r3, #1
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064d6:	78fb      	ldrb	r3, [r7, #3]
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064de:	2b80      	cmp	r3, #128	; 0x80
 80064e0:	d0ef      	beq.n	80064c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80064e2:	4b26      	ldr	r3, [pc, #152]	; (800657c <xPortStartScheduler+0x12c>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f1c3 0307 	rsb	r3, r3, #7
 80064ea:	2b04      	cmp	r3, #4
 80064ec:	d009      	beq.n	8006502 <xPortStartScheduler+0xb2>
 80064ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f2:	f383 8811 	msr	BASEPRI, r3
 80064f6:	f3bf 8f6f 	isb	sy
 80064fa:	f3bf 8f4f 	dsb	sy
 80064fe:	60bb      	str	r3, [r7, #8]
 8006500:	e7fe      	b.n	8006500 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006502:	4b1e      	ldr	r3, [pc, #120]	; (800657c <xPortStartScheduler+0x12c>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	021b      	lsls	r3, r3, #8
 8006508:	4a1c      	ldr	r2, [pc, #112]	; (800657c <xPortStartScheduler+0x12c>)
 800650a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800650c:	4b1b      	ldr	r3, [pc, #108]	; (800657c <xPortStartScheduler+0x12c>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006514:	4a19      	ldr	r2, [pc, #100]	; (800657c <xPortStartScheduler+0x12c>)
 8006516:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	b2da      	uxtb	r2, r3
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006520:	4b17      	ldr	r3, [pc, #92]	; (8006580 <xPortStartScheduler+0x130>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a16      	ldr	r2, [pc, #88]	; (8006580 <xPortStartScheduler+0x130>)
 8006526:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800652a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800652c:	4b14      	ldr	r3, [pc, #80]	; (8006580 <xPortStartScheduler+0x130>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a13      	ldr	r2, [pc, #76]	; (8006580 <xPortStartScheduler+0x130>)
 8006532:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006536:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006538:	f000 f8d6 	bl	80066e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800653c:	4b11      	ldr	r3, [pc, #68]	; (8006584 <xPortStartScheduler+0x134>)
 800653e:	2200      	movs	r2, #0
 8006540:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006542:	f000 f8f5 	bl	8006730 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006546:	4b10      	ldr	r3, [pc, #64]	; (8006588 <xPortStartScheduler+0x138>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a0f      	ldr	r2, [pc, #60]	; (8006588 <xPortStartScheduler+0x138>)
 800654c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006550:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006552:	f7ff ff69 	bl	8006428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006556:	f7ff f86d 	bl	8005634 <vTaskSwitchContext>
	prvTaskExitError();
 800655a:	f7ff ff23 	bl	80063a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3718      	adds	r7, #24
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	e000ed00 	.word	0xe000ed00
 800656c:	410fc271 	.word	0x410fc271
 8006570:	410fc270 	.word	0x410fc270
 8006574:	e000e400 	.word	0xe000e400
 8006578:	20000d24 	.word	0x20000d24
 800657c:	20000d28 	.word	0x20000d28
 8006580:	e000ed20 	.word	0xe000ed20
 8006584:	2000000c 	.word	0x2000000c
 8006588:	e000ef34 	.word	0xe000ef34

0800658c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006596:	f383 8811 	msr	BASEPRI, r3
 800659a:	f3bf 8f6f 	isb	sy
 800659e:	f3bf 8f4f 	dsb	sy
 80065a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80065a4:	4b0e      	ldr	r3, [pc, #56]	; (80065e0 <vPortEnterCritical+0x54>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	3301      	adds	r3, #1
 80065aa:	4a0d      	ldr	r2, [pc, #52]	; (80065e0 <vPortEnterCritical+0x54>)
 80065ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80065ae:	4b0c      	ldr	r3, [pc, #48]	; (80065e0 <vPortEnterCritical+0x54>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d10e      	bne.n	80065d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80065b6:	4b0b      	ldr	r3, [pc, #44]	; (80065e4 <vPortEnterCritical+0x58>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d009      	beq.n	80065d4 <vPortEnterCritical+0x48>
 80065c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c4:	f383 8811 	msr	BASEPRI, r3
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	603b      	str	r3, [r7, #0]
 80065d2:	e7fe      	b.n	80065d2 <vPortEnterCritical+0x46>
	}
}
 80065d4:	bf00      	nop
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr
 80065e0:	2000000c 	.word	0x2000000c
 80065e4:	e000ed04 	.word	0xe000ed04

080065e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80065ee:	4b11      	ldr	r3, [pc, #68]	; (8006634 <vPortExitCritical+0x4c>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d109      	bne.n	800660a <vPortExitCritical+0x22>
 80065f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fa:	f383 8811 	msr	BASEPRI, r3
 80065fe:	f3bf 8f6f 	isb	sy
 8006602:	f3bf 8f4f 	dsb	sy
 8006606:	607b      	str	r3, [r7, #4]
 8006608:	e7fe      	b.n	8006608 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800660a:	4b0a      	ldr	r3, [pc, #40]	; (8006634 <vPortExitCritical+0x4c>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	3b01      	subs	r3, #1
 8006610:	4a08      	ldr	r2, [pc, #32]	; (8006634 <vPortExitCritical+0x4c>)
 8006612:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006614:	4b07      	ldr	r3, [pc, #28]	; (8006634 <vPortExitCritical+0x4c>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d104      	bne.n	8006626 <vPortExitCritical+0x3e>
 800661c:	2300      	movs	r3, #0
 800661e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006626:	bf00      	nop
 8006628:	370c      	adds	r7, #12
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	2000000c 	.word	0x2000000c
	...

08006640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006640:	f3ef 8009 	mrs	r0, PSP
 8006644:	f3bf 8f6f 	isb	sy
 8006648:	4b15      	ldr	r3, [pc, #84]	; (80066a0 <pxCurrentTCBConst>)
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	f01e 0f10 	tst.w	lr, #16
 8006650:	bf08      	it	eq
 8006652:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006656:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800665a:	6010      	str	r0, [r2, #0]
 800665c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006660:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006664:	f380 8811 	msr	BASEPRI, r0
 8006668:	f3bf 8f4f 	dsb	sy
 800666c:	f3bf 8f6f 	isb	sy
 8006670:	f7fe ffe0 	bl	8005634 <vTaskSwitchContext>
 8006674:	f04f 0000 	mov.w	r0, #0
 8006678:	f380 8811 	msr	BASEPRI, r0
 800667c:	bc09      	pop	{r0, r3}
 800667e:	6819      	ldr	r1, [r3, #0]
 8006680:	6808      	ldr	r0, [r1, #0]
 8006682:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006686:	f01e 0f10 	tst.w	lr, #16
 800668a:	bf08      	it	eq
 800668c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006690:	f380 8809 	msr	PSP, r0
 8006694:	f3bf 8f6f 	isb	sy
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	f3af 8000 	nop.w

080066a0 <pxCurrentTCBConst>:
 80066a0:	200006f8 	.word	0x200006f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80066a4:	bf00      	nop
 80066a6:	bf00      	nop

080066a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
	__asm volatile
 80066ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b2:	f383 8811 	msr	BASEPRI, r3
 80066b6:	f3bf 8f6f 	isb	sy
 80066ba:	f3bf 8f4f 	dsb	sy
 80066be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80066c0:	f7fe ff00 	bl	80054c4 <xTaskIncrementTick>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d003      	beq.n	80066d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80066ca:	4b06      	ldr	r3, [pc, #24]	; (80066e4 <SysTick_Handler+0x3c>)
 80066cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066d0:	601a      	str	r2, [r3, #0]
 80066d2:	2300      	movs	r3, #0
 80066d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80066dc:	bf00      	nop
 80066de:	3708      	adds	r7, #8
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	e000ed04 	.word	0xe000ed04

080066e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80066e8:	b480      	push	{r7}
 80066ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80066ec:	4b0b      	ldr	r3, [pc, #44]	; (800671c <vPortSetupTimerInterrupt+0x34>)
 80066ee:	2200      	movs	r2, #0
 80066f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80066f2:	4b0b      	ldr	r3, [pc, #44]	; (8006720 <vPortSetupTimerInterrupt+0x38>)
 80066f4:	2200      	movs	r2, #0
 80066f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80066f8:	4b0a      	ldr	r3, [pc, #40]	; (8006724 <vPortSetupTimerInterrupt+0x3c>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a0a      	ldr	r2, [pc, #40]	; (8006728 <vPortSetupTimerInterrupt+0x40>)
 80066fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006702:	099b      	lsrs	r3, r3, #6
 8006704:	4a09      	ldr	r2, [pc, #36]	; (800672c <vPortSetupTimerInterrupt+0x44>)
 8006706:	3b01      	subs	r3, #1
 8006708:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800670a:	4b04      	ldr	r3, [pc, #16]	; (800671c <vPortSetupTimerInterrupt+0x34>)
 800670c:	2207      	movs	r2, #7
 800670e:	601a      	str	r2, [r3, #0]
}
 8006710:	bf00      	nop
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	e000e010 	.word	0xe000e010
 8006720:	e000e018 	.word	0xe000e018
 8006724:	20000000 	.word	0x20000000
 8006728:	10624dd3 	.word	0x10624dd3
 800672c:	e000e014 	.word	0xe000e014

08006730 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006730:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006740 <vPortEnableVFP+0x10>
 8006734:	6801      	ldr	r1, [r0, #0]
 8006736:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800673a:	6001      	str	r1, [r0, #0]
 800673c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800673e:	bf00      	nop
 8006740:	e000ed88 	.word	0xe000ed88

08006744 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800674a:	f3ef 8305 	mrs	r3, IPSR
 800674e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2b0f      	cmp	r3, #15
 8006754:	d913      	bls.n	800677e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006756:	4a16      	ldr	r2, [pc, #88]	; (80067b0 <vPortValidateInterruptPriority+0x6c>)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	4413      	add	r3, r2
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006760:	4b14      	ldr	r3, [pc, #80]	; (80067b4 <vPortValidateInterruptPriority+0x70>)
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	7afa      	ldrb	r2, [r7, #11]
 8006766:	429a      	cmp	r2, r3
 8006768:	d209      	bcs.n	800677e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800676a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676e:	f383 8811 	msr	BASEPRI, r3
 8006772:	f3bf 8f6f 	isb	sy
 8006776:	f3bf 8f4f 	dsb	sy
 800677a:	607b      	str	r3, [r7, #4]
 800677c:	e7fe      	b.n	800677c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800677e:	4b0e      	ldr	r3, [pc, #56]	; (80067b8 <vPortValidateInterruptPriority+0x74>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006786:	4b0d      	ldr	r3, [pc, #52]	; (80067bc <vPortValidateInterruptPriority+0x78>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	429a      	cmp	r2, r3
 800678c:	d909      	bls.n	80067a2 <vPortValidateInterruptPriority+0x5e>
 800678e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	603b      	str	r3, [r7, #0]
 80067a0:	e7fe      	b.n	80067a0 <vPortValidateInterruptPriority+0x5c>
	}
 80067a2:	bf00      	nop
 80067a4:	3714      	adds	r7, #20
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	e000e3f0 	.word	0xe000e3f0
 80067b4:	20000d24 	.word	0x20000d24
 80067b8:	e000ed0c 	.word	0xe000ed0c
 80067bc:	20000d28 	.word	0x20000d28

080067c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b08a      	sub	sp, #40	; 0x28
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80067c8:	2300      	movs	r3, #0
 80067ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80067cc:	f7fe fdc0 	bl	8005350 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80067d0:	4b57      	ldr	r3, [pc, #348]	; (8006930 <pvPortMalloc+0x170>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d101      	bne.n	80067dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80067d8:	f000 f90c 	bl	80069f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80067dc:	4b55      	ldr	r3, [pc, #340]	; (8006934 <pvPortMalloc+0x174>)
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4013      	ands	r3, r2
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f040 808c 	bne.w	8006902 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d01c      	beq.n	800682a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80067f0:	2208      	movs	r2, #8
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4413      	add	r3, r2
 80067f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f003 0307 	and.w	r3, r3, #7
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d013      	beq.n	800682a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f023 0307 	bic.w	r3, r3, #7
 8006808:	3308      	adds	r3, #8
 800680a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f003 0307 	and.w	r3, r3, #7
 8006812:	2b00      	cmp	r3, #0
 8006814:	d009      	beq.n	800682a <pvPortMalloc+0x6a>
 8006816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681a:	f383 8811 	msr	BASEPRI, r3
 800681e:	f3bf 8f6f 	isb	sy
 8006822:	f3bf 8f4f 	dsb	sy
 8006826:	617b      	str	r3, [r7, #20]
 8006828:	e7fe      	b.n	8006828 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d068      	beq.n	8006902 <pvPortMalloc+0x142>
 8006830:	4b41      	ldr	r3, [pc, #260]	; (8006938 <pvPortMalloc+0x178>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	429a      	cmp	r2, r3
 8006838:	d863      	bhi.n	8006902 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800683a:	4b40      	ldr	r3, [pc, #256]	; (800693c <pvPortMalloc+0x17c>)
 800683c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800683e:	4b3f      	ldr	r3, [pc, #252]	; (800693c <pvPortMalloc+0x17c>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006844:	e004      	b.n	8006850 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006848:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	429a      	cmp	r2, r3
 8006858:	d903      	bls.n	8006862 <pvPortMalloc+0xa2>
 800685a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1f1      	bne.n	8006846 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006862:	4b33      	ldr	r3, [pc, #204]	; (8006930 <pvPortMalloc+0x170>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006868:	429a      	cmp	r2, r3
 800686a:	d04a      	beq.n	8006902 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800686c:	6a3b      	ldr	r3, [r7, #32]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2208      	movs	r2, #8
 8006872:	4413      	add	r3, r2
 8006874:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	6a3b      	ldr	r3, [r7, #32]
 800687c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800687e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006880:	685a      	ldr	r2, [r3, #4]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	1ad2      	subs	r2, r2, r3
 8006886:	2308      	movs	r3, #8
 8006888:	005b      	lsls	r3, r3, #1
 800688a:	429a      	cmp	r2, r3
 800688c:	d91e      	bls.n	80068cc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800688e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4413      	add	r3, r2
 8006894:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	f003 0307 	and.w	r3, r3, #7
 800689c:	2b00      	cmp	r3, #0
 800689e:	d009      	beq.n	80068b4 <pvPortMalloc+0xf4>
 80068a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a4:	f383 8811 	msr	BASEPRI, r3
 80068a8:	f3bf 8f6f 	isb	sy
 80068ac:	f3bf 8f4f 	dsb	sy
 80068b0:	613b      	str	r3, [r7, #16]
 80068b2:	e7fe      	b.n	80068b2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80068b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b6:	685a      	ldr	r2, [r3, #4]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	1ad2      	subs	r2, r2, r3
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80068c6:	69b8      	ldr	r0, [r7, #24]
 80068c8:	f000 f8f6 	bl	8006ab8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80068cc:	4b1a      	ldr	r3, [pc, #104]	; (8006938 <pvPortMalloc+0x178>)
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	4a18      	ldr	r2, [pc, #96]	; (8006938 <pvPortMalloc+0x178>)
 80068d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80068da:	4b17      	ldr	r3, [pc, #92]	; (8006938 <pvPortMalloc+0x178>)
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	4b18      	ldr	r3, [pc, #96]	; (8006940 <pvPortMalloc+0x180>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d203      	bcs.n	80068ee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80068e6:	4b14      	ldr	r3, [pc, #80]	; (8006938 <pvPortMalloc+0x178>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a15      	ldr	r2, [pc, #84]	; (8006940 <pvPortMalloc+0x180>)
 80068ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80068ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	4b10      	ldr	r3, [pc, #64]	; (8006934 <pvPortMalloc+0x174>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	431a      	orrs	r2, r3
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80068fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fe:	2200      	movs	r2, #0
 8006900:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006902:	f7fe fd33 	bl	800536c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	f003 0307 	and.w	r3, r3, #7
 800690c:	2b00      	cmp	r3, #0
 800690e:	d009      	beq.n	8006924 <pvPortMalloc+0x164>
 8006910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006914:	f383 8811 	msr	BASEPRI, r3
 8006918:	f3bf 8f6f 	isb	sy
 800691c:	f3bf 8f4f 	dsb	sy
 8006920:	60fb      	str	r3, [r7, #12]
 8006922:	e7fe      	b.n	8006922 <pvPortMalloc+0x162>
	return pvReturn;
 8006924:	69fb      	ldr	r3, [r7, #28]
}
 8006926:	4618      	mov	r0, r3
 8006928:	3728      	adds	r7, #40	; 0x28
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	200018ec 	.word	0x200018ec
 8006934:	200018f8 	.word	0x200018f8
 8006938:	200018f0 	.word	0x200018f0
 800693c:	200018e4 	.word	0x200018e4
 8006940:	200018f4 	.word	0x200018f4

08006944 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b086      	sub	sp, #24
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d046      	beq.n	80069e4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006956:	2308      	movs	r3, #8
 8006958:	425b      	negs	r3, r3
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	4413      	add	r3, r2
 800695e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	685a      	ldr	r2, [r3, #4]
 8006968:	4b20      	ldr	r3, [pc, #128]	; (80069ec <vPortFree+0xa8>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4013      	ands	r3, r2
 800696e:	2b00      	cmp	r3, #0
 8006970:	d109      	bne.n	8006986 <vPortFree+0x42>
 8006972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006976:	f383 8811 	msr	BASEPRI, r3
 800697a:	f3bf 8f6f 	isb	sy
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	60fb      	str	r3, [r7, #12]
 8006984:	e7fe      	b.n	8006984 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d009      	beq.n	80069a2 <vPortFree+0x5e>
 800698e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	60bb      	str	r3, [r7, #8]
 80069a0:	e7fe      	b.n	80069a0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	685a      	ldr	r2, [r3, #4]
 80069a6:	4b11      	ldr	r3, [pc, #68]	; (80069ec <vPortFree+0xa8>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4013      	ands	r3, r2
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d019      	beq.n	80069e4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d115      	bne.n	80069e4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	4b0b      	ldr	r3, [pc, #44]	; (80069ec <vPortFree+0xa8>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	43db      	mvns	r3, r3
 80069c2:	401a      	ands	r2, r3
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80069c8:	f7fe fcc2 	bl	8005350 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	685a      	ldr	r2, [r3, #4]
 80069d0:	4b07      	ldr	r3, [pc, #28]	; (80069f0 <vPortFree+0xac>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4413      	add	r3, r2
 80069d6:	4a06      	ldr	r2, [pc, #24]	; (80069f0 <vPortFree+0xac>)
 80069d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80069da:	6938      	ldr	r0, [r7, #16]
 80069dc:	f000 f86c 	bl	8006ab8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80069e0:	f7fe fcc4 	bl	800536c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80069e4:	bf00      	nop
 80069e6:	3718      	adds	r7, #24
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	200018f8 	.word	0x200018f8
 80069f0:	200018f0 	.word	0x200018f0

080069f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80069fa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80069fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a00:	4b27      	ldr	r3, [pc, #156]	; (8006aa0 <prvHeapInit+0xac>)
 8006a02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f003 0307 	and.w	r3, r3, #7
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00c      	beq.n	8006a28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	3307      	adds	r3, #7
 8006a12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f023 0307 	bic.w	r3, r3, #7
 8006a1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	4a1f      	ldr	r2, [pc, #124]	; (8006aa0 <prvHeapInit+0xac>)
 8006a24:	4413      	add	r3, r2
 8006a26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a2c:	4a1d      	ldr	r2, [pc, #116]	; (8006aa4 <prvHeapInit+0xb0>)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a32:	4b1c      	ldr	r3, [pc, #112]	; (8006aa4 <prvHeapInit+0xb0>)
 8006a34:	2200      	movs	r2, #0
 8006a36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	68ba      	ldr	r2, [r7, #8]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006a40:	2208      	movs	r2, #8
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	1a9b      	subs	r3, r3, r2
 8006a46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f023 0307 	bic.w	r3, r3, #7
 8006a4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	4a15      	ldr	r2, [pc, #84]	; (8006aa8 <prvHeapInit+0xb4>)
 8006a54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a56:	4b14      	ldr	r3, [pc, #80]	; (8006aa8 <prvHeapInit+0xb4>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a5e:	4b12      	ldr	r3, [pc, #72]	; (8006aa8 <prvHeapInit+0xb4>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2200      	movs	r2, #0
 8006a64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	1ad2      	subs	r2, r2, r3
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a74:	4b0c      	ldr	r3, [pc, #48]	; (8006aa8 <prvHeapInit+0xb4>)
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	4a0a      	ldr	r2, [pc, #40]	; (8006aac <prvHeapInit+0xb8>)
 8006a82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	4a09      	ldr	r2, [pc, #36]	; (8006ab0 <prvHeapInit+0xbc>)
 8006a8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a8c:	4b09      	ldr	r3, [pc, #36]	; (8006ab4 <prvHeapInit+0xc0>)
 8006a8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006a92:	601a      	str	r2, [r3, #0]
}
 8006a94:	bf00      	nop
 8006a96:	3714      	adds	r7, #20
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr
 8006aa0:	20000d2c 	.word	0x20000d2c
 8006aa4:	200018e4 	.word	0x200018e4
 8006aa8:	200018ec 	.word	0x200018ec
 8006aac:	200018f4 	.word	0x200018f4
 8006ab0:	200018f0 	.word	0x200018f0
 8006ab4:	200018f8 	.word	0x200018f8

08006ab8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ac0:	4b28      	ldr	r3, [pc, #160]	; (8006b64 <prvInsertBlockIntoFreeList+0xac>)
 8006ac2:	60fb      	str	r3, [r7, #12]
 8006ac4:	e002      	b.n	8006acc <prvInsertBlockIntoFreeList+0x14>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	60fb      	str	r3, [r7, #12]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d8f7      	bhi.n	8006ac6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d108      	bne.n	8006afa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	685a      	ldr	r2, [r3, #4]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	441a      	add	r2, r3
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	68ba      	ldr	r2, [r7, #8]
 8006b04:	441a      	add	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d118      	bne.n	8006b40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	4b15      	ldr	r3, [pc, #84]	; (8006b68 <prvInsertBlockIntoFreeList+0xb0>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d00d      	beq.n	8006b36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	685a      	ldr	r2, [r3, #4]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	441a      	add	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	601a      	str	r2, [r3, #0]
 8006b34:	e008      	b.n	8006b48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b36:	4b0c      	ldr	r3, [pc, #48]	; (8006b68 <prvInsertBlockIntoFreeList+0xb0>)
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	601a      	str	r2, [r3, #0]
 8006b3e:	e003      	b.n	8006b48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d002      	beq.n	8006b56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b56:	bf00      	nop
 8006b58:	3714      	adds	r7, #20
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	200018e4 	.word	0x200018e4
 8006b68:	200018ec 	.word	0x200018ec

08006b6c <__libc_init_array>:
 8006b6c:	b570      	push	{r4, r5, r6, lr}
 8006b6e:	4e0d      	ldr	r6, [pc, #52]	; (8006ba4 <__libc_init_array+0x38>)
 8006b70:	4c0d      	ldr	r4, [pc, #52]	; (8006ba8 <__libc_init_array+0x3c>)
 8006b72:	1ba4      	subs	r4, r4, r6
 8006b74:	10a4      	asrs	r4, r4, #2
 8006b76:	2500      	movs	r5, #0
 8006b78:	42a5      	cmp	r5, r4
 8006b7a:	d109      	bne.n	8006b90 <__libc_init_array+0x24>
 8006b7c:	4e0b      	ldr	r6, [pc, #44]	; (8006bac <__libc_init_array+0x40>)
 8006b7e:	4c0c      	ldr	r4, [pc, #48]	; (8006bb0 <__libc_init_array+0x44>)
 8006b80:	f000 f82c 	bl	8006bdc <_init>
 8006b84:	1ba4      	subs	r4, r4, r6
 8006b86:	10a4      	asrs	r4, r4, #2
 8006b88:	2500      	movs	r5, #0
 8006b8a:	42a5      	cmp	r5, r4
 8006b8c:	d105      	bne.n	8006b9a <__libc_init_array+0x2e>
 8006b8e:	bd70      	pop	{r4, r5, r6, pc}
 8006b90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b94:	4798      	blx	r3
 8006b96:	3501      	adds	r5, #1
 8006b98:	e7ee      	b.n	8006b78 <__libc_init_array+0xc>
 8006b9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b9e:	4798      	blx	r3
 8006ba0:	3501      	adds	r5, #1
 8006ba2:	e7f2      	b.n	8006b8a <__libc_init_array+0x1e>
 8006ba4:	08006cd4 	.word	0x08006cd4
 8006ba8:	08006cd4 	.word	0x08006cd4
 8006bac:	08006cd4 	.word	0x08006cd4
 8006bb0:	08006cd8 	.word	0x08006cd8

08006bb4 <memcpy>:
 8006bb4:	b510      	push	{r4, lr}
 8006bb6:	1e43      	subs	r3, r0, #1
 8006bb8:	440a      	add	r2, r1
 8006bba:	4291      	cmp	r1, r2
 8006bbc:	d100      	bne.n	8006bc0 <memcpy+0xc>
 8006bbe:	bd10      	pop	{r4, pc}
 8006bc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bc8:	e7f7      	b.n	8006bba <memcpy+0x6>

08006bca <memset>:
 8006bca:	4402      	add	r2, r0
 8006bcc:	4603      	mov	r3, r0
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d100      	bne.n	8006bd4 <memset+0xa>
 8006bd2:	4770      	bx	lr
 8006bd4:	f803 1b01 	strb.w	r1, [r3], #1
 8006bd8:	e7f9      	b.n	8006bce <memset+0x4>
	...

08006bdc <_init>:
 8006bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bde:	bf00      	nop
 8006be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006be2:	bc08      	pop	{r3}
 8006be4:	469e      	mov	lr, r3
 8006be6:	4770      	bx	lr

08006be8 <_fini>:
 8006be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bea:	bf00      	nop
 8006bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bee:	bc08      	pop	{r3}
 8006bf0:	469e      	mov	lr, r3
 8006bf2:	4770      	bx	lr
